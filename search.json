[{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Examples","text":"vignette, try highlight PopED features may useful. code related specific features like highlight described vignette. features () presented r-scripts “examples” folder PopED installation directory. can view list example files using commands: can open one examples (example, ex.1..PK.1.comp.oral.md.intro.R) using following code table provides check list features 15 available examples. Note: features available PopED demonstrated supplied examples.","code":"ex_dir <- system.file(\"examples\", package=\"PopED\") list.files(ex_dir) #>  [1] \"ex.1.a.PK.1.comp.oral.md.intro.R\"           #>  [2] \"ex.1.b.PK.1.comp.oral.md.re-parameterize.R\" #>  [3] \"ex.1.c.PK.1.comp.oral.md.ODE.compiled.R\"    #>  [4] \"ex.10.PKPD.HCV.compiled.R\"                  #>  [5] \"ex.11.PK.prior.R\"                           #>  [6] \"ex.12.covariate.distributions.R\"            #>  [7] \"ex.13.shrinkage.R\"                          #>  [8] \"ex.14.PK.IOV.R\"                             #>  [9] \"ex.15.full.covariance.matrix.R\"             #> [10] \"ex.2.a.warfarin.evaluate.R\"                 #> [11] \"ex.2.b.warfarin.optimize.R\"                 #> [12] \"ex.2.c.warfarin.ODE.compiled.R\"             #> [13] \"ex.2.d.warfarin.ED.R\"                       #> [14] \"ex.2.e.warfarin.Ds.R\"                       #> [15] \"ex.3.a.PKPD.1.comp.oral.md.imax.D-opt.R\"    #> [16] \"ex.3.b.PKPD.1.comp.oral.md.imax.ED-opt.R\"   #> [17] \"ex.4.PKPD.1.comp.emax.R\"                    #> [18] \"ex.5.PD.emax.hill.R\"                        #> [19] \"ex.6.PK.1.comp.oral.sd.R\"                   #> [20] \"ex.7.PK.1.comp.maturation.R\"                #> [21] \"ex.8.tmdd_qss_one_target_compiled.R\"        #> [22] \"ex.9.PK.2.comp.oral.md.ode.compiled.R\"      #> [23] \"HCV_ode.c\"                                  #> [24] \"one_comp_oral_CL.c\"                         #> [25] \"tmdd_qss_one_target.c\"                      #> [26] \"two_comp_oral_CL.c\" file_name <- \"ex.1.a.PK.1.comp.oral.md.intro.R\"  ex_file <- system.file(\"examples\",file_name,package=\"PopED\") file.copy(ex_file,tempdir(),overwrite = T) file.edit(file.path(tempdir(),file_name))"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"analytic-solution-of-pkpd-model-multiple-study-arms","dir":"Articles","previous_headings":"","what":"Analytic solution of PKPD model, multiple study arms","title":"Examples","text":"full code example available ex.4.PKPD.1.comp.emax.R. define PKPD mode using analytical equations. PK one compartment model intravenous bolus administration linear elimination. PD ordinary Emax model driven PK concentrations. expected output measurement (PK PD) given vector model_switch (see details). error model also accommodate response models. poped.db object vector specify model_switch order assign sampling times defined vector xt PK (=1) PD (=2) model. model predictions show typical PK PD profiles three dose groups expected 95% prediction interval data. initial design, shown poped.db object, consists 3 arms doses 0, 1, 2 mg; PK sampling times 0.33, 0.66, 0.9, 5 hours/days; PD sampling times 0.1, 1, 2, 5 hours/days. model.names=c(\"PK\",\"PD\") one can name outputs graph.","code":"library(PopED) f_pkpdmodel <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     y=xt     MS <- model_switch          # PK model     CONC = DOSE/V*exp(-CL/V*xt)           # PD model     EFF = E0 + CONC*EMAX/(EC50 + CONC)          y[MS==1] = CONC[MS==1]     y[MS==2] = EFF[MS==2]          return(list( y= y,poped.db=poped.db))   }) } ## -- Residual Error function ## -- Proportional PK + additive PD f_Err <- function(model_switch,xt,parameters,epsi,poped.db){   returnArgs <- do.call(poped.db$model$ff_pointer,list(model_switch,xt,parameters,poped.db))    y <- returnArgs[[1]]   poped.db <- returnArgs[[2]]      MS <- model_switch      prop.err <- y*(1+epsi[,1])   add.err <- y+epsi[,2]      y[MS==1] = prop.err[MS==1]   y[MS==2] = add.err[MS==2]      return(list( y= y,poped.db =poped.db ))  } poped.db <- create.poped.database(      # Model   ff_fun=f_pkpdmodel,   fError_fun=f_Err,   fg_fun=f_etaToParam,   sigma=diag(c(0.15,0.015)),   bpop=c(CL=0.5,V=0.2,E0=1,EMAX=1,EC50=1),     d=c(CL=0.09,V=0.09,E0=0.04,EC50=0.09),       # Design   groupsize=20,   m=3,   xt = c(0.33,0.66,0.9,5,0.1,1,2,5),   model_switch=c(1,1,1,1,2,2,2,2),   a=list(c(DOSE=0),c(DOSE=1),c(DOSE=2)),    # Design space   minxt=0,   maxxt=5,   bUseGrouped_xt=1,   maxa=c(DOSE=10),   mina=c(DOSE=0)) plot_model_prediction(   poped.db,PI=TRUE,   facet_scales=\"free\",   separate.groups=TRUE,   model.names=c(\"PK\",\"PD\"))"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"ode-solution-of-pk-model-multiple-dosing","dir":"Articles","previous_headings":"","what":"ODE solution of PK model, multiple dosing","title":"Examples","text":"full code example available ex.9.PK.2.comp.oral.md.ode.compiled.R. example, deSolve library needs installed computing solutions system differential equations. faster solutions one can use pre-compiled code using Rcpp library (see ). define two compartment model R using deSolve notation Now define initial conditions ODE system A_ini named vector, case compartments initialized zero c(A1=0,A2=0,A3=0). dosing input defined data.frame dose_dat referring named compartment var = c(\"A1\"), specified dose_times value=c(DOSE*Favail) dose amounts. Note covariates DOSE regimen TAU can differ arm optimized (shown ex.1..PK.1.comp.oral.md.intro.R). information see help pages ?deSolve::ode ?deSolve::events. creating PopED database. ff_fun point function providing solution ODE. , names parameter definition (fg) function match parameters used two functions. plot population prediction model initial design  Faster computations Rcpp: also define system using Rcpp, produce compiled code run faster (examples ex.2.c.warfarin.ODE.compiled.R). First redefine ODE system using Rcpp. Next add compiled function (two_comp_oral_ode_Rcpp) ODE solver. Finally create poped database use functions updating previously created database. can compare time design evaluation two methods describing model. difference noticeable gets larger complex ODE models.","code":"library(deSolve) PK.2.comp.oral.ode <- function(Time, State, Pars){   with(as.list(c(State, Pars)), {         dA1 <- -KA*A1      dA2 <- KA*A1 + A3* Q/V2 -A2*(CL/V1+Q/V1)     dA3 <- A2* Q/V1-A3* Q/V2     return(list(c(dA1, dA2, dA3)))   }) } ff.PK.2.comp.oral.md.ode <- function(model_switch, xt, parameters, poped.db){   with(as.list(parameters),{          # initial conditions of ODE system     A_ini <- c(A1=0, A2=0, A3=0)      #Set up time points to get ODE solutions     times_xt <- drop(xt) # sample times     times_start <- c(0) # add extra time for start of study     times_dose = seq(from=0,to=max(times_xt),by=TAU) # dose times     times <- unique(sort(c(times_start,times_xt,times_dose))) # combine it all          # Dosing     dose_dat <- data.frame(       var = c(\"A1\"),        time = times_dose,       value = c(DOSE*Favail),        method = c(\"add\")     )          out <- ode(A_ini, times, PK.2.comp.oral.ode, parameters,                events = list(data = dose_dat))#atol=1e-13,rtol=1e-13)     y = out[, \"A2\"]/V1     y=y[match(times_xt,out[,\"time\"])]     y=cbind(y)     return(list(y=y,poped.db=poped.db))   }) } poped.db <- create.poped.database(      # Model   ff_fun=\"ff.PK.2.comp.oral.md.ode\",   fError_fun=\"feps.add.prop\",   fg_fun=\"fg\",   sigma=c(prop=0.1^2,add=0.05^2),   bpop=c(CL=10,V1=100,KA=1,Q= 3.0, V2= 40.0, Favail=1),   d=c(CL=0.15^2,KA=0.25^2),   notfixed_bpop=c(1,1,1,1,1,0),      # Design   groupsize=20,   m=1,      #number of groups   xt=c( 48,50,55,65,70,85,90,120),      # Design space    minxt=0,   maxxt=144,   discrete_xt = list(0:144),   a=c(DOSE=100,TAU=24),   discrete_a = list(DOSE=seq(0,1000,by=100),TAU=8:24)) plot_model_prediction(poped.db,model_num_points = 500) library(Rcpp) cppFunction(   'List two_comp_oral_ode_Rcpp(double Time, NumericVector A, NumericVector Pars) {      int n = A.size();      NumericVector dA(n);                   double CL = Pars[0];      double V1 = Pars[1];      double KA = Pars[2];      double Q  = Pars[3];      double V2 = Pars[4];                   dA[0] = -KA*A[0];      dA[1] = KA*A[0] - (CL/V1)*A[1] - Q/V1*A[1] + Q/V2*A[2];      dA[2] = Q/V1*A[1] - Q/V2*A[2];      return List::create(dA);   }') ff.PK.2.comp.oral.md.ode.Rcpp <- function(model_switch, xt, parameters, poped.db){   with(as.list(parameters),{          # initial conditions of ODE system     A_ini <- c(A1=0, A2=0, A3=0)      #Set up time points to get ODE solutions     times_xt <- drop(xt) # sample times     times_start <- c(0) # add extra time for start of study     times_dose = seq(from=0,to=max(times_xt),by=TAU) # dose times     times <- unique(sort(c(times_start,times_xt,times_dose))) # combine it all          # Dosing     dose_dat <- data.frame(       var = c(\"A1\"),        time = times_dose,       value = c(DOSE*Favail),        method = c(\"add\")     )          # Here \"two_comp_oral_ode_Rcpp\" is equivalent      # to the non-compiled version \"PK.2.comp.oral.ode\".     out <- ode(A_ini, times, two_comp_oral_ode_Rcpp, parameters,                events = list(data = dose_dat))#atol=1e-13,rtol=1e-13)     y = out[, \"A2\"]/V1     y=y[match(times_xt,out[,\"time\"])]     y=cbind(y)     return(list(y=y,poped.db=poped.db))   }) } poped.db.Rcpp <- create.poped.database(   poped.db,   ff_fun=\"ff.PK.2.comp.oral.md.ode.Rcpp\") tic(); eval <- evaluate_design(poped.db); toc() #> Elapsed time: 2.704 seconds. tic(); eval <- evaluate_design(poped.db.Rcpp); toc() #> Elapsed time: 1.18 seconds."},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"ode-solution-of-tmdd-model-with-2-outputs-multiple-arms-different-dose-routes-different-number-of-sample-times-per-arm","dir":"Articles","previous_headings":"","what":"ODE solution of TMDD model with 2 outputs, Multiple arms, different dose routes, different number of sample times per arm","title":"Examples","text":"full code example available ex.8.tmdd_qss_one_target_compiled.R. function defines dosing derives ODE solution, discrete covariate SC_FLAG used give dose either A1 A2, sub-cutaneous IV compartment. Two different sub-studies defined, different sampling times per arm - terms total number samples actual times1. Due difference numbers relatively complicated study design define sample times (xt), sample time measure (model_switch) samples taken study time (G_xt) matrices. three variables xt, model_switch, G_xt matrices row representing one arm, number columns maximum number samples (endpoints) arms (.e., max(ni)). clear elements matrices considered specify number samples per arm defining vector ni create.poped.database function. can plugged normal poped.db setup. Now can plot population predictions group evaluate design.","code":"tmdd_qss_one_target_model_compiled <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     y=xt          #The initialization vector for the compartment     A_ini <- c(A1=DOSE*SC_FLAG,                A2=DOSE*(1-SC_FLAG),                A3=0,                A4=R0)          #Set up time points for the ODE     times_xt <- drop(xt)     times <- sort(times_xt)     times <- c(0,times) ## add extra time for start of integration          # solve the ODE     out <- ode(A_ini, times, tmdd_qss_one_target_model_ode, parameters)#,atol=1e-13,rtol=1e-13)               # extract the time points of the observations     out = out[match(times_xt,out[,\"time\"]),]          # Match ODE output to measurements     RTOT = out[,\"A4\"]     CTOT = out[,\"A2\"]/V1     CFREE = 0.5*((CTOT-RTOT-KSSS)+sqrt((CTOT-RTOT-KSSS)^2+4*KSSS*CTOT))     COMPLEX=((RTOT*CFREE)/(KSSS+CFREE))     RFREE= RTOT-COMPLEX          y[model_switch==1]= RTOT[model_switch==1]     y[model_switch==2] =CFREE[model_switch==2]     #y[model_switch==3]=RFREE[model_switch==3]          return(list( y=y,poped.db=poped.db))   }) } xt <- zeros(6,30) study_1_xt <- matrix(rep(c(0.0417,0.25,0.5,1,3,7,14,21,28,35,42,49,56),8),nrow=4,byrow=TRUE) study_2_xt <- matrix(rep(c(0.0417,1,1,7,14,21,28,56,63,70,77,84,91,98,105),4),nrow=2,byrow=TRUE) xt[1:4,1:26] <- study_1_xt xt[5:6,] <- study_2_xt  model_switch <- zeros(6,30) model_switch[1:4,1:13] <- 1 model_switch[1:4,14:26] <- 2 model_switch[5:6,1:15] <- 1 model_switch[5:6,16:30] <- 2  G_xt <- zeros(6,30) study_1_G_xt <- matrix(rep(c(1:13),8),nrow=4,byrow=TRUE) study_2_G_xt <- matrix(rep(c(14:28),4),nrow=2,byrow=TRUE) G_xt[1:4,1:26] <- study_1_G_xt G_xt[5:6,] <- study_2_G_xt poped.db.2 <- create.poped.database(      # Model   ff_fun=tmdd_qss_one_target_model_compiled,   fError_fun=tmdd_qss_one_target_model_ruv,   fg_fun=sfg,   sigma=c(rtot_add=0.04,cfree_add=0.0225),   bpop=c(CL=0.3,V1=3,Q=0.2,V2=3,FAVAIL=0.7,KA=0.5,VMAX=0,          KMSS=0,R0=0.1,KSSS=0.015,KDEG=10,KINT=0.05),   d=c(CL=0.09,V1=0.09,Q=0.04,V2=0.04,FAVAIL=0.04,       KA=0.16,VMAX=0,KMSS=0,R0=0.09,KSSS=0.09,KDEG=0.04,       KINT=0.04),   notfixed_bpop=c( 1,1,1,1,1,1,0,0,1,1,1,1),   notfixed_d=c( 1,1,1,1,1,1,0,0,1,1,1,1),      # Design   groupsize=rbind(6,6,6,6,100,100),   m=6,      #number of groups   xt=xt,   model_switch=model_switch,   ni=rbind(26,26,26,26,30,30),   a=list(c(DOSE=100, SC_FLAG=0),          c(DOSE=300, SC_FLAG=0),          c(DOSE=600, SC_FLAG=0),          c(DOSE=1000, SC_FLAG=1),          c(DOSE=600, SC_FLAG=0),          c(DOSE=1000, SC_FLAG=1)),      # Design space   bUseGrouped_xt=1,   G_xt=G_xt,   discrete_a = list(DOSE=seq(100,1000,by=100),                     SC_FLAG=c(0,1))) plot_model_prediction(poped.db.2,facet_scales=\"free\") eval_2 <- evaluate_design(poped.db.2) round(eval_2$rse) # in percent"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"model-with-continuous-covariates","dir":"Articles","previous_headings":"","what":"Model with continuous covariates","title":"Examples","text":"R code example available ex.12.covariate_distributions.R. Let’s assume model covariate included model description. define one-compartment PK model uses allometric scaling weight effect clearance volume distribution. Now define design. case one group individuals, define individuals’ typical weight 70 kg (=c(WT=70)). can create plot model prediction typical individual  evaluate initial design output produced see covariate parameters can estimated according design calculation (RSE WT_CL WT_V NA). ? Well, calculation done assuming every individual group covariate (speed calculation). clearly poor assumption case! Distribution covariates: can improve computation assuming distribution covariate (WT) individuals study. set groupsize=1, number groups 50 (m=50) assume WT sampled normal distribution mean=70 sd=10 (=.list(rnorm(50, mean = 70, sd = 10)). see , given distribution weights, covariate effect parameters (WT_CL WT_V) well estimated. However, looking one sample 50 individuals. Maybe better approach look distribution RSEs number experiments given expected weight distribution. Note, variance RSE covariate effect case strongly correlated variance weight distribution (shown).","code":"mod_1 <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     y=xt          CL=CL*(WT/70)^(WT_CL)     V=V*(WT/70)^(WT_V)     DOSE=1000*(WT/70)     y = DOSE/V*exp(-CL/V*xt)           return(list( y= y,poped.db=poped.db))   }) }  par_1 <- function(x,a,bpop,b,bocc){   parameters=c( CL=bpop[1]*exp(b[1]),                 V=bpop[2]*exp(b[2]),                 WT_CL=bpop[3],                 WT_V=bpop[4],                 WT=a[1])   return( parameters )  } poped_db <-    create.poped.database(     ff_fun=mod_1,     fg_fun=par_1,     fError_fun=feps.add.prop,     groupsize=50,     m=1,     sigma=c(prop=0.015,add=0.0015),     notfixed_sigma = c(1,0),     bpop=c(CL=3.8,V=20,WT_CL=0.75,WT_V=1),      d=c(CL=0.05,V=0.05),      xt=c( 1,2,4,6,8,24),     minxt=0,     maxxt=24,     bUseGrouped_xt=1,     a=c(WT=70)   ) plot_model_prediction(poped_db) evaluate_design(poped_db) #> Problems inverting the matrix. Results could be misleading. #> Warning:   The following parameters are not estimable: #>   WT_CL, WT_V #>   Is the design adequate to estimate all parameters? #> $ofv #> [1] -Inf #>  #> $fim #>                  CL          V WT_CL WT_V       d_CL        d_V   sig_prop #> CL       65.8889583 -0.7145374     0    0    0.00000    0.00000      0.000 #> V        -0.7145374  2.2798156     0    0    0.00000    0.00000      0.000 #> WT_CL     0.0000000  0.0000000     0    0    0.00000    0.00000      0.000 #> WT_V      0.0000000  0.0000000     0    0    0.00000    0.00000      0.000 #> d_CL      0.0000000  0.0000000     0    0 9052.31524   29.49016   1424.255 #> d_V       0.0000000  0.0000000     0    0   29.49016 8316.09464   2483.900 #> sig_prop  0.0000000  0.0000000     0    0 1424.25450 2483.90024 440009.144 #>  #> $rse #>        CL         V     WT_CL      WT_V      d_CL       d_V  sig_prop  #>  3.247502  3.317107        NA        NA 21.026264 21.950179 10.061292 poped_db_2 <-    create.poped.database(     ff_fun=mod_1,     fg_fun=par_1,     fError_fun=feps.add.prop,     groupsize=1,     m=50,     sigma=c(prop=0.015,add=0.0015),     notfixed_sigma = c(prop=1,add=0),     bpop=c(CL=3.8,V=20,WT_CL=0.75,WT_V=1),      d=c(CL=0.05,V=0.05),      xt=c(1,2,4,6,8,24),     minxt=0,     maxxt=24,     bUseGrouped_xt=1,     a=as.list(rnorm(50, mean = 70, sd = 10))   ) ev <- evaluate_design(poped_db_2)  round(ev$ofv,1) #> [1] 42.4 round(ev$rse) nsim <- 30 rse_list <- c() for(i in 1:nsim){   poped_db_tmp <-      create.poped.database(       ff_fun=mod_1,       fg_fun=par_1,       fError_fun=feps.add.prop,       groupsize=1,       m=50,       sigma=c(prop=0.015,add=0.0015),       notfixed_sigma = c(1,0),       bpop=c(CL=3.8,V=20,WT_CL=0.75,WT_V=1),        d=c(CL=0.05,V=0.05),        xt=c( 1,2,4,6,8,24),       minxt=0,       maxxt=24,       bUseGrouped_xt=1,       a=as.list(rnorm(50,mean = 70,sd=10)))   rse_tmp <- evaluate_design(poped_db_tmp)$rse   rse_list <- rbind(rse_list,rse_tmp) } (rse_quant <- apply(rse_list,2,quantile))"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"model-with-discrete-covariates","dir":"Articles","previous_headings":"","what":"Model with discrete covariates","title":"Examples","text":"See ex.11.PK.prior.R. covariate isPediatric distinguish adults pediatrics. Alternatively, DOSE TAU first example can considered discrete covariates.","code":""},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"model-with-inter-occasion-variability-iov","dir":"Articles","previous_headings":"","what":"Model with Inter-Occasion Variability (IOV)","title":"Examples","text":"full code example available ex.14.PK.IOV.R. IOV introduced bocc[x,y] parameter definition function matrix first argument x indicating index IOV variances, second argument y denoting occasion. used example derive different clearance values, .e., CL_OCC_1 CL_OCC_2. parameters can now used model function define change parameters occasions (change occurs 7th dose one-compartment model first order absorption). within-subject variability variances (docc) defined poped database 3-column matrix one row per IOV-parameter, middle column giving variance values. can visualize IOV looking example individual. see PK profile changes 7th dose (red line) due change clearance.  can also see design relatively poor estimating IOV parameter:","code":"sfg <- function(x,a,bpop,b,bocc){   parameters=c( CL_OCC_1=bpop[1]*exp(b[1]+bocc[1,1]),                 CL_OCC_2=bpop[1]*exp(b[1]+bocc[1,2]),                 V=bpop[2]*exp(b[2]),                 KA=bpop[3]*exp(b[3]),                 DOSE=a[1],                 TAU=a[2])   return( parameters )  } cppFunction(   'List one_comp_oral_ode(double Time, NumericVector A, NumericVector Pars) {    int n = A.size();    NumericVector dA(n);                 double CL_OCC_1 = Pars[0];    double CL_OCC_2 = Pars[1];    double V = Pars[2];    double KA = Pars[3];    double TAU = Pars[4];    double N,CL;                 N = floor(Time/TAU)+1;    CL = CL_OCC_1;    if(N>6) CL = CL_OCC_2;        dA[0] = -KA*A[0];    dA[1] = KA*A[0] - (CL/V)*A[1];    return List::create(dA);    }' )  ff.ode.rcpp <- function(model_switch, xt, parameters, poped.db){   with(as.list(parameters),{     A_ini <- c(A1=0, A2=0)     times_xt <- drop(xt) #xt[,,drop=T]      dose_times = seq(from=0,to=max(times_xt),by=TAU)     eventdat <- data.frame(var = c(\"A1\"),                             time = dose_times,                            value = c(DOSE), method = c(\"add\"))     times <- sort(c(times_xt,dose_times))     out <- ode(A_ini, times, one_comp_oral_ode, c(CL_OCC_1,CL_OCC_2,V,KA,TAU),                 events = list(data = eventdat))#atol=1e-13,rtol=1e-13)     y = out[, \"A2\"]/(V)     y=y[match(times_xt,out[,\"time\"])]     y=cbind(y)     return(list(y=y,poped.db=poped.db))   }) } poped.db <-    create.poped.database(     ff_fun=ff.ode.rcpp,     fError_fun=feps.add.prop,     fg_fun=sfg,     bpop=c(CL=3.75,V=72.8,KA=0.25),      d=c(CL=0.25^2,V=0.09,KA=0.09),      sigma=c(prop=0.04,add=5e-6),     notfixed_sigma=c(0,0),     docc = matrix(c(0,0.09,0),nrow = 1),     m=2,     groupsize=20,     xt=c( 1,2,8,240,245),     minxt=c(0,0,0,240,240),     maxxt=c(10,10,10,248,248),     bUseGrouped_xt=1,     a=list(c(DOSE=20,TAU=24),c(DOSE=40, TAU=24)),     maxa=c(DOSE=200,TAU=24),     mina=c(DOSE=0,TAU=24)   ) library(ggplot2) set.seed(123) plot_model_prediction(   poped.db,    PRED=F,IPRED=F,    separate.groups=T,    model_num_points = 300,    groupsize_sim = 1,   IPRED.lines = T,    alpha.IPRED.lines=0.6,   sample.times = F ) + geom_vline(xintercept = 24*6,color=\"red\") ev <- evaluate_design(poped.db) round(ev$rse)"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"full-omega-matrix","dir":"Articles","previous_headings":"","what":"Full omega matrix","title":"Examples","text":"full code example available ex.15.full.covariance.matrix.R. covd object used defining covariances subject variances (-diagonal elements full variance-covariance matrix subject variability). covariances mean? indicate correlation inter-individual variabilities, ca. 0.8 clearance volume, well volume absorption rate. can clearly see difference variance model predictions.  Evaluating designs without covariances: Note, precision parameters barely affected including full covariance matrix. likely different practice ill-conditioned numerical problems. Evaluate designs full FIM (instead reduced)","code":"poped.db_with <-    create.poped.database(     ff_file=\"ff\",     fg_file=\"sfg\",     fError_file=\"feps\",     bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),      notfixed_bpop=c(1,1,1,0),     d=c(CL=0.07, V=0.02, KA=0.6),      covd = c(.03,.1,.09),     sigma=c(prop=0.01),     groupsize=32,     xt=c( 0.5,1,2,6,24,36,72,120),     minxt=0,     maxxt=120,     a=70   ) (IIV <- poped.db_with$parameters$param.pt.val$d) #>      [,1] [,2] [,3] #> [1,] 0.07 0.03 0.10 #> [2,] 0.03 0.02 0.09 #> [3,] 0.10 0.09 0.60 cov2cor(IIV) #>           [,1]      [,2]      [,3] #> [1,] 1.0000000 0.8017837 0.4879500 #> [2,] 0.8017837 1.0000000 0.8215838 #> [3,] 0.4879500 0.8215838 1.0000000 library(ggplot2) p1 <- plot_model_prediction(poped.db, PI=TRUE)+ylim(-0.5,12)  p2 <- plot_model_prediction(poped.db_with,PI=TRUE) +ylim(-0.5,12) gridExtra::grid.arrange(p1+ ggtitle(\"No covariance in BSV\"), p2+ ggtitle(\"Covariance in BSV\"), nrow = 1) ev1 <- evaluate_design(poped.db) ev2 <- evaluate_design(poped.db_with) round(ev1$rse) round(ev2$rse) ev1 <- evaluate_design(poped.db, fim.calc.type=0) ev2 <-evaluate_design(poped.db_with, fim.calc.type=0)  round(ev1$rse,1) round(ev2$rse,1)"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"include-a-prior-fim-compute-power-to-identify-a-parameter","dir":"Articles","previous_headings":"","what":"Include a prior FIM, compute power to identify a parameter","title":"Examples","text":"example incorporate prior knowledge current study design calculation. First expected FIM obtained experiment adults computed. FIM added current experiment children. One also use observed FIM using estimation software fit one realization design ($COVARIANCE step NONMEM example). full code example available ex.11.PK.prior.R. Note define parameters one-compartment first-order absorption model using covariate called isPediatric switch adult pediatric models, bpop[5]=pedCL factor multiply adult clearance bpop[3] obtain pediatric one. design design space adults defined (Two arms, 5 sample time points per arm, doses 20 40 mg, isPediatric = 0). want pool results (.e. add FIMs together), also provide pedCL parameter adult children FIMs dimensions. Create plot model without variability  store FIM adult design evaluate design obvious estimate pediatric covariate adult data ; hence warning message. can also note zeros 4th column 4th row FIM indicating pedCL estimated adult data. can evaluate adult design without warning, setting pedCL parameter fixed (.e., estimated): One obtains good estimates parameters adults (<60% RSE ). pediatrics covariate isPediatric = 1. define one arm, 4 sample-time points. can create plot pediatric model without variability  Evaluate design pediatrics study alone. Clearly design problems . can add prior information adult study evaluate design (.e., pooling adult pediatric data). pooled data leads much higher precision parameter estimates compared either study separately. One can also obtain power estimating pediatric difference clearance (power estimating bpop[5] different 1). see clearly distinguish parameter one need 14 children pediatric study (80% power α=0.05\\alpha=0.05).","code":"sfg <- function(x,a,bpop,b,bocc){   parameters=c(      V=bpop[1]*exp(b[1]),     KA=bpop[2]*exp(b[2]),     CL=bpop[3]*exp(b[3])*bpop[5]^a[3], # add covariate for pediatrics     Favail=bpop[4],     isPediatric = a[3],     DOSE=a[1],     TAU=a[2])   return( parameters )  } poped.db <-    create.poped.database(     ff_fun=ff.PK.1.comp.oral.md.CL,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9,pedCL=0.8),      notfixed_bpop=c(1,1,1,0,1),     d=c(V=0.09,KA=0.09,CL=0.25^2),      sigma=c(0.04,5e-6),     notfixed_sigma=c(0,0),     m=2,     groupsize=20,     xt=c( 1,8,10,240,245),     bUseGrouped_xt=1,     a=list(c(DOSE=20,TAU=24,isPediatric = 0),            c(DOSE=40, TAU=24,isPediatric = 0))   ) plot_model_prediction(poped.db, model_num_points = 300) (outAdult = evaluate_design(poped.db)) #> Problems inverting the matrix. Results could be misleading. #> Warning:   The following parameters are not estimable: #>   pedCL #>   Is the design adequate to estimate all parameters? #> $ofv #> [1] -Inf #>  #> $fim #>                 V          KA          CL pedCL          d_V         d_KA #> V      0.05854391   -6.815269 -0.01531146     0    0.0000000   0.00000000 #> KA    -6.81526942 2963.426688 -1.32113719     0    0.0000000   0.00000000 #> CL    -0.01531146   -1.321137 37.50597895     0    0.0000000   0.00000000 #> pedCL  0.00000000    0.000000  0.00000000     0    0.0000000   0.00000000 #> d_V    0.00000000    0.000000  0.00000000     0 1203.3695137 192.31775149 #> d_KA   0.00000000    0.000000  0.00000000     0  192.3177515 428.81459138 #> d_CL   0.00000000    0.000000  0.00000000     0    0.2184104   0.01919009 #>               d_CL #> V     0.000000e+00 #> KA    0.000000e+00 #> CL    0.000000e+00 #> pedCL 0.000000e+00 #> d_V   2.184104e-01 #> d_KA  1.919009e-02 #> d_CL  3.477252e+03 #>  #> $rse #>         V        KA        CL     pedCL       d_V      d_KA      d_CL  #>  6.634931  8.587203  4.354792        NA 33.243601 55.689432 27.133255 evaluate_design(create.poped.database(poped.db, notfixed_bpop=c(1,1,1,0,0))) #> $ofv #> [1] 29.70233 #>  #> $fim #>                V          KA          CL          d_V         d_KA         d_CL #> V     0.05854391   -6.815269 -0.01531146    0.0000000   0.00000000 0.000000e+00 #> KA   -6.81526942 2963.426688 -1.32113719    0.0000000   0.00000000 0.000000e+00 #> CL   -0.01531146   -1.321137 37.50597895    0.0000000   0.00000000 0.000000e+00 #> d_V   0.00000000    0.000000  0.00000000 1203.3695137 192.31775149 2.184104e-01 #> d_KA  0.00000000    0.000000  0.00000000  192.3177515 428.81459138 1.919009e-02 #> d_CL  0.00000000    0.000000  0.00000000    0.2184104   0.01919009 3.477252e+03 #>  #> $rse #>         V        KA        CL       d_V      d_KA      d_CL  #>  6.634931  8.587203  4.354792 33.243601 55.689432 27.133255 poped.db.ped <-    create.poped.database(     ff_fun=ff.PK.1.comp.oral.md.CL,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9,pedCL=0.8),      notfixed_bpop=c(1,1,1,0,1),     d=c(V=0.09,KA=0.09,CL=0.25^2),      sigma=c(0.04,5e-6),     notfixed_sigma=c(0,0),     m=1,     groupsize=6,     xt=c( 1,2,6,240),     bUseGrouped_xt=1,     a=list(c(DOSE=40,TAU=24,isPediatric = 1))   ) plot_model_prediction(poped.db.ped, model_num_points = 300) evaluate_design(poped.db.ped) #> $ofv #> [1] -15.2274 #>  #> $fim #>                  V         KA          CL        pedCL         d_V       d_KA #> V      0.007766643  -1.395981 -0.01126202  -0.05279073   0.0000000  0.0000000 #> KA    -1.395980934 422.458209 -2.14666933 -10.06251250   0.0000000  0.0000000 #> CL    -0.011262023  -2.146669  5.09936874  23.90329099   0.0000000  0.0000000 #> pedCL -0.052790734 -10.062512 23.90329099 112.04667652   0.0000000  0.0000000 #> d_V    0.000000000   0.000000  0.00000000   0.00000000 141.1922923 53.7923483 #> d_KA   0.000000000   0.000000  0.00000000   0.00000000  53.7923483 58.0960085 #> d_CL   0.000000000   0.000000  0.00000000   0.00000000   0.7877291  0.3375139 #>              d_CL #> V       0.0000000 #> KA      0.0000000 #> CL      0.0000000 #> pedCL   0.0000000 #> d_V     0.7877291 #> d_KA    0.3375139 #> d_CL  428.5254900 #>  #> $rse #>            V           KA           CL        pedCL          d_V         d_KA  #> 2.472122e+01 3.084970e+01 7.414552e+08 7.414552e+08 1.162309e+02 1.811978e+02  #>         d_CL  #> 7.729188e+01 poped.db.all <- create.poped.database(   poped.db.ped,   prior_fim = outAdult$fim )  (out.all <- evaluate_design(poped.db.all)) #> $ofv #> [1] 34.96368 #>  #> $fim #>                  V         KA          CL        pedCL         d_V       d_KA #> V      0.007766643  -1.395981 -0.01126202  -0.05279073   0.0000000  0.0000000 #> KA    -1.395980934 422.458209 -2.14666933 -10.06251250   0.0000000  0.0000000 #> CL    -0.011262023  -2.146669  5.09936874  23.90329099   0.0000000  0.0000000 #> pedCL -0.052790734 -10.062512 23.90329099 112.04667652   0.0000000  0.0000000 #> d_V    0.000000000   0.000000  0.00000000   0.00000000 141.1922923 53.7923483 #> d_KA   0.000000000   0.000000  0.00000000   0.00000000  53.7923483 58.0960085 #> d_CL   0.000000000   0.000000  0.00000000   0.00000000   0.7877291  0.3375139 #>              d_CL #> V       0.0000000 #> KA      0.0000000 #> CL      0.0000000 #> pedCL   0.0000000 #> d_V     0.7877291 #> d_KA    0.3375139 #> d_CL  428.5254900 #>  #> $rse #>         V        KA        CL     pedCL       d_V      d_KA      d_CL  #>  6.381388  8.222819  4.354761 12.591940 31.808871 52.858399 25.601551 evaluate_power(poped.db.all, bpop_idx=5, h0=1, out=out.all) #> $ofv #> [1] 34.96368 #>  #> $fim #>                  V         KA          CL        pedCL         d_V       d_KA #> V      0.007766643  -1.395981 -0.01126202  -0.05279073   0.0000000  0.0000000 #> KA    -1.395980934 422.458209 -2.14666933 -10.06251250   0.0000000  0.0000000 #> CL    -0.011262023  -2.146669  5.09936874  23.90329099   0.0000000  0.0000000 #> pedCL -0.052790734 -10.062512 23.90329099 112.04667652   0.0000000  0.0000000 #> d_V    0.000000000   0.000000  0.00000000   0.00000000 141.1922923 53.7923483 #> d_KA   0.000000000   0.000000  0.00000000   0.00000000  53.7923483 58.0960085 #> d_CL   0.000000000   0.000000  0.00000000   0.00000000   0.7877291  0.3375139 #>              d_CL #> V       0.0000000 #> KA      0.0000000 #> CL      0.0000000 #> pedCL   0.0000000 #> d_V     0.7877291 #> d_KA    0.3375139 #> d_CL  428.5254900 #>  #> $rse #>         V        KA        CL     pedCL       d_V      d_KA      d_CL  #>  6.381388  8.222819  4.354761 12.591940 31.808871 52.858399 25.601551  #>  #> $power #>       Value      RSE power_pred power_want need_rse min_N_tot #> pedCL   0.8 12.59194   51.01851         80 8.923519        14"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"design-evaluation-including-uncertainty-in-the-model-parameters-robust-design","dir":"Articles","previous_headings":"","what":"Design evaluation including uncertainty in the model parameters (robust design)","title":"Examples","text":"example aim evaluate design incorporating uncertainty around parameter values model. full code example available ex.2.d.warfarin.ED.R. illustration one Warfarin examples software comparison : Nyberg et al.2. define fixed effects model add 10% uncertainty Favail. use Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2 defines mean. column 3 defines variance distribution (length uniform distribution). define log-normal distribution model parameter set define initial design design space. Specifically note bpop=bpop_vals_ed ED_samp_size=20 arguments. ED_samp_size=20 indicates number samples used evaluating E-family objective functions. can also provide ED_samp_size argument design evaluation optimization arguments: can see result, based MC sampling, somewhat variable samples.","code":"bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed <-    cbind(ones(length(bpop_vals),1)*4, # log-normal distribution         bpop_vals,         ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed[\"Favail\",] <- c(0,1,0) bpop_vals_ed #>          bpop_vals          #> CL     4      0.15 0.000225 #> V      4      8.00 0.640000 #> KA     4      1.00 0.010000 #> Favail 0      1.00 0.000000 poped.db <-    create.poped.database(     ff_fun=ff,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=bpop_vals_ed,      notfixed_bpop=c(1,1,1,0),     d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(0.01,0.25),     groupsize=32,     xt=c( 0.5,1,2,6,24,36,72,120),     minxt=0,     maxxt=120,     a=70,     mina=0,     maxa=100,     ED_samp_size=20) tic();evaluate_design(poped.db,d_switch=FALSE,ED_samp_size=20); toc() #> $ofv #> [1] 55.41311 #>  #> $fim #>                     CL         V        KA         d_CL         d_V        d_KA #> CL         17590.84071 21.130793 10.320177 0.000000e+00     0.00000  0.00000000 #> V             21.13079 17.817120 -3.529007 0.000000e+00     0.00000  0.00000000 #> KA            10.32018 -3.529007 51.622520 0.000000e+00     0.00000  0.00000000 #> d_CL           0.00000  0.000000  0.000000 2.319890e+03    10.62595  0.03827253 #> d_V            0.00000  0.000000  0.000000 1.062595e+01 19005.72029 11.80346662 #> d_KA           0.00000  0.000000  0.000000 3.827253e-02    11.80347 38.83793850 #> SIGMA[1,1]     0.00000  0.000000  0.000000 7.336186e+02  9690.93156 64.79341332 #> SIGMA[2,2]     0.00000  0.000000  0.000000 9.057819e+01   265.70389  2.95284399 #>              SIGMA[1,1]  SIGMA[2,2] #> CL              0.00000    0.000000 #> V               0.00000    0.000000 #> KA              0.00000    0.000000 #> d_CL          733.61860   90.578191 #> d_V          9690.93156  265.703890 #> d_KA           64.79341    2.952844 #> SIGMA[1,1] 193719.81023 6622.636801 #> SIGMA[2,2]   6622.63680  477.649386 #>  #> $rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   5.030673   2.983917  14.014958  29.787587  36.758952  26.753311  31.645011  #> SIGMA[2,2]  #>  25.341368 #> Elapsed time: 0.128 seconds. tic();evaluate_design(poped.db,d_switch=FALSE,ED_samp_size=20); toc() #> $ofv #> [1] 55.42045 #>  #> $fim #>                     CL         V        KA         d_CL         d_V        d_KA #> CL         17652.97859 20.900077 10.206898 0.000000e+00     0.00000  0.00000000 #> V             20.90008 17.846603 -3.482767 0.000000e+00     0.00000  0.00000000 #> KA            10.20690 -3.482767 51.214965 0.000000e+00     0.00000  0.00000000 #> d_CL           0.00000  0.000000  0.000000 2.323385e+03    10.26722  0.03682497 #> d_V            0.00000  0.000000  0.000000 1.026722e+01 19067.54099 11.76757081 #> d_KA           0.00000  0.000000  0.000000 3.682497e-02    11.76757 38.83554961 #> SIGMA[1,1]     0.00000  0.000000  0.000000 7.287665e+02  9671.83881 65.02022679 #> SIGMA[2,2]     0.00000  0.000000  0.000000 9.042351e+01   265.46887  2.94967457 #>              SIGMA[1,1]  SIGMA[2,2] #> CL              0.00000    0.000000 #> V               0.00000    0.000000 #> KA              0.00000    0.000000 #> d_CL          728.76653   90.423509 #> d_V          9671.83881  265.468868 #> d_KA           65.02023    2.949675 #> SIGMA[1,1] 194823.12196 6613.513007 #> SIGMA[2,2]   6613.51301  476.316709 #>  #> $rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   5.021700   2.980981  14.068646  29.765030  36.691675  26.754137  31.469425  #> SIGMA[2,2]  #>  25.311870 #> Elapsed time: 0.127 seconds."},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"design-evaluation-for-a-subset-of-model-parameters-of-interest-ds-optimality","dir":"Articles","previous_headings":"","what":"Design evaluation for a subset of model parameters of interest (Ds optimality)","title":"Examples","text":"Ds-optimality criterion can used one interested estimating subset “s” model parameters precisely possible. full code example available ex.2.e.warfarin.Ds.R. First define initial design design space: Ds optimality add ds_index option create.poped.database function indicate whether parameter interesting (=0) (=1). Moreover, set ofv_calc_type=6 computing Ds optimality criterion (set 4 default, computing log determinant FIM). details available running command ?create.poped.database. Design evaluation:","code":"poped.db <-    create.poped.database(     ff_fun=ff,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),      notfixed_bpop=c(1,1,1,0),     d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(0.01,0.25),     groupsize=32,     xt=c( 0.5,1,2,6,24,36,72,120),     minxt=0,     maxxt=120,     a=70,     mina=0,     maxa=100,     ds_index=c(0,0,0,1,1,1,1,1), # size is number_of_non_fixed_parameters     ofv_calc_type=6) # Ds OFV calculation evaluate_design(poped.db) #> $ofv #> [1] 16.49204 #>  #> $fim #>                     CL         V        KA         d_CL          d_V #> CL         17141.83891 20.838375 10.011000 0.000000e+00     0.000000 #> V             20.83837 17.268051 -3.423641 0.000000e+00     0.000000 #> KA            10.01100 -3.423641 49.864697 0.000000e+00     0.000000 #> d_CL           0.00000  0.000000  0.000000 2.324341e+03     9.770352 #> d_V            0.00000  0.000000  0.000000 9.770352e+00 19083.877564 #> d_KA           0.00000  0.000000  0.000000 3.523364e-02    11.721317 #> SIGMA[1,1]     0.00000  0.000000  0.000000 7.268410e+02  9656.158553 #> SIGMA[2,2]     0.00000  0.000000  0.000000 9.062739e+01   266.487127 #>                   d_KA   SIGMA[1,1]  SIGMA[2,2] #> CL          0.00000000      0.00000    0.000000 #> V           0.00000000      0.00000    0.000000 #> KA          0.00000000      0.00000    0.000000 #> d_CL        0.03523364    726.84097   90.627386 #> d_V        11.72131703   9656.15855  266.487127 #> d_KA       38.85137516     64.78096    2.947285 #> SIGMA[1,1] 64.78095548 192840.20092 6659.569867 #> SIGMA[2,2]  2.94728469   6659.56987  475.500111 #>  #> $rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   5.096246   3.031164  14.260384  29.761226  36.681388  26.748640  32.011719  #> SIGMA[2,2]  #>  25.637971"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"shrinkage","dir":"Articles","previous_headings":"","what":"Shrinkage","title":"Examples","text":"full code example available “ex.13.shrinkage.R”.  evaluate estimation quality individual random effects model (b’s) use function shrinkage(). output shows us expected shrinkage variance scale (shrinkvar=1−var(bj)/D(j,j)shrink_{var}=1-var(b_j)/D(j,j)) standard deviation scale (shrinksd=1−sd(bj)/sqrt(D(j,j))shrink_{sd}=1-sd(b_j)/sqrt(D(j,j))), well standard errors bjb_j estimates.","code":"shrinkage(poped.db) #> # A tibble: 3 × 5 #>    d_KA   d_V `D[3,3]` type       group #>   <dbl> <dbl>    <dbl> <chr>      <chr> #> 1 0.504 0.367    0.424 shrink_var grp_1 #> 2 0.295 0.205    0.241 shrink_sd  grp_1 #> 3 0.710 0.303    0.206 se         grp_1"},{"path":"https://andrewhooker.github.io/PopED/articles/examples.html","id":"further-examples","dir":"Articles","previous_headings":"","what":"Further examples","title":"Examples","text":"Available PopED, shown examples: Espresso design Handling BLQ data Irregular dosing complex: e.g. switching s.c. .v. within one arm. Constraining optimization different allowed sampling times group Constraining optimization different allowed sampling times response Keep sampling time fixed (automatically part optimal design protocol) Handling derived outputs implemented: Symbolic differentiation","code":""},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"define-a-model","dir":"Articles","previous_headings":"","what":"Define a model","title":"Optimal design with LOQ data in PopED","text":"define, example, one-compartment pharmacokinetic model linear absorption (analytic solution) PopED (Nyberg et al. 2012). Next define parameters function. DOSEis defined covariate (vector ) can optimize value later. use additive proportional residual unexplained variability (RUV) model, predefined PopED function feps.add.prop.","code":"library(PopED) packageVersion(\"PopED\") #> [1] '0.6.0.9005' ff <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     y=xt     y=(DOSE*KA/(V*(KA-CL/V)))*(exp(-CL/V*xt)-exp(-KA*xt))     return(list(y=y,poped.db=poped.db))   })} sfg <- function(x,a,bpop,b,bocc){   parameters=c( CL=bpop[1]*exp(b[1]),                 V=bpop[2]*exp(b[2]),                 KA=bpop[3]*exp(b[3]),                 DOSE=a[1]) }"},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"define-an-initial-design-and-design-space","dir":"Articles","previous_headings":"","what":"Define an initial design and design space","title":"Optimal design with LOQ data in PopED","text":"Now define model parameter values, initial design design space optimization. define model parameters similar Warfarin example software comparison Nyberg et al. (2015) arbitrary design one group 32 individuals.","code":"poped_db <-    create.poped.database(     ff_fun=ff,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=c(CL=0.15, V=8, KA=1.0),      d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(prop=0.01,add=0.25),     groupsize=32,     xt=c( 0.5,3,50,120),     discrete_xt = list(c(0.5,1:120)),     minxt=0,     maxxt=120,     a=70,     mina=0,     maxa=100)"},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Optimal design with LOQ data in PopED","text":"First may make sense check model design make sure get expect simulating data. plot model typical value 95% prediction interval (PI) intial design:","code":"plot_model_prediction(poped_db, model_num_points = 500,facet_scales = \"free\",PI=T)"},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"design-evaluation","dir":"Articles","previous_headings":"","what":"Design evaluation","title":"Optimal design with LOQ data in PopED","text":"Next, evaluate initial design. see relative standard error parameters (percent) relatively well estimated initial design except subject variability parameter volume distribution (d_V) proportional RUV parameter (sig_prop).","code":"eval_full <- evaluate_design(poped_db) round(eval_full$rse)"},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"loq-handling","dir":"Articles","previous_headings":"","what":"LOQ handling","title":"Optimal design with LOQ data in PopED","text":"assume LOQ level 2 concentration units. shown red dotted line.  evaluate designs use design evaluation criteria based “integration FIM scaling” method (loq_method=1 default) “omit observations PRED<LOQ” method (loq_method=2) Vong et al. (2012) (referred D6 D2 methods, respectively, presentation Vong et al.). D6 method : Enumerate permutations sample point quantifiable (lower LOQ, upper LOQ). sample points expected prediction interval (default 95%, loq_PI_conf_level = 0.95) overlap LOQ design point assumed either always observed always outside limit quantification. Compute probability permutation occurring, filtering potential realized designs low probabilities (default loq_prob_limit = 0.001). Evalaute Fisher Information Matrix (FIM) remaining design permutations, assuming information design point , permutation, within limits quantification. Take weighted sum resulting information matrices. D2 method simplification process samples typical value prediction (PRED) lower LOQ upper LOQ removed design calculating FIM. evaluate initial design methods test speed computations. see D6 significantly slower D2 (D6 accurate representation RSE expected using M3 estimation methods). D2 method removing last design point, can se . predicted parameter uncertainty three methods shown table (relative standard error, RSE, percent). see uncertainty generally higher LOQ evaluations (expected). also see predictions uncertainty significantly larger D6 method. expected, D2 method ignores design points model PRED LOQ (last observation design), whereas appears previous figure ~25% observations last design point LOQ. M6 method accounts probability last design point data LOQ thus realistic assessment expected parameter uncertainty.","code":"library(ggplot2) plot_model_prediction(poped_db, model_num_points = 500,facet_scales = \"free\",PI=T) +    geom_hline(yintercept = 2,color=\"red\",linetype=\"dotted\",linewidth=1) set.seed(1234) e_time_D6 <- system.time(   eval_D6 <- evaluate_design(poped_db,loq=2) )  e_time_D2 <- system.time(   eval_D2 <- evaluate_design(poped_db,loq=2, loq_method=2) )  cat(\"D6 evaluation time: \",e_time_D6[1],\"seconds \\n\" ) cat(\"D2 evaluation time: \",e_time_D2[1],\"deconds \\n\" ) #> D6 evaluation time:  0.047 seconds  #> D2 evaluation time:  0.007 deconds poped_db_2 <- create.poped.database(     ff_fun=ff,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=c(CL=0.15, V=8, KA=1.0),      d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(prop=0.01,add=0.25),     groupsize=32,     xt=c( 0.5,3,50),     discrete_xt = list(c(0.5,1:120)),     minxt=0,     maxxt=120,     a=70,     mina=0,     maxa=100) eval_red <- evaluate_design(poped_db_2) testthat::expect_equal(eval_red$ofv,eval_D2$ofv) testthat::expect_equal(eval_red$rse,eval_D2$rse)"},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"uloq-handling","dir":"Articles","previous_headings":"LOQ handling","what":"ULOQ handling","title":"Optimal design with LOQ data in PopED","text":"needed can also handle upper limits quantification. Lets assume ULOQ 7 units addition LLOQ 2 units:  can evaluate design based D2 D6 methods. look predicted RSE percent.","code":"library(ggplot2) plot_model_prediction(poped_db, model_num_points = 500,facet_scales = \"free\",                       PI=T, PI_alpha = 0.1) +    geom_hline(yintercept = 2,color=\"red\",linetype=\"dotted\",linewidth=1) +    geom_hline(yintercept = 7,color=\"blue\",linetype=\"dotted\",linewidth=1) eval_ul_D6 <-evaluate_design(poped_db,                 loq=2,                 uloq=7)  eval_ul_D2 <- evaluate_design(poped_db,                                 loq=2,                                 loq_method=2,                                 uloq=7,                                 uloq_method=2) #> Problems inverting the matrix. Results could be misleading. eval_rse_2 <-   tibble::tibble(\"Parameter\"=names(eval_full$rse),                  \"No LOQ\"=round(eval_full$rse),                  \"D6 (only LLOQ)\"=round(eval_D6$rse),                  \"D2 (only LLOQ)\"=round(eval_D2$rse),                  \"D6 (ULOQ and LLOQ)\"=round(eval_ul_D6$rse),                  \"D2 (ULOQ and LLOQ)\"=round(eval_ul_D2$rse)) eval_rse_2"},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"design-optimization","dir":"Articles","previous_headings":"","what":"Design optimization","title":"Optimal design with LOQ data in PopED","text":"Next, optimize design using different methods computing FIM. optimize using lower LOQ. designs points shown together one plot demonstrate different handling BLQ data results different optimal designs. “full” design, ignoring LOQ, places design point end sampling space, results many observations LOQ. D2 D6 methods push design points regions fewer LOQ observations occur. compare effects different designs parameter precision, evaluate optimal designs using D6 method. expected %RSE parameters shown . see D6 optimized design gives, average, best parameter precision. D2 optimal design stragetgy may reasonable obtain designs “good enough” D6 method slow optimization.","code":"optim_D6 <- poped_optim(poped_db, opt_xt = TRUE,                         parallel=T,                         loq=2)  optim_D2 <- poped_optim(poped_db, opt_xt = TRUE,                         parallel=T,                         loq=2,                         loq_method=2)  optim_full <- poped_optim(poped_db, opt_xt = TRUE,                         parallel=T) optim_full_D6<- with(optim_full,    evaluate_design(poped.db,                   loq=2))  optim_D2_D6<- with(optim_D2,    evaluate_design(poped.db,                   loq=2))  optim_D6_D6<- with(optim_D6,    evaluate_design(poped.db,                   loq=2)) optim_rse_D6 <-   tibble::tibble(\"Parameter\"=names(eval_full$rse),                  \"No LOQ\"=round(optim_full_D6$rse),                  \"D6\"=round(optim_D6_D6$rse),                  \"D2\"=round(optim_D2_D6$rse)) optim_rse_D6"},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/articles/handling_LOQ.html","id":"version-information","dir":"Articles","previous_headings":"","what":"Version information","title":"Optimal design with LOQ data in PopED","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] PopED_0.6.0.9005 kableExtra_1.4.0 knitr_1.48       ggplot2_3.5.1    #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.9        utf8_1.2.4        generics_0.1.3    xml2_1.3.6        #>  [5] gtools_3.9.5      stringi_1.8.4     digest_0.6.37     magrittr_2.0.3    #>  [9] evaluate_1.0.0    grid_4.4.1        pkgload_1.4.0     mvtnorm_1.3-1     #> [13] fastmap_1.2.0     rprojroot_2.0.4   jsonlite_1.8.9    brio_1.1.5        #> [17] fansi_1.0.6       viridisLite_0.4.2 scales_1.3.0      codetools_0.2-20  #> [21] textshaping_0.4.0 jquerylib_0.1.4   cli_3.6.3         rlang_1.1.4       #> [25] munsell_0.5.1     withr_3.0.1       cachem_1.1.0      yaml_2.3.10       #> [29] tools_4.4.1       dplyr_1.1.4       colorspace_2.1-1  vctrs_0.6.5       #> [33] R6_2.5.1          lifecycle_1.0.4   stringr_1.5.1     fs_1.6.4          #> [37] htmlwidgets_1.6.4 ragg_1.3.3        pkgconfig_2.0.3   desc_1.4.3        #> [41] pkgdown_2.1.1     pillar_1.9.0      bslib_0.8.0       gtable_0.3.5      #> [45] glue_1.8.0        systemfonts_1.1.0 xfun_0.48         tibble_3.2.1      #> [49] tidyselect_1.2.1  highr_0.11        rstudioapi_0.16.0 farver_2.1.2      #> [53] htmltools_0.5.8.1 rmarkdown_2.28    svglite_2.1.3     labeling_0.4.3    #> [57] testthat_3.2.1.1  compiler_4.4.1"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"define-a-model","dir":"Articles","previous_headings":"","what":"Define a model","title":"Introduction to PopED","text":"define one-compartment pharmacokinetic model linear absorption using analytical solution. case solution applicable multiple single dosing. Note function also predefined PopED ff.PK.1.comp.oral.md.CL (see ?ff.PK.1.comp.oral.md.CL information). Next define parameters function, case -subject variability (BSV) parameter log-normally distributed (parameter Favail assumed BSV). DOSE TAU defined covariates (vector ) can optimize values later. Now define residual unexplained variability (RUV) function, case RUV additive proportional component.","code":"library(PopED) packageVersion(\"PopED\") #> [1] '0.6.0.9005' ff <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     N = floor(xt/TAU)+1     f=(DOSE*Favail/V)*(KA/(KA - CL/V)) *        (exp(-CL/V * (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 - exp(-CL/V * TAU)) -           exp(-KA * (xt - (N - 1) * TAU)) * (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU)))       return(list( f=f,poped.db=poped.db))   }) } sfg <- function(x,a,bpop,b,bocc){   parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                 CL=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU=a[2]) } feps <- function(model_switch,xt,parameters,epsi,poped.db){   returnArgs <- ff(model_switch,xt,parameters,poped.db)    f <- returnArgs[[1]]   poped.db <- returnArgs[[2]]     y = f*(1+epsi[,1])+epsi[,2]      return(list(y=y,poped.db=poped.db))  }"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"create-a-poped-database","dir":"Articles","previous_headings":"","what":"Create a PopED database","title":"Introduction to PopED","text":"create poped database link model defined set model parameters, initial design design space optimization. example, parameter values defined fixed effects (bpop), -subject variability variances (d) residual variability variances (sigma). also fix parameter Favail using notfixed_bpop, since oral dosing parameter identifiable. Fixing parameter means assume parameter estimated (know without uncertainty). addition, fix small additive RUV term, term reflecting higher error expected low concentration measurements (limit quantification measurements) typically calculated analytical assay methods (example, standard deviation parameter might 20% limit quantification). initial design, define two groups (m=2) 20 individuals (groupsize=20), doses 20 mg 40 mg every 24 hours (). initial design 5 sample times per individual (xt). design space, can searched optimization, define potential dose range 0 200 mg (mina maxa), range potential sample times 0 10 hours first three samples 240 248 hours last two samples (minxt maxxt). Finally, fix two groups subjects sample times (bUseGrouped_xt=TRUE).","code":"poped.db <- create.poped.database(   # Model   ff_fun=ff,   fg_fun=sfg,   fError_fun=feps,   bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9),    notfixed_bpop=c(1,1,1,0),   d=c(V=0.09,KA=0.09,CL=0.25^2),    sigma=c(prop=0.04,add=5e-6),   notfixed_sigma=c(1,0),      # Design   m=2,   groupsize=20,   a=list(c(DOSE=20,TAU=24),c(DOSE=40, TAU=24)),   maxa=c(DOSE=200,TAU=24),   mina=c(DOSE=0,TAU=24),   xt=c( 1,2,8,240,245),      # Design space   minxt=c(0,0,0,240,240),   maxxt=c(10,10,10,248,248),   bUseGrouped_xt=TRUE)"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"design-simulation","dir":"Articles","previous_headings":"","what":"Design simulation","title":"Introduction to PopED","text":"First may make sense check model design make sure get expect simulating data. plot model typical values:  Next, plot expected prediction interval (default 95% PI) data taking account BSV RUV using option PI=TRUE. option makes predictions based first-order approximations model variance normality assumption variance. Better (slower) computations possible DV=T, IPRED=T groupsize_sim = large number options.  can get predictions numerically well:","code":"plot_model_prediction(poped.db, model_num_points = 300) plot_model_prediction(poped.db,                        PI=TRUE,                        separate.groups=T,                        model_num_points = 300,                        sample.times = FALSE) dat <- model_prediction(poped.db,DV=TRUE) head(dat,n=5);tail(dat,n=5) #>   ID Time         DV      IPRED       PRED Group Model DOSE TAU #> 1  1    1 0.09659927 0.08034839 0.05325024     1     1   20  24 #> 2  1    2 0.13172074 0.13415072 0.09204804     1     1   20  24 #> 3  1    8 0.19502544 0.19134279 0.16409609     1     1   20  24 #> 4  1  240 0.04847782 0.05881203 0.12671376     1     1   20  24 #> 5  1  245 0.29770447 0.23457544 0.24980320     1     1   20  24 #>     ID Time         DV     IPRED      PRED Group Model DOSE TAU #> 196 40    1 0.04411438 0.0583122 0.1065005     2     1   40  24 #> 197 40    2 0.10599655 0.1039377 0.1840961     2     1   40  24 #> 198 40    8 0.20262746 0.2206604 0.3281922     2     1   40  24 #> 199 40  240 0.17506051 0.3788561 0.2534275     2     1   40  24 #> 200 40  245 0.56558539 0.5183551 0.4996064     2     1   40  24"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"design-evaluation","dir":"Articles","previous_headings":"","what":"Design evaluation","title":"Introduction to PopED","text":"Next, evaluate initial design see fixed-effect residual variability parameters relatively well estimated design, -subject variability parameters less well estimated.","code":"(ds1 <- evaluate_design(poped.db)) #> $ofv #> [1] 39.309 #>  #> $fim #>                    V          KA           CL        d_V       d_KA        d_CL #> V         0.05336692   -8.683963  -0.05863412   0.000000   0.000000    0.000000 #> KA       -8.68396266 2999.851007 -14.43058560   0.000000   0.000000    0.000000 #> CL       -0.05863412  -14.430586  37.15243290   0.000000   0.000000    0.000000 #> d_V       0.00000000    0.000000   0.00000000 999.953587 312.240246    3.202847 #> d_KA      0.00000000    0.000000   0.00000000 312.240246 439.412556    2.287838 #> d_CL      0.00000000    0.000000   0.00000000   3.202847   2.287838 3412.005199 #> sig_prop  0.00000000    0.000000   0.00000000 575.347261 638.581909 1182.325475 #>            sig_prop #> V            0.0000 #> KA           0.0000 #> CL           0.0000 #> d_V        575.3473 #> d_KA       638.5819 #> d_CL      1182.3255 #> sig_prop 33864.3226 #>  #> $rse #>         V        KA        CL       d_V      d_KA      d_CL  sig_prop  #>  8.215338 10.090955  4.400304 39.844763 60.655110 27.562541 13.865357"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"evaluate-alternative-design","dir":"Articles","previous_headings":"Design evaluation","what":"Evaluate alternative design","title":"Introduction to PopED","text":"alternative design sparse sampling? example, individual 3 time points 1, 2 245 hours:","code":"poped.db.new <- create.poped.database(   # Model   ff_fun=ff,   fg_fun=sfg,   fError_fun=feps,   bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9),    notfixed_bpop=c(1,1,1,0),   d=c(V=0.09,KA=0.09,CL=0.25^2),    sigma=c(prop=0.04,add=5e-6),   notfixed_sigma=c(1,0),      # Design   m=2,   groupsize=20,   a=list(c(DOSE=20,TAU=24),c(DOSE=40, TAU=24)),   maxa=c(DOSE=200,TAU=24),   mina=c(DOSE=0,TAU=24),   xt=c( 1,2,245),                                          # Design space   minxt=c(0,0,240),   maxxt=c(10,10,248),   bUseGrouped_xt=TRUE) (ds2 <- evaluate_design(poped.db.new)) #> $ofv #> [1] 29.66484 #>  #> $fim #>                     V         KA           CL        d_V       d_KA        d_CL #> V          0.04243232  -10.51432   0.05782431   0.000000   0.000000    0.000000 #> KA       -10.51432135 2666.25466 -14.66678102   0.000000   0.000000    0.000000 #> CL         0.05782431  -14.66678  21.59743298   0.000000   0.000000    0.000000 #> d_V        0.00000000    0.00000   0.00000000 632.163776 457.737062    3.115099 #> d_KA       0.00000000    0.00000   0.00000000 457.737062 347.115999    2.363458 #> d_CL       0.00000000    0.00000   0.00000000   3.115099   2.363458 1153.026981 #> sig_prop   0.00000000    0.00000   0.00000000 348.477101 262.369792 1979.231386 #>            sig_prop #> V            0.0000 #> KA           0.0000 #> CL           0.0000 #> d_V        348.4771 #> d_KA       262.3698 #> d_CL      1979.2314 #> sig_prop 15617.8185 #>  #> $rse #>          V         KA         CL        d_V       d_KA       d_CL   sig_prop  #>  44.120338  51.256239   5.748842 207.941540 280.689945  53.350716  22.795275"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"comparison-of-designs","dir":"Articles","previous_headings":"Design evaluation","what":"Comparison of designs","title":"Introduction to PopED","text":"precision CL similar alternative design parameters less well estimated. Comparing objective function value (OFV), see alternative design (less samples per subject) smaller OFV (=worse). can compare two OFVs using efficiency, tells us proportion extra individuals needed alternative design information content original design (around 4 times individuals currently design).","code":"(design_eval <- round(data.frame(\"Design 1\"=ds1$rse,\"Design 2\"=ds2$rse))) efficiency(ds2$ofv,ds1$ofv,poped.db) #> [1] 3.965919 #> attr(,\"description\") #> [1] \"(exp(ofv_final) / exp(ofv_init))^(1/n_parameters)\""},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"design-optimization","dir":"Articles","previous_headings":"","what":"Design optimization","title":"Introduction to PopED","text":"Now can optimize sample times original design maximizing OFV1.  see four distinct sample times design. means model, exact parameter values, information study inform parameter estimation sample times.","code":"output <- poped_optim(poped.db, opt_xt=TRUE) summary(output) #> =============================================================================== #> FINAL RESULTS #> Optimized Sampling Schedule #> Group 1: 0.4573     10     10    240  240.9 #> Group 2: 0.4573     10     10    240  240.9 #>  #> OFV = 40.5277 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.1902 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>            V     72.8       8     6 #>           KA     0.25      10     8 #>           CL     3.75       4     4 #>          d_V     0.09      40    33 #>         d_KA     0.09      61    50 #>         d_CL   0.0625      28    26 #>     sig_prop     0.04      14    15 #>  #> Total running time: 16.663 seconds plot_model_prediction(output$poped.db)"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"examine-efficiency-of-sampling-windows","dir":"Articles","previous_headings":"Design optimization","what":"Examine efficiency of sampling windows","title":"Introduction to PopED","text":"course, means multiple samples time points. can explore practical design looking loss efficiency spread sample times uniform distribution around optimal points (±30\\pm 30 minutes).  see efficiency ((|FIMoptimized|/|FIMinitial|)1/npar(|FIM_{optimized}|/|FIM_{initial}|)^{1/npar}) drops 80% cases, mostly caused increase parameter uncertainty BSV parameter absorption (om_KA). Smaller windows different windowing different samples might needed. investigate see ?plot_efficiency_of_windows.","code":"plot_efficiency_of_windows(output$poped.db,xt_windows=0.5)"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"optimize-over-a-discrete-design-space","dir":"Articles","previous_headings":"Design optimization","what":"Optimize over a discrete design space","title":"Introduction to PopED","text":"previous example optimized continuous design space (sample times optimized value lower upper limit). also limit search “allowed” values, example, samples taken hour allowed.  see optimization ran somewhat quicker, gave less efficient design.","code":"poped.db.discrete <- create.poped.database(poped.db,discrete_xt = list(c(0:10,240:248)))                                            output_discrete <- poped_optim(poped.db.discrete, opt_xt=TRUE) summary(output_discrete) #> =============================================================================== #> FINAL RESULTS #> Optimized Sampling Schedule #> Group 1:      1     10     10    240    241 #> Group 2:      1     10     10    240    241 #>  #> OFV = 40.3782 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.165 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>            V     72.8       8     6 #>           KA     0.25      10     8 #>           CL     3.75       4     4 #>          d_V     0.09      40    32 #>         d_KA     0.09      61    53 #>         d_CL   0.0625      28    27 #>     sig_prop     0.04      14    15 #>  #> Total running time: 10.195 seconds plot_model_prediction(output_discrete$poped.db, model_num_points = 300)"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"optimize-other-design-variables","dir":"Articles","previous_headings":"Design optimization","what":"Optimize ‘Other’ design variables","title":"Introduction to PopED","text":"One also optimize dose, see different dose help parameter estimation . case results predictable … higher doses give observations somewhat lower absolute residual variability leading groups highest allowed dose levels (200 mg case).","code":"output_dose_opt <- poped_optim(output$poped.db, opt_xt=TRUE, opt_a=TRUE)"},{"path":"https://andrewhooker.github.io/PopED/articles/intro-poped.html","id":"cost-function-to-optimize-dose","dir":"Articles","previous_headings":"Design optimization","what":"Cost function to optimize dose","title":"Introduction to PopED","text":"Optimizing dose study just better model parameter estimates may somewhat implausible. Instead, let’s use cost function optimize dose based sort target concentration … perhaps typical population trough concentrations 0.2 0.35 two groups patients 240 hours. First define criteria use optimize doses, least squares minimization. Now minimize cost function see optimal doses 31.6 55.2 two groups. leads population trough concentrations 0.2 0.35 two groups patients 240 hours:","code":"crit_fcn <- function(poped.db,...){   pred_df <- model_prediction(poped.db)   sum((pred_df[pred_df[\"Time\"]==240,\"PRED\"] - c(0.2,0.35))^2) } crit_fcn(output$poped.db) #> [1] 0.01469712 output_cost <- poped_optim(poped.db, opt_a = TRUE, opt_xt = FALSE,                      ofv_fun=crit_fcn,                       maximize = FALSE) summary(output_cost) #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 31.5672 : 24 #> Group 2: 55.2426 : 24 #>  #> OFV = 6.09293e-15 #>  #> Efficiency:  #>   (ofv_final / ofv_init) = 4.1457e-13 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>            V     72.8       8     8 #>           KA     0.25      10    10 #>           CL     3.75       4     4 #>          d_V     0.09      40    40 #>         d_KA     0.09      61    60 #>         d_CL   0.0625      28    28 #>     sig_prop     0.04      14    14 #>  #> Total running time: 3.661 seconds library(ggplot2) plot_model_prediction(output_cost$poped.db, model_num_points = 300)+   coord_cartesian(xlim=c(230,250))"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Defining models for PopED using R based PKPD simulators","text":"simple example couple PopED external R based PKPD simulation tools. Typically, tools might R packages can simulate ordinary differential equation (ODE) based models. document see couple PopED models, defined ODEs, implemented using: deSolve (native R ODE models) deSolve (compiled C ODE models) deSolve (compiled C++ ODE models using Rcpp) PKPDsim mrgsolve rxode2","code":"library(PopED) library(PKPDsim) library(mrgsolve) #>  #> Attaching package: 'mrgsolve' #> The following object is masked from 'package:stats': #>  #>     filter library(deSolve) library(Rcpp) library(rxode2) #> rxode2 3.0.1 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()`"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The model","title":"Defining models for PopED using R based PKPD simulators","text":"use one-compartment linear absorption population pharmacokinetic (PK) model example (see ).  model can described following set ODEs: dA0dt=−ka⋅A0dA1dt=−(CL/V1)⋅A1+ka⋅A0f(t)=A1/V1   \\begin{split}   \\frac{dA_{0}}{dt} &=  - k_{} \\cdot A_{0}\\\\   \\frac{dA_{1}}{dt} &=-(CL/V_1)\\cdot A_1 + k_{} \\cdot A_{0} \\\\   f(t) &= A_1/V_1   \\end{split} compartment amounts assumed zero time zero (𝐀[t=0]=0\\boldsymbol{}[t=0]=0). Inputs system come tablet form added amount A0A_{0} according Input(t,D,tD)={D,ift=tD0,otherwise   \\text{Input}(t,D,t_D) =   \\begin{cases}    D, &\\text{} \\quad t = t_D \\\\    0, &\\text{otherwise}    \\end{cases} Parameter values defined : ka=θka⋅eηkaCL=θCL⋅eηCLV1=θV1⋅eηV1   \\begin{split}     k_a &= \\theta_{k_a} \\cdot e^{\\eta_{k_a}} \\\\     CL &= \\theta_{CL} \\cdot e^{\\eta_{CL}} \\\\     V_1 &= \\theta_{V_1} \\cdot e^{\\eta_{V_1}}  \\\\   \\end{split}  elements subject variability (BSV), ηj\\eta_{j}, vary across individuals come normal distributions means zero variances ωj2\\omega^2_{j}. residual unexplained variability (RUV) model proportional additive component y=f(t)⋅(1+εprop)+εadd   y = f(t) \\cdot (1+\\varepsilon_{prop}) + \\varepsilon_{add} elements 𝛆j\\boldsymbol{\\varepsilon}_{j} vary accross observations come normal distributions means zero variances σj2\\sigma^2_{j}.","code":""},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"model-implementation","dir":"Articles","previous_headings":"","what":"Model implementation","title":"Defining models for PopED using R based PKPD simulators","text":"implement model using number different methods. ODE solvers, possible, set tuning parameters values (atol, rtol, etc.).","code":""},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"analytic-solution","dir":"Articles","previous_headings":"Model implementation","what":"Analytic solution","title":"Defining models for PopED using R based PKPD simulators","text":"First implement analytic solution model function used PopED. assume single dose multiple dosing dose interval TAU time units. named vector parameters defines values KA, CL, V, DOSE TAU used compute value f time point vector xt.","code":"ff_analytic <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     y=xt     N = floor(xt/TAU)+1     f=(DOSE/V)*(KA/(KA - CL/V)) *        (exp(-CL/V * (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 - exp(-CL/V * TAU)) -           exp(-KA * (xt - (N - 1) * TAU)) * (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU)))       return(list( f=f,poped.db=poped.db))   }) }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"ode-solution-using-desolve","dir":"Articles","previous_headings":"Model implementation","what":"ODE solution using deSolve","title":"Defining models for PopED using R based PKPD simulators","text":"model can implemented using ODEs. ODEs defined deSolve: , just analytic solution, named vector parameters defines values KA, CL, V, DOSE TAU used compute value f time point vector xt. inputs system (dosing amounts times) need added events deSolve ODE solver called deSolve::ode().","code":"PK_1_comp_oral_ode <- function(Time, State, Pars){   with(as.list(c(State, Pars)), {         dA1 <- -KA*A1     dA2 <- KA*A1 - (CL/V)*A2     return(list(c(dA1, dA2)))   }) } ff_ode_desolve <- function(model_switch, xt, parameters, poped.db){   with(as.list(parameters),{     A_ini <- c(A1=0, A2=0)          #Set up time points for the ODE     times_xt <- drop(xt)     times <- c(0,times_xt) ## add extra time for start of the experiment     dose_times = seq(from=0,to=max(times_xt),by=TAU)     times <- c(times,dose_times)     times <- sort(times)      times <- unique(times) # remove duplicates          eventdat <- data.frame(var = c(\"A1\"),                             time = dose_times,                            value = c(DOSE), method = c(\"add\"))          out <- deSolve::ode(A_ini, times, PK_1_comp_oral_ode, parameters,                          events = list(data = eventdat),                         atol=1e-8, rtol=1e-8,maxsteps=5000)          # grab timepoint values     out = out[match(times_xt,out[,\"time\"]),]          f = out[,\"A2\"]/V          f=cbind(f) # must be a column matrix      return(list(f=f,poped.db=poped.db))   }) }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"ode-solution-using-desolve-and-compiled-c-code","dir":"Articles","previous_headings":"Model implementation","what":"ODE solution using deSolve and compiled C code","title":"Defining models for PopED using R based PKPD simulators","text":"can use compiled C code deSolve speed computing solutions ODEs. C code written separate file needs compiled looks like : code available file PopED distribution, compiled following commands: function used compute value f time point vector xt, given inputs system (dosing amounts times), needs changed slightly, updating arguments deSolve::ode().","code":"/* file one_comp_oral_CL.c */ #include <R.h> static double parms[3]; #define CL parms[0] #define V parms[1] #define KA parms[2]  /* initializer  */ void initmod(void (* odeparms)(int *, double *)) {   int N=3;   odeparms(&N, parms); }  /* Derivatives and 1 output variable */ void derivs (int *neq, double *t, double *y, double *ydot,          double *yout, int *ip) {        if (ip[0] <1) error(\"nout should be at least 1\");        ydot[0] = -KA*y[0];   ydot[1] = KA*y[0] - CL/V*y[1];   yout[0] = y[0]+y[1]; }  /* END file one_comp_oral_CL.c */ file.copy(system.file(\"examples/one_comp_oral_CL.c\", package=\"PopED\"),\"./one_comp_oral_CL.c\") #> [1] TRUE system('R CMD SHLIB one_comp_oral_CL.c') dyn.load(paste(\"one_comp_oral_CL\", .Platform$dynlib.ext, sep = \"\")) ff_ode_desolve_c <- function(model_switch, xt, parameters, poped.db){   with(as.list(parameters),{     A_ini <- c(A1=0, A2=0)          #Set up time points for the ODE     times_xt <- drop(xt)     times <- c(0,times_xt) ## add extra time for the start of the experiment     dose_times = seq(from=0,to=max(times_xt),by=TAU)     times <- c(times,dose_times)     times <- sort(times)      times <- unique(times) # remove duplicates          eventdat <- data.frame(var = c(\"A1\"),                             time = dose_times,                            value = c(DOSE), method = c(\"add\"))          out <- deSolve::ode(A_ini, times, func = \"derivs\",                          parms = c(CL,V,KA),                          dllname = \"one_comp_oral_CL\",                         initfunc = \"initmod\", nout = 1,                          outnames = \"Sum\",                         events = list(data = eventdat),                         atol=1e-8, rtol=1e-8,maxsteps=5000)          # grab timepoint values     out = out[match(times_xt,out[,\"time\"]),]          f = out[, \"A2\"]/V          f=cbind(f) # must be a column matrix      return(list(f=f,poped.db=poped.db))   }) }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"ode-solution-using-desolve-and-compiled-c-code-via-rcpp","dir":"Articles","previous_headings":"Model implementation","what":"ODE solution using deSolve and compiled C++ code (via Rcpp)","title":"Defining models for PopED using R based PKPD simulators","text":"define ODE system using inline C++ code compiled via Rcpp , arguments deSolve::ode() need updated:","code":"cppFunction('List one_comp_oral_rcpp(double Time, NumericVector A, NumericVector Pars) { int n = A.size(); NumericVector dA(n);  double CL = Pars[0]; double V = Pars[1]; double KA = Pars[2];  dA[0] = -KA*A[0]; dA[1] = KA*A[0] - (CL/V)*A[1]; return List::create(dA); }') ff_ode_desolve_rcpp <- function(model_switch, xt, p, poped.db){     A_ini <- c(A1=0, A2=0)          #Set up time points for the ODE     times_xt <- drop(xt)     times <- c(0,times_xt) ## add extra time for start of integration     dose_times = seq(from=0,to=max(times_xt),by=p[[\"TAU\"]])     times <- c(times,dose_times)     times <- sort(times)      times <- unique(times) # remove duplicates          eventdat <- data.frame(var = c(\"A1\"),                             time = dose_times,                            value = c(p[[\"DOSE\"]]), method = c(\"add\"))          out <- deSolve::ode(A_ini, times,                          one_comp_oral_rcpp,                          c(CL=p[[\"CL\"]],V=p[[\"V\"]], KA=p[[\"KA\"]]),                          events = list(data = eventdat),                         atol=1e-8, rtol=1e-8,maxsteps=5000)               # grab timepoint values for central comp     f = out[match(times_xt,out[,\"time\"]),\"A2\",drop=F]/p[[\"V\"]]          return(list(f=f,poped.db=poped.db)) }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"ode-solution-using-pkpdsim","dir":"Articles","previous_headings":"Model implementation","what":"ODE solution using PKPDsim","title":"Defining models for PopED using R based PKPD simulators","text":"can use PKPDsim describe set ODEs. adjust function used compute value f time point vector xt, given inputs system (dosing amounts times), using ODE solver PKPDsim::sim_core().","code":"pk1cmtoral <- PKPDsim::new_ode_model(\"pk_1cmt_oral\") # take from library ff_ode_pkpdsim <- function(model_switch, xt, p, poped.db){     #Set up time points for the ODE     times_xt <- drop(xt)       dose_times <- seq(from=0,to=max(times_xt),by=p[[\"TAU\"]])     times <- sort(unique(c(0,times_xt,dose_times)))      N = length(dose_times)     regimen = PKPDsim::new_regimen(amt=p[[\"DOSE\"]],n=N,interval=p[[\"TAU\"]])     design <- PKPDsim::sim(       ode = pk1cmtoral,        parameters = c(CL=p[[\"CL\"]],V=p[[\"V\"]],KA=p[[\"KA\"]]),        regimen = regimen,       only_obs = TRUE,       t_obs = times,       checks = FALSE,       return_design = TRUE)     tmp <- PKPDsim::sim_core(sim_object = design, ode = pk1cmtoral)     f <- tmp$y     m_tmp <- match(round(times_xt,digits = 6),tmp[,\"t\"])     if(any(is.na(m_tmp))){       stop(\"can't find time points in solution\\n\",             \"try changing the digits argument in the match function\")     }           f <- f[m_tmp]     return(list(f = f, poped.db = poped.db)) }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"ode-solution-using-mrgsolve","dir":"Articles","previous_headings":"Model implementation","what":"ODE solution using mrgsolve","title":"Defining models for PopED using R based PKPD simulators","text":"can also use mrgsolve describe set ODEs. compile load model mcode Finally, adjust function used compute value f time point vector xt, given inputs system (dosing amounts times), using ODE solver mrgsolve::mrgsim_q().","code":"code <- ' $PARAM CL=3.75, V=72.8, KA=0.25 $CMT DEPOT CENT $ODE dxdt_DEPOT = -KA*DEPOT; dxdt_CENT = KA*DEPOT - (CL/V)*CENT; $TABLE double CP  = CENT/V; $CAPTURE CP ' moda <- mrgsolve::mcode(\"optim\", code, atol=1e-8, rtol=1e-8,maxsteps=5000) #> Building optim ... done. ff_ode_mrg <- function(model_switch, xt, p, poped.db){   times_xt <- drop(xt)     dose_times <- seq(from=0,to=max(times_xt),by=p[[\"TAU\"]])   time <- sort(unique(c(0,times_xt,dose_times)))   is.dose <- time %in% dose_times      data <-      tibble::tibble(ID = 1,                       time = time,                       amt = ifelse(is.dose,p[[\"DOSE\"]], 0),                        cmt = ifelse(is.dose, 1, 0),                        evid = cmt,                       CL = p[[\"CL\"]], V = p[[\"V\"]], KA = p[[\"KA\"]])      out <- mrgsolve::mrgsim_q(moda, data=data)      f <-  out$CP      f <- f[match(times_xt,out$time)]      return(list(f=matrix(f,ncol=1),poped.db=poped.db))    }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"ode-solution-using-rxode2","dir":"Articles","previous_headings":"Model implementation","what":"ODE solution using rxode2","title":"Defining models for PopED using R based PKPD simulators","text":"can use rxode2 describe set ODEs. adjust function used compute value f time point vector xt, given inputs system (dosing amounts times), using ODE solver rxode2::rxSolve().","code":"modrx <- rxode2::rxode2({   d/dt(DEPOT) = -KA*DEPOT;   d/dt(CENT) = KA*DEPOT - (CL/V)*CENT;   CP=CENT/V; }) #> using C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’ ff_ode_rx <- function(model_switch, xt, p, poped.db){   times_xt <- drop(xt)   et(0,amt=p[[\"DOSE\"]], ii=p[[\"TAU\"]], until=max(times_xt)) %>%     et(times_xt) -> data      out <- rxode2::rxSolve(modrx, p, data, atol=1e-8, rtol=1e-8,maxsteps=5000,                  returnType=\"data.frame\")      f <-  out$CP[match(times_xt,out$time)]      return(list(f=matrix(f,ncol=1),poped.db=poped.db))    }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"common-model-elements","dir":"Articles","previous_headings":"Model implementation","what":"Common model elements","title":"Defining models for PopED using R based PKPD simulators","text":"functions used define BSV RUV.","code":"sfg <- function(x,a,bpop,b,bocc){   parameters=c(      KA=bpop[1]*exp(b[1]),     CL=bpop[2]*exp(b[2]),     V=bpop[3]*exp(b[3]),     DOSE=a[1],     TAU=a[2])   return( parameters )  }  feps <- function(model_switch,xt,parameters,epsi,poped.db){   f <- do.call(poped.db$model$ff_pointer,list(model_switch,xt,parameters,poped.db))[[1]]   y = f*(1+epsi[,1])+epsi[,2]   return(list(y=y,poped.db=poped.db))  }"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"create-poped-databases","dir":"Articles","previous_headings":"","what":"Create PopED databases","title":"Defining models for PopED using R based PKPD simulators","text":"Next define model use, parameters models, intial design design design space design calculation. create number databases correspond different model implementations. initial design 2 group design, doses 20 mg 40 mg every 24 hours. group sampling schedule, 3 samples first day study 2 10th day study.","code":"poped_db_analytic <- create.poped.database(   ff_fun =ff_analytic,   fg_fun =sfg,   fError_fun=feps,   bpop=c(KA=0.25,CL=3.75,V=72.8),    d=c(KA=0.09,CL=0.25^2,V=0.09),    sigma=c(prop=0.04,add=0.0025),   m=2,   groupsize=20,   xt=c( 1,2,8,240,245),   minxt=c(0,0,0,240,240),   maxxt=c(10,10,10,248,248),   bUseGrouped_xt=1,   a=cbind(DOSE=c(20,40),TAU=c(24,24)),   maxa=c(DOSE=200,TAU=24),   mina=c(DOSE=0,TAU=24))   poped_db_ode_desolve <- create.poped.database(poped_db_analytic,ff_fun = ff_ode_desolve) poped_db_ode_desolve_c <- create.poped.database(poped_db_analytic,ff_fun = ff_ode_desolve_c) poped_db_ode_desolve_rcpp <- create.poped.database(poped_db_analytic,ff_fun = ff_ode_desolve_rcpp) poped_db_ode_pkpdsim <- create.poped.database(poped_db_analytic,ff_fun = ff_ode_pkpdsim) poped_db_ode_mrg <- create.poped.database(poped_db_analytic,ff_fun = ff_ode_mrg) poped_db_ode_rx <- create.poped.database(poped_db_analytic,ff_fun = ff_ode_rx)"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"model-predictions","dir":"Articles","previous_headings":"","what":"Model predictions","title":"Defining models for PopED using R based PKPD simulators","text":"difference model predictions different implementations? visual representation model predictions study design, based analytic solution:  can compare different predictions plot accross model implementations. see accuracy different methods within machine precision (small).","code":"plot_model_prediction(poped_db_analytic,model_num_points = 500,PI=T,separate.groups = T) pred_std <- model_prediction(poped_db_analytic,model_num_points = 500,include_sample_times = TRUE,PI = TRUE)  pred_ode_desolve <- model_prediction(poped_db_ode_desolve,                                      model_num_points = 500,                                      include_sample_times = TRUE,                                      PI = TRUE) all.equal(pred_std,pred_ode_desolve) #> [1] TRUE  pred_ode_desolve_c <- model_prediction(poped_db_ode_desolve_c,                                        model_num_points = 500,                                        include_sample_times = TRUE,                                        PI = TRUE) all.equal(pred_std,pred_ode_desolve_c) #> [1] TRUE  pred_ode_desolve_rcpp <- model_prediction(poped_db_ode_desolve_rcpp,                                           model_num_points = 500,                                           include_sample_times = TRUE,                                           PI = TRUE) all.equal(pred_std,pred_ode_desolve_rcpp) #> [1] TRUE  pred_ode_pkpdsim <- model_prediction(poped_db_ode_pkpdsim,                                      model_num_points = 500,                                      include_sample_times = TRUE,                                      PI = TRUE) all.equal(pred_std,pred_ode_pkpdsim) #> [1] \"Component \\\"PI_l\\\": Mean relative difference: 1.998734e-08\"  pred_ode_mrg <- model_prediction(poped_db_ode_mrg,                                  model_num_points = 500,                                  include_sample_times = TRUE,                                  PI = TRUE) all.equal(pred_std,pred_ode_mrg) #> [1] TRUE  pred_ode_rx <- model_prediction(poped_db_ode_rx,                                  model_num_points = 500,                                  include_sample_times = TRUE,                                  PI = TRUE) all.equal(pred_std,pred_ode_rx) #> [1] TRUE"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"evaluate-the-design","dir":"Articles","previous_headings":"","what":"Evaluate the design","title":"Defining models for PopED using R based PKPD simulators","text":"compare computation Fisher Information Matrix (FIM). comparing ln(det(FIM))ln(det(FIM)) (lnD-objective function value, ofv). computations give similar results:","code":"(eval_std <- evaluate_design(poped_db_analytic)) #> $ofv #> [1] 48.98804 #>  #> $fim #>                   KA           CL           V       d_KA        d_CL        d_V #> KA       1695.742314 -11.73537527 -6.75450789    0.00000     0.00000    0.00000 #> CL        -11.735375  29.99735715 -0.03288331    0.00000     0.00000    0.00000 #> V          -6.754508  -0.03288331  0.04213359    0.00000     0.00000    0.00000 #> d_KA        0.000000   0.00000000  0.00000000  147.24270     1.52226  192.23403 #> d_CL        0.000000   0.00000000  0.00000000    1.52226  2254.55188    1.21987 #> d_V         0.000000   0.00000000  0.00000000  192.23403     1.21987  634.42055 #> sig_prop    0.000000   0.00000000  0.00000000  148.86724   844.57325  387.53816 #> sig_add     0.000000   0.00000000  0.00000000 6555.68433 14391.88132 8669.58391 #>             sig_prop     sig_add #> KA            0.0000       0.000 #> CL            0.0000       0.000 #> V             0.0000       0.000 #> d_KA        148.8672    6555.684 #> d_CL        844.5733   14391.881 #> d_V         387.5382    8669.584 #> sig_prop   7759.5374  110702.705 #> sig_add  110702.7045 4436323.946 #>  #> $rse #>         KA         CL          V       d_KA       d_CL        d_V   sig_prop  #>  16.285678   4.909749  11.209270 120.825798  34.448477  57.300408  36.104027  #>    sig_add  #>  24.339781 eval_ode_desolve <- evaluate_design(poped_db_ode_desolve)  all.equal(eval_std$ofv,eval_ode_desolve$ofv) #> [1] \"Mean relative difference: 2.493043e-08\"  eval_ode_desolve_c <- evaluate_design(poped_db_ode_desolve_c)  all.equal(eval_std$ofv,eval_ode_desolve_c$ofv) #> [1] \"Mean relative difference: 2.493043e-08\"  eval_ode_desolve_rccp <- evaluate_design(poped_db_ode_desolve_rcpp)  all.equal(eval_std$ofv,eval_ode_desolve_rccp$ofv) #> [1] \"Mean relative difference: 2.493043e-08\"  eval_ode_pkpdsim <- evaluate_design(poped_db_ode_pkpdsim)  all.equal(eval_std$ofv,eval_ode_pkpdsim$ofv) #> [1] TRUE  eval_ode_mrg <- evaluate_design(poped_db_ode_mrg)  all.equal(eval_std$ofv,eval_ode_mrg$ofv) #> [1] \"Mean relative difference: 2.361612e-08\""},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"speed-of-fim-computation","dir":"Articles","previous_headings":"","what":"Speed of FIM computation","title":"Defining models for PopED using R based PKPD simulators","text":"can compare speed computations. Analytic solutions fast, expected, case 20 times faster ODE methods. mrgsolve fastest ODE solvers example. Note much speed difference mrgsolve, RxODE PKPDsim found due overhead pre- post-processing simulation ODE systems. ways handling pre- post-processing may speed computations.","code":"library(microbenchmark) library(ggplot2)  compare <- microbenchmark(   evaluate_design(poped_db_analytic),   evaluate_design(poped_db_ode_desolve),   evaluate_design(poped_db_ode_desolve_c),   evaluate_design(poped_db_ode_desolve_rcpp),   evaluate_design(poped_db_ode_pkpdsim),   evaluate_design(poped_db_ode_mrg),   evaluate_design(poped_db_ode_rx),   times = 100L)  autoplot(compare)"},{"path":"https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html","id":"version-information","dir":"Articles","previous_headings":"","what":"Version information","title":"Defining models for PopED using R based PKPD simulators","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.1 (2024-06-14) #>  os       Ubuntu 22.04.5 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2024-10-07 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package       * version    date (UTC) lib source #>  backports       1.5.0      2024-05-23 [1] RSPM #>  BH              1.84.0-0   2024-01-10 [1] RSPM #>  bslib           0.8.0      2024-07-29 [1] RSPM #>  cachem          1.1.0      2024-05-16 [1] RSPM #>  checkmate       2.3.2      2024-07-29 [1] RSPM #>  cli             3.6.3      2024-06-21 [1] RSPM #>  codetools       0.2-20     2024-03-31 [3] CRAN (R 4.4.1) #>  colorspace      2.1-1      2024-07-26 [1] RSPM #>  crayon          1.5.3      2024-06-20 [1] RSPM #>  data.table      1.16.0     2024-08-27 [1] RSPM #>  desc            1.4.3      2023-12-10 [1] RSPM #>  deSolve       * 1.40       2023-11-27 [1] RSPM #>  devtools        2.4.5      2022-10-11 [1] RSPM #>  digest          0.6.37     2024-08-19 [1] RSPM #>  dparser         1.3.1-12   2024-09-17 [1] RSPM #>  dplyr           1.1.4      2023-11-17 [1] RSPM #>  ellipsis        0.3.2      2021-04-29 [1] RSPM #>  evaluate        1.0.0      2024-09-17 [1] RSPM #>  fansi           1.0.6      2023-12-08 [1] RSPM #>  farver          2.1.2      2024-05-13 [1] RSPM #>  fastmap         1.2.0      2024-05-15 [1] RSPM #>  fs              1.6.4      2024-04-25 [1] RSPM #>  generics        0.1.3      2022-07-05 [1] RSPM #>  ggplot2         3.5.1      2024-04-23 [1] RSPM #>  glue            1.8.0      2024-09-30 [1] RSPM #>  gtable          0.3.5      2024-04-22 [1] RSPM #>  highr           0.11       2024-05-26 [1] RSPM #>  htmltools       0.5.8.1    2024-04-04 [1] RSPM #>  htmlwidgets     1.6.4      2023-12-06 [1] RSPM #>  httpuv          1.6.15     2024-03-26 [1] RSPM #>  jquerylib       0.1.4      2021-04-26 [1] RSPM #>  jsonlite        1.8.9      2024-09-20 [1] RSPM #>  kableExtra    * 1.4.0      2024-01-24 [1] RSPM #>  knitr         * 1.48       2024-07-07 [1] RSPM #>  labeling        0.4.3      2023-08-29 [1] RSPM #>  later           1.3.2      2023-12-06 [1] RSPM #>  lattice         0.22-6     2024-03-20 [3] CRAN (R 4.4.1) #>  lifecycle       1.0.4      2023-11-07 [1] RSPM #>  lotri           1.0.0      2024-09-18 [1] RSPM #>  magrittr        2.0.3      2022-03-30 [1] RSPM #>  memoise         2.0.1      2021-11-26 [1] RSPM #>  mime            0.12       2021-09-28 [1] RSPM #>  miniUI          0.1.1.1    2018-05-18 [1] RSPM #>  mrgsolve      * 1.5.1      2024-07-26 [1] RSPM #>  munsell         0.5.1      2024-04-01 [1] RSPM #>  nlme            3.1-164    2023-11-27 [3] CRAN (R 4.4.1) #>  pillar          1.9.0      2023-03-22 [1] RSPM #>  pkgbuild        1.4.4      2024-03-17 [1] RSPM #>  pkgconfig       2.0.3      2019-09-22 [1] RSPM #>  pkgdown         2.1.1      2024-09-17 [1] RSPM #>  pkgload         1.4.0      2024-06-28 [1] RSPM #>  PKPDsim       * 1.4.0      2024-08-19 [1] RSPM #>  PopED         * 0.6.0.9005 2024-10-07 [1] local #>  PreciseSums     0.7        2024-09-17 [1] RSPM #>  profvis         0.4.0      2024-09-20 [1] RSPM #>  promises        1.3.0      2024-04-05 [1] RSPM #>  purrr           1.0.2      2023-08-10 [1] RSPM #>  qs              0.27.2     2024-10-01 [1] RSPM #>  R6              2.5.1      2021-08-19 [1] RSPM #>  ragg            1.3.3      2024-09-11 [1] RSPM #>  RApiSerialize   0.1.4      2024-09-28 [1] RSPM #>  Rcpp          * 1.0.13     2024-07-17 [1] RSPM #>  RcppParallel    5.1.9      2024-08-19 [1] RSPM #>  remotes         2.5.0      2024-03-17 [1] RSPM #>  rlang           1.1.4      2024-06-04 [1] RSPM #>  rmarkdown       2.28       2024-08-17 [1] RSPM #>  rstudioapi      0.16.0     2024-03-24 [1] RSPM #>  rxode2        * 3.0.1      2024-09-22 [1] RSPM #>  rxode2ll        2.0.11     2023-03-17 [1] RSPM #>  sass            0.4.9      2024-03-15 [1] RSPM #>  scales          1.3.0      2023-11-28 [1] RSPM #>  sessioninfo     1.2.2      2021-12-06 [1] RSPM #>  shiny           1.9.1      2024-08-01 [1] RSPM #>  stringfish      0.16.0     2023-11-28 [1] RSPM #>  stringi         1.8.4      2024-05-06 [1] RSPM #>  stringr         1.5.1      2023-11-14 [1] RSPM #>  svglite         2.1.3      2023-12-08 [1] RSPM #>  sys             3.4.3      2024-10-04 [1] RSPM #>  systemfonts     1.1.0      2024-05-15 [1] RSPM #>  textshaping     0.4.0      2024-05-24 [1] RSPM #>  tibble          3.2.1      2023-03-20 [1] RSPM #>  tidyselect      1.2.1      2024-03-11 [1] RSPM #>  urlchecker      1.0.1      2021-11-30 [1] RSPM #>  usethis         3.0.0      2024-07-29 [1] RSPM #>  utf8            1.2.4      2023-10-22 [1] RSPM #>  vctrs           0.6.5      2023-12-01 [1] RSPM #>  viridisLite     0.4.2      2023-05-02 [1] RSPM #>  withr           3.0.1      2024-07-31 [1] RSPM #>  xfun            0.48       2024-10-03 [1] RSPM #>  xml2            1.3.6      2023-12-04 [1] RSPM #>  xtable          1.8-4      2019-04-21 [1] RSPM #>  yaml            2.3.10     2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.4.1/lib/R/site-library #>  [3] /opt/R/4.4.1/lib/R/library #>  #> ────────────────────────────────────────────────────────────────────────────── #sessionInfo()"},{"path":"https://andrewhooker.github.io/PopED/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew C. Hooker. Author, maintainer, translator, copyright holder. Marco Foracchia. Author.           O-Matrix version Eric Stroemberg. Contributor.           MATLAB version Martin Fink. Contributor.           Streamlining code, added functionality, vignettes Giulia Lestini. Contributor.           Streamlining code, added functionality, vignettes Sebastian Ueckert. Author.            MATLAB version Joakim Nyberg. Author.           MATLAB version","code":""},{"path":"https://andrewhooker.github.io/PopED/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nyberg J, Ueckert S, Stroemberg EA, Hennig S, Karlsson MO, Hooker AC (2012). “PopED: extended, parallelized, nonlinear mixed effects models optimal design tool.” Computer Methods Programs Biomedicine, 108. Foracchia M, Hooker AC, Vicini P, Ruggeri (2004). “POPED, software optimal experiment design population kinetics.” Computer Methods Programs Biomedicine, 74.","code":"@Article{,   title = {PopED: An extended, parallelized, nonlinear mixed effects models optimal design tool},   author = {Joakim Nyberg and Sebastian Ueckert and Eric A Stroemberg and Stefanie Hennig and Mats O Karlsson and Andrew C Hooker},   journal = {Computer Methods and Programs in Biomedicine},   year = {2012},   volume = {108}, } @Article{,   title = {POPED, a software for optimal experiment design in population kinetics},   author = {Marco Foracchia and Andrew C Hooker and Paolo Vicini and A Ruggeri},   journal = {Computer Methods and Programs in Biomedicine},   year = {2004},   volume = {74}, }"},{"path":"https://andrewhooker.github.io/PopED/index.html","id":"poped-","dir":"","previous_headings":"","what":"Population (and Individual) Optimal Experimental Design","title":"Population (and Individual) Optimal Experimental Design","text":"PopED computes optimal experimental designs population individual studies based nonlinear mixed-effect models. Often based computation Fisher Information Matrix (FIM).","code":""},{"path":"https://andrewhooker.github.io/PopED/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Population (and Individual) Optimal Experimental Design","text":"need R installed. Download latest version R www.r-project.org. can install released version PopED CRAN : development version GitHub :","code":"install.packages(\"PopED\") # install.packages(\"devtools\") devtools::install_github(\"andrewhooker/PopED\")"},{"path":"https://andrewhooker.github.io/PopED/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Population (and Individual) Optimal Experimental Design","text":"get started need define model. initial design (design space want optimize). tasks perform. Learn introduction PopED","code":""},{"path":"https://andrewhooker.github.io/PopED/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Population (and Individual) Optimal Experimental Design","text":"welcome : Ask questions : https://github.com/andrewhooker/PopED/discussions submit suggestions bug-reports : https://github.com/andrewhooker/PopED/issues send pull request : https://github.com/andrewhooker/PopED compose friendly e-mail : andrew.hooker@farmaci.uu.se","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/Doptim.html","id":null,"dir":"Reference","previous_headings":"","what":"D-family optimization function — Doptim","title":"D-family optimization function — Doptim","text":"Optimize objective function. 4 different optimization algorithms used function Adaptive random search. See RS_opt. Stochastic gradient. Broyden Fletcher Goldfarb Shanno (BFGS) method nonlinear minimization box constraints. line search. See a_line_search. optimization algorithms run series, taking input output previous method. stopping rule used test line search algorithm fids better optimum initial value. , chain algorithms run .  line search used argument iter_tot defines number times chain algorithms run. function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/Doptim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"D-family optimization function — Doptim","text":"","code":"Doptim(   poped.db,   ni,   xt,   model_switch,   x,   a,   bpopdescr,   ddescr,   maxxt,   minxt,   maxa,   mina,   fmf = 0,   dmf = 0,   trflag = TRUE,   bUseRandomSearch = poped.db$settings$bUseRandomSearch,   bUseStochasticGradient = poped.db$settings$bUseStochasticGradient,   bUseBFGSMinimizer = poped.db$settings$bUseBFGSMinimizer,   bUseLineSearch = poped.db$settings$bUseLineSearch,   sgit = poped.db$settings$sgit,   ls_step_size = poped.db$settings$ls_step_size,   BFGSConvergenceCriteriaMinStep = poped.db$settings$BFGSConvergenceCriteriaMinStep,   BFGSProjectedGradientTol = poped.db$settings$BFGSProjectedGradientTol,   BFGSTolerancef = poped.db$settings$BFGSTolerancef,   BFGSToleranceg = poped.db$settings$BFGSToleranceg,   BFGSTolerancex = poped.db$settings$BFGSTolerancex,   iter_tot = poped.db$settings$iNumSearchIterationsIfNotLineSearch,   iter_max = 10,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/Doptim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"D-family optimization function — Doptim","text":"poped.db PopED database. ni vector number samples group. xt matrix sample times.  row vector sample times group. model_switch matrix size xt, specifying model sample belongs . x matrix discrete design variables.  row group. matrix covariates.  row group. bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value fmf initial value FIM. set zero computed. dmf initial OFV. set zero computed. trflag optimization output screen file? bUseRandomSearch ******START Optimization algorithm  SPECIFICATION OPTIONS********** Use random search (1=TRUE, 0=FALSE) bUseStochasticGradient Use Stochastic Gradient search (1=TRUE, 0=FALSE) bUseBFGSMinimizer Use BFGS Minimizer (1=TRUE, 0=FALSE) bUseLineSearch Use Line search (1=TRUE, 0=FALSE) sgit Number stochastic gradient iterations ls_step_size Number grid points line search. BFGSConvergenceCriteriaMinStep BFGS Minimizer Convergence Criteria Minimum Step BFGSProjectedGradientTol BFGS Minimizer Convergence Criteria Normalized Projected Gradient Tolerance BFGSTolerancef BFGS Minimizer Line Search Tolerance f BFGSToleranceg BFGS Minimizer Line Search Tolerance g BFGSTolerancex BFGS Minimizer Line Search Tolerance x iter_tot Number iterations use line search used. Must less iter_max used. iter_max line search used algorithm tests line search (always run end optimization iteration) changes design way.  , algorithm stops.  yes, new iteration run unless iter_max iterations already run. ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/Doptim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"D-family optimization function — Doptim","text":"M. Foracchia, .C. Hooker, P. Vicini .   Ruggeri, \"PopED, software optimal experimental design population   kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J.   Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C.   Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models   optimal design tool\", Computer Methods Programs Biomedicine, 108,   2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/Doptim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"D-family optimization function — Doptim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   if (FALSE) { # \\dontrun{      ##############   # typically one will use poped_optimize    # This then calls Doptim for continuous optimization problems   ##############         # RS+SG+LS optimization of sample times   # optimization with just a few iterations   # only to check that things are working   output <- poped_optimize(poped.db,opt_xt=T,                            rsit=5,sgit=5,ls_step_size=5)      # RS+SG+LS optimization of sample times    # (longer run time than above but more likely to reach a maximum)   output <- poped_optimize(poped.db,opt_xt=T)   get_rse(output$fmf,output$poped.db)   plot_model_prediction(output$poped.db)         # Random search (just a few samples here)   rs.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,rsit=20,                               bUseRandomSearch= 1,                               bUseStochasticGradient = 0,                               bUseBFGSMinimizer = 0,                               bUseLineSearch = 0)      # line search, DOSE and sample time optimization   ls.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                               bUseRandomSearch= 0,                               bUseStochasticGradient = 0,                               bUseBFGSMinimizer = 0,                               bUseLineSearch = 1,                               ls_step_size=10)      # Stochastic gradient search, DOSE and sample time optimization   sg.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                                bUseRandomSearch= 0,                               bUseStochasticGradient = 1,                               bUseBFGSMinimizer = 0,                               bUseLineSearch = 0,                               sgit=20)      # BFGS search, DOSE and sample time optimization   bfgs.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                                 bUseRandomSearch= 0,                                 bUseStochasticGradient = 0,                                 bUseBFGSMinimizer = 1,                                 bUseLineSearch = 0)    ##############   # If you really want to you can use Doptim dirtectly   ##############   dsl <- downsizing_general_design(poped.db)   poped.db$settings$optsw[2] <- 1  # sample time optimization   output <- Doptim(poped.db,dsl$ni, dsl$xt, dsl$model_switch, dsl$x, dsl$a,           dsl$bpop, dsl$d, dsl$maxxt, dsl$minxt,dsl$maxa,dsl$mina)     } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/Dtrace.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace optimization routines — Dtrace","title":"Trace optimization routines — Dtrace","text":"helper function writing output screen files optimizing.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/Dtrace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace optimization routines — Dtrace","text":"","code":"Dtrace(   fn,   it,   ni,   xtopt,   xopt,   aopt,   gxt,   ga,   dmf,   diff,   ixt,   ia,   itvector,   dmfvector,   poped.db,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   rsit = poped.db$settings$rsit,   convergence_eps = poped.db$settings$convergence_eps )"},{"path":"https://andrewhooker.github.io/PopED/reference/Dtrace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace optimization routines — Dtrace","text":"fn file output information . Can also screen ''. iteration number. ni vector number samples group. xtopt matrix defining current best sampling schedule. xopt cell structure defining current best discrete design variables. aopt matrix defining current best continuous design variables. gxt matrix defining current gradient xt vector. ga matrix defining current gradient continuous design variables. dmf current OFV. diff difference previous iteration. ixt xt Gradient Inversion occurred . ia Gradient Inversion occurred . itvector iteration vector.  currently used. dmfvector dmf vector. currently used. poped.db PopED database. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? rsit Number Random search iterations convergence_eps Stochastic Gradient convergence value, (difference OFV D-optimal, difference gradient ED-optimal)","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/Dtrace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace optimization routines — Dtrace","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   FIM <- evaluate.fim(poped.db)  dmf <- det(FIM)  Dtrace(fn=\"\",        it=1,        ni=poped.db$design$ni,        xtopt=poped.db$design$xt,        xopt=poped.db$design$x,        aopt=poped.db$design$a,        gxt=0,ga=0,        dmf=dmf,diff=3,        ixt=FALSE,        ia=FALSE,         itvector=NULL,        dmfvector=NULL,        poped.db,        opt_xt=poped.db$settings$optsw[2],        opt_a=poped.db$settings$optsw[4],opt_x=poped.db$settings$optsw[3],        opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],        rsit=200) #> RS - It. : 1   OFV : 1.14386e+24  Dtrace(fn=\"\",        it=1,        ni=poped.db$design$ni,        xtopt=poped.db$design$xt,        xopt=poped.db$design$x,        aopt=poped.db$design$a,        gxt=0,ga=0,        dmf=dmf,diff=3,        ixt=FALSE,        ia=FALSE,         itvector=NULL,        dmfvector=NULL,        poped.db,        opt_xt=poped.db$settings$optsw[2],        opt_a=poped.db$settings$optsw[4],opt_x=poped.db$settings$optsw[3],        opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],        rsit=0) #> SG - It. : 1  OFV : 1.144e+24   Diff. :     3  Dtrace(fn=\"\",        it=1,        ni=poped.db$design$ni,        xtopt=poped.db$design$xt,        xopt=poped.db$design$x,        aopt=poped.db$design$a,        gxt=0,ga=0,        dmf=dmf,diff=3,        ixt=FALSE,        ia=FALSE,         itvector=NULL,        dmfvector=NULL,        poped.db,        opt_xt=poped.db$settings$optsw[2],        opt_a=poped.db$settings$optsw[4],opt_x=poped.db$settings$optsw[3],        opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],        rsit=1) #> RS - It. : 1   OFV : 1.14386e+24 #>  #> ******************************* #> RS Results #>  OFV(mf) = 1.14386e+24 #>  #> ********************************* #>   Dtrace(fn=\"\",        it=1,        ni=poped.db$design$ni,        xtopt=poped.db$design$xt,        xopt=poped.db$design$x,        aopt=poped.db$design$a,        gxt=0,ga=0,        dmf=dmf,        diff=0,        ixt=FALSE,        ia=FALSE,         itvector=NULL,        dmfvector=NULL,        poped.db,        opt_xt=poped.db$settings$optsw[2],        opt_a=poped.db$settings$optsw[4],opt_x=poped.db$settings$optsw[3],        opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],        rsit=1) #> RS - It. : 1   OFV : 1.14386e+24 #>  #> ******************************* #> RS Results #>  OFV(mf) = 1.14386e+24 #>  #> ********************************* #>   Dtrace(fn=\"\",        it=5,        ni=poped.db$design$ni,        xtopt=poped.db$design$xt,        xopt=poped.db$design$x,        aopt=poped.db$design$a,        gxt=0,ga=0,        dmf=dmf,        diff=0,        ixt=FALSE,        ia=FALSE,         itvector=NULL,        dmfvector=NULL,        poped.db,        opt_xt=poped.db$settings$optsw[2],        opt_a=poped.db$settings$optsw[4],opt_x=poped.db$settings$optsw[3],        opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],        rsit=1) #> SG - It. : 4  OFV : 1.144e+24   Diff. :     0 #>  #> SG - Iteration 4 --------- FINAL ------------------------- #> OFV(mf)    : 1.14386e+24 #> diff       : 0 #> *************************************************************"},{"path":"https://andrewhooker.github.io/PopED/reference/LEDoptim.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization function for D-family, E-family and Laplace approximated ED designs — LEDoptim","title":"Optimization function for D-family, E-family and Laplace approximated ED designs — LEDoptim","text":"Optimize objective function D-family, E-family Laplace approximated ED designs. Right now one optimization algorithm used function Adaptive random search. See RS_opt. function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LEDoptim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization function for D-family, E-family and Laplace approximated ED designs — LEDoptim","text":"","code":"LEDoptim(   poped.db,   model_switch = NULL,   ni = NULL,   xt = NULL,   x = NULL,   a = NULL,   bpopdescr = NULL,   ddescr = NULL,   maxxt = NULL,   minxt = NULL,   maxa = NULL,   mina = NULL,   ofv_init = 0,   fim_init = 0,   trflag = TRUE,   header_flag = TRUE,   footer_flag = TRUE,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   out_file = NULL,   d_switch = FALSE,   use_laplace = T,   laplace.fim = FALSE,   use_RS = poped.db$settings$bUseRandomSearch,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/LEDoptim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization function for D-family, E-family and Laplace approximated ED designs — LEDoptim","text":"poped.db PopED database. model_switch matrix size xt, specifying model sample belongs . ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value ofv_init initial OFV. set zero computed. fim_init initial value FIM. set zero computed. trflag optimization output screen file? header_flag header text printed ? footer_flag footer text printed ? opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? out_file file output directed ?  string, file handle using file \"\" output screen. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) use_laplace Laplace method used calculating expectation OFV? laplace.fim E(FIM) calculated computing Laplace approximated E(OFV).  Typically FIM need computed , desired,  calculation done using standard MC integration technique, can slow. use_RS function use random search algorithm? ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/LEDoptim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization function for D-family, E-family and Laplace approximated ED designs — LEDoptim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error ## to avoid sample times at very low concentrations (time 0 or very late samoples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  # Adding 10% log-normal Uncertainty to fixed effects (not Favail) bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                          bpop_vals,                          ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0) bpop_vals_ed_ln #>          bpop_vals          #> CL     4      0.15 0.000225 #> V      4      8.00 0.640000 #> KA     4      1.00 0.010000 #> Favail 0      1.00 0.000000  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=bpop_vals_ed_ln,                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70,                                   mina=0,                                   maxa=100)  ############# END ################### ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################  # warfarin ed model  if (FALSE) { # \\dontrun{      LEDoptim(poped.db)       LEDoptim(poped.db,opt_xt=T,rsit=10)       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE)     LEDoptim(poped.db,opt_xt=T,rsit=10,laplace.fim=TRUE)       LEDoptim(poped.db,opt_xt=T,rsit=10,use_laplace=FALSE)       ## testing header and footer   LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            out_file=\"foobar.txt\")       ff <- LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,                  trflag=FALSE)       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            header_flag=FALSE)       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            out_file=\"\")       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            footer_flag=FALSE)       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            footer_flag=FALSE, header_flag=FALSE)       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            footer_flag=FALSE, header_flag=FALSE,out_file=\"foobar.txt\")       LEDoptim(poped.db,opt_xt=T,rsit=10,d_switch=TRUE,            footer_flag=FALSE, header_flag=FALSE,out_file=\"\")   } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixH.html","id":null,"dir":"Reference","previous_headings":"","what":"Model linearization with respect to epsilon. — LinMatrixH","title":"Model linearization with respect to epsilon. — LinMatrixH","text":"function performs linearization model respect residual variability. Derivative model w.r.t. eps evaluated eps=0","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model linearization with respect to epsilon. — LinMatrixH","text":"","code":"LinMatrixH(model_switch, xt_ind, x, a, bpop, b_ind, bocc_ind, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model linearization with respect to epsilon. — LinMatrixH","text":"model_switch matrix size xt, specifying model sample belongs . xt_ind vector individual/group sample times x matrix discrete design variables.  row group. matrix covariates.  row group. bpop fixed effects parameter values.  Supplied vector. b_ind vector individual realization BSV terms b bocc_ind Vector individual realizations BOV terms bocc poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model linearization with respect to epsilon. — LinMatrixH","text":"matrix size (samples per individual x number epsilons)","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL.html","id":null,"dir":"Reference","previous_headings":"","what":"The linearized matrix L — LinMatrixL","title":"The linearized matrix L — LinMatrixL","text":"Function computes derivative model respect subject variability terms model (b's bocc's) evaluated defined point (b_ind bocc_ind).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The linearized matrix L — LinMatrixL","text":"","code":"LinMatrixL(model_switch, xt_ind, x, a, bpop, b_ind, bocc_ind, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The linearized matrix L — LinMatrixL","text":"model_switch vector size xt, specifying model sample belongs . x vector discrete design variables. vector covariates. bpop fixed effects parameter values.  Supplied vector. b_ind point evaluate derivative bocc_ind point evaluate derivative poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The linearized matrix L — LinMatrixL","text":"list: y matrix size (samples per individual x number random effects) poped.db PopED database","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The linearized matrix L — LinMatrixL","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   #for the FO approximation ind=1 LinMatrixL(model_switch=t(poped.db$design$model_switch[ind,,drop=FALSE]),           xt_ind=t(poped.db$design$xt[ind,,drop=FALSE]),           x=zeros(0,1),           a=t(poped.db$design$a[ind,,drop=FALSE]),           bpop=poped.db$parameters$bpop[,2,drop=FALSE],           b_ind=zeros(poped.db$parameters$NumRanEff,1),           bocc_ind=zeros(poped.db$parameters$NumDocc,1),           poped.db)[\"y\"] #> $y #>             [,1]       [,2]        [,3] #> [1,] -0.01736446 -3.4080713  2.63882264 #> [2,] -0.05954832 -5.4115558  3.17591023 #> [3,] -0.18102648 -7.2011569  2.27256206 #> [4,] -0.74460344 -7.2016770 -0.01921862 #> [5,] -2.44998833 -3.2358678 -0.10864692 #> [6,] -2.97791129 -1.5623370 -0.08675634 #> [7,] -3.07661786  0.7649213 -0.04417255 #> [8,] -2.09673861  1.1568729 -0.01795922 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixLH.html","id":null,"dir":"Reference","previous_headings":"","what":"Model linearization with respect to epsilon and eta. — LinMatrixLH","title":"Model linearization with respect to epsilon and eta. — LinMatrixLH","text":"function performs linearization model respect residual variability subject variability. Derivative model w.r.t. eps eta, evaluated eps=0 b=b_ind.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixLH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model linearization with respect to epsilon and eta. — LinMatrixLH","text":"","code":"LinMatrixLH(   model_switch,   xt_ind,   x,   a,   bpop,   b_ind,   bocc_ind,   NumEPS,   poped.db )"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixLH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model linearization with respect to epsilon and eta. — LinMatrixLH","text":"model_switch matrix size xt, specifying model sample belongs . xt_ind vector individual/group sample times x matrix discrete design variables.  row group. matrix covariates.  row group. bpop fixed effects parameter values.  Supplied vector. b_ind vector individual realization BSV terms b bocc_ind Vector individual realizations BOV terms bocc NumEPS number eps() terms model. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixLH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model linearization with respect to epsilon and eta. — LinMatrixLH","text":"matrix size (samples per individual x (number sigma x number omega))","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixLH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model linearization with respect to epsilon and eta. — LinMatrixLH","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   #for the FOI approximation ind=1 poped.db$settings$iApproximationMethod=3 # FOI approximation method  LinMatrixLH(model_switch=t(poped.db$design$model_switch[ind,,drop=FALSE]),           xt_ind=t(poped.db$design$xt[ind,,drop=FALSE]),           x=zeros(0,1),           a=t(poped.db$design$a[ind,,drop=FALSE]),           bpop=poped.db$parameters$bpop[,2,drop=FALSE],           b_ind=zeros(poped.db$parameters$NumRanEff,1),           bocc_ind=zeros(poped.db$parameters$NumDocc,1),           NumEPS=size(poped.db$parameters$sigma,1),           poped.db)[\"y\"] #> $y #>             [,1] [,2]       [,3] [,4]        [,5] [,6] #> [1,] -0.01736389    0 -3.4080716    0  2.63882249    0 #> [2,] -0.05954792    0 -5.4115556    0  3.17591065    0 #> [3,] -0.18102853    0 -7.2011552    0  2.27256214    0 #> [4,] -0.74460438    0 -7.2016748    0 -0.01922018    0 #> [5,] -2.44998688    0 -3.2358671    0 -0.10864643    0 #> [6,] -2.97791125    0 -1.5623369    0 -0.08675727    0 #> [7,] -3.07661785    0  0.7649203    0 -0.04417244    0 #> [8,] -2.09673889    0  1.1568727    0 -0.01795897    0 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL_occ.html","id":null,"dir":"Reference","previous_headings":"","what":"Model linearization with respect to occasion variability parameters. — LinMatrixL_occ","title":"Model linearization with respect to occasion variability parameters. — LinMatrixL_occ","text":"function performs linearization model respect occasion  variability parameter.. Derivative model w.r.t. eta_occ, evaluated bocc_ind.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL_occ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model linearization with respect to occasion variability parameters. — LinMatrixL_occ","text":"","code":"LinMatrixL_occ(   model_switch,   xt_ind,   x,   a,   bpop,   b_ind,   bocc_ind,   iCurrentOcc,   poped.db )"},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL_occ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model linearization with respect to occasion variability parameters. — LinMatrixL_occ","text":"model_switch matrix size xt, specifying model sample belongs . xt_ind vector individual/group sample times x matrix discrete design variables.  row group. matrix covariates.  row group. bpop fixed effects parameter values.  Supplied vector. b_ind vector individual realization BSV terms b bocc_ind Vector individual realizations BOV terms bocc iCurrentOcc current occasion. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL_occ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model linearization with respect to occasion variability parameters. — LinMatrixL_occ","text":"matrix size (samples per individual x number iovs)","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/LinMatrixL_occ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model linearization with respect to occasion variability parameters. — LinMatrixL_occ","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   #for the FO approximation ind=1  # no occasion defined in this example, so result is zero LinMatrixL_occ(model_switch=t(poped.db$design$model_switch[ind,,drop=FALSE]),           xt_ind=t(poped.db$design$xt[ind,,drop=FALSE]),           x=zeros(0,1),           a=t(poped.db$design$a[ind,,drop=FALSE]),           bpop=poped.db$parameters$bpop[,2,drop=FALSE],           b_ind=zeros(poped.db$parameters$NumRanEff,1),           bocc_ind=zeros(poped.db$parameters$NumDocc,1),           iCurrentOcc=1,           poped.db)[\"y\"] #> $y #> [1] 0 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/PopED-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PopED - Population (and individual) optimal Experimental Design. — PopED-package","title":"PopED - Population (and individual) optimal Experimental Design. — PopED-package","text":"PopED computes optimal experimental designs population  individual studies based nonlinear mixed-effect models. Often based computation Fisher Information Matrix (FIM).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/PopED-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PopED - Population (and individual) optimal Experimental Design. — PopED-package","text":"get started need define model. initial design (design space want optimize). tasks perform. number functions help tasks.  user-level functions  defined meant run minimum arguments (beginners advanced users).  Many functions package (listed ) called user-level functions often user friendly (developer level advanced user functions). Define structural model: ff.PK.1.comp.oral.md.CL,  ff.PK.1.comp.oral.md.KE,  ff.PK.1.comp.oral.sd.CL,  ff.PK.1.comp.oral.sd.KE,  ff.PKPD.1.comp.oral.md.CL.imax,  ff.PKPD.1.comp.sd.CL.emax. Define residual unexplained variability model (residual error model): feps.add.prop, feps.add, feps.prop. Create initial study design (design space): create.poped.database. Evaluate model /design simulation graphics: plot_model_prediction, model_prediction, plot_efficiency_of_windows. Evaluate design using FIM: evaluate_design, evaluate.fim, evaluate.e.ofv.fim, ofv_fim, get_rse. Optimize design (evaluate afterwards using functions): poped_optim, See \"Examples\" section short introduction using functions. several examples, r-scripts, \"examples\" folder PopED installation directory located (run R command line): system.file(\"examples\", package=\"PopED\").","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/PopED-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PopED - Population (and individual) optimal Experimental Design. — PopED-package","text":"J. Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C. Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models optimal design tool\", Computer Methods Programs Biomedicine, 108, 2012. M. Foracchia, .C. Hooker, P. Vicini . Ruggeri, \"PopED, software optimal experimental design population kinetics\", Computer Methods Programs Biomedicine, 74, 2004. https://andrewhooker.github.io/PopED/","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/PopED-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PopED - Population (and individual) optimal Experimental Design. — PopED-package","text":"Maintainer: Andrew C. Hooker andrew.hooker@farmaci.uu.se (ORCID) [translator, copyright holder] Authors: Marco Foracchia (O-Matrix version) Sebastian Ueckert (ORCID) (MATLAB version) Joakim Nyberg (MATLAB version) contributors: Eric Stroemberg (MATLAB version) [contributor] Martin Fink (Streamlining code, added functionality, vignettes) [contributor] Giulia Lestini (Streamlining code, added functionality, vignettes) [contributor]","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/PopED-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PopED - Population (and individual) optimal Experimental Design. — PopED-package","text":"","code":"library(PopED)  ##-- Model: One comp first order absorption ## -- Analytic solution for both mutiple and single dosing ff <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{     y=xt      N = floor(xt/TAU)+1     y=(DOSE*Favail/V)*(KA/(KA - CL/V)) *        (exp(-CL/V * (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 - exp(-CL/V * TAU)) -           exp(-KA * (xt - (N - 1) * TAU)) * (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU)))       return(list( y=y,poped.db=poped.db))   }) }  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                 CL=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU=a[2])   return( parameters )  }  ## -- Residual unexplained variablity (RUV) function ## -- Additive + Proportional   feps <- function(model_switch,xt,parameters,epsi,poped.db){   returnArgs <- do.call(poped.db$model$ff_pointer,list(model_switch,xt,parameters,poped.db))    y <- returnArgs[[1]]   poped.db <- returnArgs[[2]]      y = y*(1+epsi[,1])+epsi[,2]      return(list( y= y,poped.db =poped.db ))  }  ## -- Define design and design space poped.db <- create.poped.database(ff_fun=ff,                                   fg_fun=sfg,                                   fError_fun=feps,                                   bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(V=0.09,KA=0.09,CL=0.25^2),                                    sigma=c(0.04,5e-6),                                   notfixed_sigma=c(0,0),                                   m=2,                                   groupsize=20,                                   xt=c( 1,2,8,240,245),                                   minxt=c(0,0,0,240,240),                                   maxxt=c(10,10,10,248,248),                                   bUseGrouped_xt=1,                                   a=list(c(DOSE=20,TAU=24),c(DOSE=40, TAU=24)),                                   maxa=c(DOSE=200,TAU=24),                                   mina=c(DOSE=0,TAU=24))  ##  create plot of model without variability  plot_model_prediction(poped.db, model_num_points = 300)    if (FALSE) { # \\dontrun{      ##  create plot of model with variability    plot_model_prediction(poped.db, IPRED=T, DV=T, separate.groups=T, model_num_points = 300)    } # }  ## evaluate initial design evaluate_design(poped.db) #> $ofv #> [1] 28.9197 #>  #> $fim #>                V          KA           CL        d_V       d_KA        d_CL #> V     0.05336692   -8.683963  -0.05863412   0.000000   0.000000    0.000000 #> KA   -8.68396266 2999.851007 -14.43058560   0.000000   0.000000    0.000000 #> CL   -0.05863412  -14.430586  37.15243290   0.000000   0.000000    0.000000 #> d_V   0.00000000    0.000000   0.00000000 999.953587 312.240246    3.202847 #> d_KA  0.00000000    0.000000   0.00000000 312.240246 439.412556    2.287838 #> d_CL  0.00000000    0.000000   0.00000000   3.202847   2.287838 3412.005199 #>  #> $rse #>         V        KA        CL       d_V      d_KA      d_CL  #>  8.215338 10.090955  4.400304 39.833230 60.089601 27.391518  #>   if (FALSE) { # \\dontrun{      # Optimization of sample times   output <- poped_optim(poped.db, opt_xt=TRUE, parallel = TRUE)   summary(output)   get_rse(output$FIM, output$poped.db)   plot_model_prediction(output$poped.db)      # Optimization of sample times and doses   output_2 <- poped_optim(poped.db, opt_xt=TRUE, opt_a=TRUE, parallel = TRUE)   summary(output_2)   get_rse(output_2$FIM,output_2$poped.db)   plot_model_prediction(output_2$poped.db)      # Optimization of sample times with only integer time points in design space   # faster than continuous optimization in this case   poped.db.discrete <- create.poped.database(ff_fun=ff,                                              fg_fun=sfg,                                              fError_fun=feps,                                              bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9),                                               notfixed_bpop=c(1,1,1,0),                                              d=c(V=0.09,KA=0.09,CL=0.25^2),                                               sigma=c(0.04,5e-6),                                              notfixed_sigma=c(0,0),                                              m=2,                                              groupsize=20,                                              xt=c( 1,2,8,240,245),                                              minxt=c(0,0,0,240,240),                                              maxxt=c(10,10,10,248,248),                                              discrete_xt = list(0:248),                                              bUseGrouped_xt=1,                                              a=list(c(DOSE=20,TAU=24),c(DOSE=40, TAU=24)),                                              maxa=c(DOSE=200,TAU=24),                                              mina=c(DOSE=0,TAU=24),                                              ourzero = 0)      output_discrete <- poped_optim(poped.db.discrete, opt_xt=T, parallel = TRUE)         summary(output_discrete)   get_rse(output_discrete$FIM,output_discrete$poped.db)   plot_model_prediction(output_discrete$poped.db)      # Efficiency of sampling windows   plot_efficiency_of_windows(output_discrete$poped.db,xt_windows=0.5)   plot_efficiency_of_windows(output_discrete$poped.db,xt_windows=1)    } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/RS_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the objective function using an adaptive random search algorithm for D-family and E-family designs. — RS_opt","title":"Optimize the objective function using an adaptive random search algorithm for D-family and E-family designs. — RS_opt","text":"Optimize objective function using adaptive random search algorithm. Optimization can performed D-family E-family designs. function works discrete continuous optimization variables. function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; default arguments NULL function, supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/RS_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the objective function using an adaptive random search algorithm for D-family and E-family designs. — RS_opt","text":"","code":"RS_opt(   poped.db,   ni = NULL,   xt = NULL,   model_switch = NULL,   x = NULL,   a = NULL,   bpopdescr = NULL,   ddescr = NULL,   maxxt = NULL,   minxt = NULL,   maxa = NULL,   mina = NULL,   fmf = 0,   dmf = 0,   trflag = TRUE,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   cfaxt = poped.db$settings$cfaxt,   cfaa = poped.db$settings$cfaa,   rsit = poped.db$settings$rsit,   rsit_output = poped.db$settings$rsit_output,   fim.calc.type = poped.db$settings$iFIMCalculationType,   approx_type = poped.db$settings$iApproximationMethod,   iter = NULL,   d_switch = poped.db$settings$d_switch,   use_laplace = poped.db$settings$iEDCalculationType,   laplace.fim = FALSE,   header_flag = TRUE,   footer_flag = TRUE,   out_file = NULL,   compute_inv = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/RS_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the objective function using an adaptive random search algorithm for D-family and E-family designs. — RS_opt","text":"poped.db PopED database. ni vector number samples group. xt matrix sample times.  row vector sample times group. model_switch matrix size xt, specifying model sample belongs . x matrix discrete design variables.  row group. matrix covariates.  row group. bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value fmf initial value FIM. set zero computed. dmf initial OFV. set zero computed. trflag optimization output screen file? opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? cfaxt First step factor sample times cfaa Stochastic Gradient search first step factor covariates rsit Number Random search iterations rsit_output Number iterations random search screen output fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. approx_type Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI. iter number iterations entered blockheader_2 function. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) use_laplace Laplace method used calculating expectation OFV? laplace.fim E(FIM) calculated computing Laplace approximated E(OFV).  Typically FIM need computed , desired,  calculation done using standard MC integration technique, can slow. header_flag header text printed ? footer_flag footer text printed ? out_file file output directed ?  string, file handle using file \"\" output screen. compute_inv inverse FIM used compute expected RSE values?  Often needed except diagnostic purposes. ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/RS_opt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimize the objective function using an adaptive random search algorithm for D-family and E-family designs. — RS_opt","text":"M. Foracchia, .C. Hooker, P. Vicini . Ruggeri, \"PopED, software fir optimal experimental design population kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J. Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C. Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models optimal design tool\", Computer Methods Programs Biomedicine, 108, 2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/RS_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize the objective function using an adaptive random search algorithm for D-family and E-family designs. — RS_opt","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error ## to avoid sample times at very low concentrations (time 0 or very late samoples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  # Adding 10% log-normal Uncertainty to fixed effects (not Favail) bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                          bpop_vals,                          ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0) bpop_vals_ed_ln #>          bpop_vals          #> CL     4      0.15 0.000225 #> V      4      8.00 0.640000 #> KA     4      1.00 0.010000 #> Favail 0      1.00 0.000000  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=bpop_vals_ed_ln,                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70,                                   mina=0,                                   maxa=100)  ############# END ################### ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################   # Just a few iterations, optimize on DOSE and sample times using the full FIM out_1 <- RS_opt(poped.db,opt_xt=1,opt_a=1,rsit=3,fim.calc.type=0, out_file = \"\") #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 57.0828 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>     Parameter   Values   RSE_0 #>            CL     0.15       5 #>             V        8       3 #>            KA        1       7 #>          d_CL     0.07      30 #>           d_V     0.02      37 #>          d_KA      0.6      28 #>    SIGMA[1,1]     0.01      33 #>    SIGMA[2,2]     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Sampling Schedule #> * Optimize Covariates #>  #> ******************************* #> Initial Value #>  OFV(mf) = 57.0828 #> ******************************* #>  #> RS - It. : 3   OFV : 57.0828 #>  #> ******************************* #> RS Results #>  OFV(mf) = 57.0828 #>  #> Optimized Sampling Schedule #> Group 1:    0.5      1      2      6     24     36     72    120 #>  #> Optimized Covariates: #> Group 1: 70 #>  #> ********************************* #>  #> =============================================================================== #> FINAL RESULTS #> Optimized Sampling Schedule #> Group 1:    0.5      1      2      6     24     36     72    120 #>  #> Optimized Covariates: #> Group 1: 70 #>  #> OFV = 57.0828 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>     Parameter   Values   RSE_0   RSE #>            CL     0.15       5     5 #>             V        8       3     3 #>            KA        1       7     7 #>          d_CL     0.07       0     0 #>           d_V     0.02      37    37 #>          d_KA      0.6       0     0 #>    SIGMA[1,1]     0.01      33    33 #>    SIGMA[2,2]     0.25      26    26 #>  #> Total running time: 0.037 seconds  if (FALSE) { # \\dontrun{      RS_opt(poped.db)      RS_opt(poped.db,opt_xt=TRUE,rsit=100,compute_inv=F)   RS_opt(poped.db,opt_xt=TRUE,rsit=20,d_switch=0)   RS_opt(poped.db,opt_xt=TRUE,rsit=10,d_switch=0,use_laplace=T)   RS_opt(poped.db,opt_xt=TRUE,rsit=10,d_switch=0,use_laplace=T,laplace.fim=T)      ## Different headers and footers of output   RS_opt(poped.db,opt_xt=TRUE,rsit=10,out_file=\"foo.txt\")   output <- RS_opt(poped.db,opt_xt=TRUE,rsit=100,trflag=FALSE)   RS_opt(poped.db,opt_xt=TRUE,rsit=10,out_file=\"\")   RS_opt(poped.db,opt_xt=TRUE,rsit=10,header_flag=FALSE)   RS_opt(poped.db,opt_xt=TRUE,rsit=10,footer_flag=FALSE)   RS_opt(poped.db,opt_xt=TRUE,rsit=10,header_flag=FALSE,footer_flag=FALSE)   RS_opt(poped.db,opt_xt=TRUE,rsit=10,header_flag=FALSE,footer_flag=FALSE,out_file=\"foo.txt\")   RS_opt(poped.db,opt_xt=TRUE,rsit=10,header_flag=FALSE,footer_flag=FALSE,out_file=\"\")   } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/a_line_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize using line search — a_line_search","title":"Optimize using line search — a_line_search","text":"function performs grid search sequentially along design variables.  grid defined ls_step_size.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/a_line_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize using line search — a_line_search","text":"","code":"a_line_search(   poped.db,   out_file = \"\",   bED = FALSE,   diff = 0,   fmf_initial = 0,   dmf_initial = 0,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   ls_step_size = poped.db$settings$ls_step_size )"},{"path":"https://andrewhooker.github.io/PopED/reference/a_line_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize using line search — a_line_search","text":"poped.db PopED database. out_file output file write . bED algorithm use E-family methods. Logical. diff OFV difference deemed significant changing design.  , changing design variable difference new old OFV less diff change made. fmf_initial initial value FIM. 0 FIM calculated poped.db. dmf_initial initial value objective function value (OFV). 0 OFV calculated poped.db. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? ls_step_size Number grid points line search.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/a_line_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize using line search — a_line_search","text":"list containing: fmf FIM. dmf final value objective function value. best_changed algorithm found better design starting design. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. poped.db PopED database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/a_line_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize using line search — a_line_search","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   # very sparse grid to evaluate (4 points for each design valiable) output <- a_line_search(poped.db, opt_xt=TRUE, opt_a=TRUE, ls_step_size=4) #> ***************************** #>             Line Search #>  #> Searching xt1 on group 1 #> group 1 -- xt[1] changed from  0.5 to  0.01 #>      OFV(MF) changed from 55.3964 to 55.7394  #> group 1 -- xt[1] changed from  0.01 to  90.0025 #>      OFV(MF) changed from 55.7394 to 55.7436  #> group 1 -- xt[1] changed from  90.0025 to  120 #>      OFV(MF) changed from 55.7436 to 55.8023  #> Searching xt6 on group 1 #> group 1 -- xt[6] changed from  36 to  0.01 #>      OFV(MF) changed from 55.8023 to 55.8666  #> group 1 -- xt[6] changed from  0.01 to  90.0025 #>      OFV(MF) changed from 55.8666 to 55.9043  #> group 1 -- xt[6] changed from  90.0025 to  120 #>      OFV(MF) changed from 55.9043 to 55.9321  #> Searching xt2 on group 1 #> Searching xt3 on group 1 #> Searching xt7 on group 1 #> group 1 -- xt[7] changed from  72 to  30.0075 #>      OFV(MF) changed from 55.9321 to 55.9484  #> group 1 -- xt[7] changed from  30.0075 to  90.0025 #>      OFV(MF) changed from 55.9484 to 55.9661  #> Searching xt8 on group 1 #> Searching xt5 on group 1 #> Searching xt4 on group 1 #>     OFV(MF): 55.9661 #>  #> Best value for OFV(MF) = 55.9661 #>  #> Best value for xt: #> Group 1:      1      2      6     24     90    120    120    120 #>  #> Searching a1 on individual/group 1 #> group 1 -- a[1] changed from  70 to  75.0025 #>      OFV(MF) changed from 55.9661 to 56.1502  #> group 1 -- a[1] changed from  75.0025 to  100 #>      OFV(MF) changed from 56.1502 to 56.7067  #>     OFV(MF): 56.7067 #> Best value for OFV(MF) = 56.7067 #>  #> Best value for a:  #> Group 1: 100 [0.01,100] #>  #>  #> Line search run time: 0.322 seconds #> *************************** #>   if (FALSE) { # \\dontrun{        # longer run time   output <- a_line_search(poped.db,opt_xt=TRUE)      # output to a text file   output <- a_line_search(poped.db,opt_xt=TRUE,out_file=\"tmp.txt\")    } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/bfgsb_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonlinear minimization using BFGS with box constraints — bfgsb_min","title":"Nonlinear minimization using BFGS with box constraints — bfgsb_min","text":"implementation Broyden Fletcher Goldfarb Shanno (BFGS) method nonlinear minimization box constraints.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/bfgsb_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonlinear minimization using BFGS with box constraints — bfgsb_min","text":"","code":"bfgsb_min(f_name, f_options, x0, l, u, options = list())"},{"path":"https://andrewhooker.github.io/PopED/reference/bfgsb_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonlinear minimization using BFGS with box constraints — bfgsb_min","text":"f_name function name (text string) returns objective function gradient objective function, order. See calc_ofv_and_grad used Doptim. f_options Options f_name argument. x0 initial values optimize l lower bounds u upper bounds options list additional settings arguments","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/bfgsb_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nonlinear minimization using BFGS with box constraints — bfgsb_min","text":"list containing: x_k objective function. f_k gradient. B_k hessian.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/bfgsb_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonlinear minimization using BFGS with box constraints — bfgsb_min","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   if (FALSE) { # \\dontrun{        # BFGS search, DOSE and sample time optimization   bfgs.output <- poped_optimize(poped.db,opt_xt=1,opt_a=0,                                 bUseRandomSearch= 0,                                 bUseStochasticGradient = 0,                                 bUseBFGSMinimizer = 1,                                 bUseLineSearch = 0)      f_name <- 'calc_ofv_and_grad'    gen_des <- downsizing_general_design(poped.db)      aa <- 0*poped.db$settings$cfaa*matrix(1,poped.db$design$m,size(poped.db$design$a,2))   axt=1*poped.db$settings$cfaxt*matrix(1,poped.db$design$m,max(poped.db$design_space$maxni))      f_options_1 <- list(gen_des$x,1, 0, gen_des$model_switch,                     aa=aa,axt=axt,poped.db$design$groupsize,                     gen_des$ni,                     gen_des$xt,gen_des$x,gen_des$a,gen_des$bpop[,2,drop=F],                     getfulld(gen_des$d[,2,drop=F],poped.db$parameters$covd),                     poped.db$parameters$sigma,                     getfulld(poped.db$parameters$docc[,2,drop=F],                              poped.db$parameters$covdocc),poped.db)      options=list('factr'=poped.db$settings$BFGSConvergenceCriteriaMinStep,                #'factr'=0.01,                'pgtol'=poped.db$settings$BFGSProjectedGradientTol,                'ftol'=poped.db$settings$BFGSTolerancef,                'gtol'=poped.db$settings$BFGSToleranceg,                'xtol'=poped.db$settings$BFGSTolerancex)      x_k=t(gen_des$xt)   lb=t(gen_des$minxt)   ub=t(gen_des$maxxt)      output <- bfgsb_min(f_name,f_options, x_k,lb,ub,options)     } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/blockexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize your experiment for optimization routines — blockexp","title":"Summarize your experiment for optimization routines — blockexp","text":"Create output screen text file summarizes initial design design space use optimize.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/blockexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize your experiment for optimization routines — blockexp","text":"","code":"blockexp(   fn,   poped.db,   e_flag = FALSE,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[4],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5] )"},{"path":"https://andrewhooker.github.io/PopED/reference/blockexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize your experiment for optimization routines — blockexp","text":"fn file handle write . poped.db PopED database. e_flag output uncertainty around parameters? opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized?","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/blockexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize your experiment for optimization routines — blockexp","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   blockexp(\"\",poped.db, opt_xt=TRUE) #> ============================================================================== #> Model description : PopED model  #>  #> Model Sizes :  #> Number of individual model parameters                  g[j]    : Ng    = 5 #> Number of population model fixed parameters            bpop[j] : Nbpop = 4 #> Number of population model random effects parameters   b[j]    : Nb    = 3 #>  #> Typical Population Parameters: #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[1]:  0.15  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[2]:     8  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[3]:     1  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[4]:     1  #>  #> Between Subject Variability matrix D (variance units)  #> 0.07 0.00 0.00 #> 0.00 0.02 0.00 #> 0.00 0.00 0.60 #>  #> Diagonal Elements of D [sqrt(param)]: #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> D[1,1]:  0.07 [0.2646]  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> D[2,2]:  0.02 [0.1414]  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> D[3,3]:   0.6 [0.7746]  #>  #> Residual Unexplained Variability matrix SIGMA (variance units) :  #> 0.01 0.00 #> 0.00 0.25 #>  #> Diagonal Elements of SIGMA [sqrt(param)]: #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> SIGMA[1,1]:  0.01 [  0.1]  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> SIGMA[2,2]:  0.25 [  0.5]  #>  #> ============================================================================== #> Experiment description (design and design space) #>  #> Warning: 2 arguments not used by format 'Number of individuals: %g #> ' #> Number of individuals: 32 #> Number of groups (individuals with same design): 1 #> Number of individuals per group: #>   #> Warning: 2 arguments not used by format '    Group %g: %g #> ' #>     Group 1: 32 #> Number of samples per group: #>  Number of discrete experimental variables: 0 #> Number of model covariates: 1 #>  #> Initial Sampling Schedule #> Group 1:    0.5      1      2      6     24     36     72    120 #>  #> Minimum allowed sampling values #> Group 1:   0.01   0.01   0.01   0.01   0.01   0.01   0.01   0.01 #>  #> Maximum allowed sampling values #> Group 1:    120    120    120    120    120    120    120    120 #>  #> Covariates: #> Group 1:  #> Warning: 2 arguments not used by format '%g' #> 70 #>  #> NULL"},{"path":"https://andrewhooker.github.io/PopED/reference/blockfinal.html","id":null,"dir":"Reference","previous_headings":"","what":"Result function for optimization routines — blockfinal","title":"Result function for optimization routines — blockfinal","text":"Create output screen text file summarizes problem solved.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/blockfinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result function for optimization routines — blockfinal","text":"","code":"blockfinal(   fn,   fmf,   dmf,   groupsize,   ni,   xt,   x,   a,   model_switch,   bpop,   d,   docc,   sigma,   poped.db,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_inds = poped.db$settings$optsw[5],   fmf_init = NULL,   dmf_init = NULL,   param_cvs_init = NULL,   compute_inv = TRUE,   out_file = NULL,   trflag = TRUE,   footer_flag = TRUE,   run_time = NULL,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/blockfinal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result function for optimization routines — blockfinal","text":"fn file handle write . fmf initial value FIM. set zero computed. dmf initial OFV. set zero computed. groupsize vector number individuals group. ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. model_switch matrix size xt, specifying model sample belongs . bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. docc Matrix defining IOV, IOV variances IOV distribution d bpop. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). poped.db PopED database. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_inds number individuals per group optimized? fmf_init Initial FIM. dmf_init Initial OFV. param_cvs_init initial design parameter RSE values percent. compute_inv inverse FIM used compute expected RSE values?  Often needed except diagnostic purposes. out_file file output directed ?  string, file handle using file \"\" output screen. trflag optimization output screen file? footer_flag footer text printed ? ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/blockfinal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Result function for optimization routines — blockfinal","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   FIM <- evaluate.fim(poped.db)  dmf <- det(FIM)   blockfinal(fn=\"\",fmf=FIM,            dmf=dmf,            groupsize=poped.db$design$groupsize,            ni=poped.db$design$ni,            xt=poped.db$design$xt,            x=poped.db$design$x,a=poped.db$design$a,            model_switch=poped.db$design$model_switch,            poped.db$parameters$param.pt.val$bpop,            poped.db$parameters$param.pt.val$d,            poped.db$parameters$docc,            poped.db$parameters$param.pt.val$sigma,            poped.db,            opt_xt=TRUE,            fmf_init=FIM,            dmf_init=dmf,            param_cvs_init=get_rse(FIM,poped.db)) #> =============================================================================== #> FINAL RESULTS #> Optimized Sampling Schedule #> Group 1:    0.5      1      2      6     24     36     72    120 #>  #> OFV = 1.14386e+24 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = NaN #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07      30    30 #>          d_V     0.02      37    37 #>         d_KA      0.6      27    27 #>     sig_prop     0.01      32    32 #>      sig_add     0.25      26    26 #>  #> Total running time: 1.585 seconds"},{"path":"https://andrewhooker.github.io/PopED/reference/blockheader.html","id":null,"dir":"Reference","previous_headings":"","what":"Header function for optimization routines — blockheader","title":"Header function for optimization routines — blockheader","text":"Create output screen text file summarizes problem tying solve.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/blockheader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header function for optimization routines — blockheader","text":"","code":"blockheader(   poped.db,   name = \"Default\",   iter = NULL,   e_flag = !(poped.db$settings$d_switch),   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   fmf = 0,   dmf = 0,   bpop = NULL,   d = NULL,   docc = NULL,   sigma = NULL,   name_header = poped.db$settings$strOutputFileName,   file_path = poped.db$settings$strOutputFilePath,   out_file = NULL,   compute_inv = TRUE,   trflag = TRUE,   header_flag = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/blockheader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header function for optimization routines — blockheader","text":"poped.db PopED database. name name used output file. Combined name_header iter. \"\" output screen. iter last number name printed output file, combined name. e_flag output uncertainty around parameters? opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? fmf initial value FIM. set zero computed. dmf initial OFV. set zero computed. bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. docc Matrix defining IOV, IOV variances IOV distribution d bpop. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). name_header initial portion file name. file_path path file created. out_file file output directed ?  string, file handle using file \"\" output screen. compute_inv inverse FIM used compute expected RSE values?  Often needed except diagnostic purposes. trflag optimization output screen file? header_flag header text printed ? ... Additional arguments passed functions.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/blockheader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header function for optimization routines — blockheader","text":"fn file handle ('' name='')","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/blockheader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Header function for optimization routines — blockheader","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   FIM <- evaluate.fim(poped.db)  dmf <- det(FIM)  blockheader(poped.db,name=\"\") #> ============================================================================== #> Optimization of design parameters #>  #>  #> [1] \"\"  blockheader(name=\"\",iter=1,poped.db) #> ============================================================================== #> Optimization of design parameters #>  #>  #> [1] \"\"   blockheader(name='',               iter=1,               poped.db,               e_flag=FALSE,               opt_xt=TRUE,               opt_a=TRUE,opt_x=poped.db$settings$optsw[4],               opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],               fmf=FIM,dmf=dmf,               bpop=poped.db$parameters$param.pt.val$bpop,               d=poped.db$parameters$param.pt.val$d,               docc=poped.db$parameters$docc,sigma=poped.db$parameters$param.pt.val$sigma) #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 1.14386e+24 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Sampling Schedule #> * Optimize Covariates #>  #> [1] \"\"    blockheader(name='',               iter=1,               poped.db,               e_flag=TRUE,               opt_xt=TRUE,               opt_a=TRUE,opt_x=poped.db$settings$optsw[4],               opt_samps=poped.db$settings$optsw[1],opt_inds=poped.db$settings$optsw[5],               fmf=FIM,dmf=dmf,               bpop=poped.db$parameters$param.pt.val$bpop,               d=poped.db$parameters$param.pt.val$d,               docc=poped.db$parameters$docc,sigma=poped.db$parameters$param.pt.val$sigma) #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 1.14386e+24 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Sampling Schedule #> * Optimize Covariates #>  #> [1] \"\"       poped.db.1 <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   groupsize=32,                                   xt=rbind(c( 0.5,1,2,6,24,36,72,120),                                            c( 0.5,1.1,2,6,24,36,72,120)),                                   minxt=rbind(c(0,1,1.5,3,20,30,70,118),                                               c(0.1,1.1,1.6,3.1,20.1,30.1,70.1,118.1)),                                   maxxt=c(12,13,14,15,26,44,78,120),                                   a=70,                                   mina=0,                                   maxa=100)   blockheader(poped.db.1,name=\"\",trflag=2,opt_xt=TRUE) #> ============================================================================== #> Model description : PopED model  #>  #> Model Sizes :  #> Number of individual model parameters                  g[j]    : Ng    = 5 #> Number of population model fixed parameters            bpop[j] : Nbpop = 4 #> Number of population model random effects parameters   b[j]    : Nb    = 3 #>  #> Typical Population Parameters: #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[1]:  0.15  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[2]:     8  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[3]:     1  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> bpop[4]:     1  #>  #> Between Subject Variability matrix D (variance units)  #> 0.07 0.00 0.00 #> 0.00 0.02 0.00 #> 0.00 0.00 0.60 #>  #> Diagonal Elements of D [sqrt(param)]: #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> D[1,1]:  0.07 [0.2646]  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> D[2,2]:  0.02 [0.1414]  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> D[3,3]:   0.6 [0.7746]  #>  #> Residual Unexplained Variability matrix SIGMA (variance units) :  #> 0.01 0.00 #> 0.00 0.25 #>  #> Diagonal Elements of SIGMA [sqrt(param)]: #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> SIGMA[1,1]:  0.01 [  0.1]  #> Warning: 5 arguments not used by format '%s[%g%s]: %5.4g %s #> ' #> SIGMA[2,2]:  0.25 [  0.5]  #>  #> ============================================================================== #> Experiment description (design and design space) #>  #> Warning: 2 arguments not used by format 'Number of individuals: %g #> ' #> Number of individuals: 64 #> Number of groups (individuals with same design): 2 #> Number of individuals per group: #>   #> Warning: 2 arguments not used by format '    Group %g: %g #> ' #>     Group 1: 32 #>      Group 2: 32 #> Number of samples per group: #>  Number of discrete experimental variables: 0 #> Number of model covariates: 1 #>  #> Initial Sampling Schedule #> Group 1:    0.5      1      2      6     24     36     72    120 #> Group 2:    0.5    1.1      2      6     24     36     72    120 #>  #> Minimum allowed sampling values #> Group 1:  1e-05      1    1.5      3     20     30     70    118 #> Group 2:    0.1    1.1    1.6    3.1   20.1   30.1   70.1  118.1 #>  #> Maximum allowed sampling values #> Group 1:     12     13     14     15     26     44     78    120 #> Group 2:     12     13     14     15     26     44     78    120 #>  #> Covariates: #> Group 1:  #> Warning: 2 arguments not used by format '%g' #> 70 #> Group 2:  #> Warning: 2 arguments not used by format '%g' #> 70 #>  #> ============================================================================== #> Criterion Specification #>  #> OFV calculation for FIM: 4  #>   1=Determinant of FIM, #>   4=log determinant of FIM, #>   6=determinant of interesting part of FIM (Ds) #>  #> Approximation method: 0 #>   0=FO,  #>   1=FOCE,  #>   2=FOCEI,  #>   3=FOI #>  #> Fisher Information Matrix type: 1 #>   0=Full FIM, #>   1=Reduced FIM, #>   2=weighted models, #>   3=Loc models, #>   4=reduced FIM with derivative of SD of sigma as pfim, #>   5=FULL FIM parameterized with A,B,C matrices & derivative of variance, #>   6=Calculate one model switch at a time, good for large matrices, #>   7=Reduced FIM parameterized with A,B,C matrices & derivative of variance #>  #> Design family: 1 #>   D-family design (1) or  #>   ED-family design (0)  #>   (with or without parameter uncertainty) #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Sampling Schedule #>  #> [1] \"\""},{"path":"https://andrewhooker.github.io/PopED/reference/blockopt.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize your optimization settings for optimization routines — blockopt","title":"Summarize your optimization settings for optimization routines — blockopt","text":"Create output screen text file summarizes optimization settings use optimize.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/blockopt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize your optimization settings for optimization routines — blockopt","text":"","code":"blockopt(fn, poped.db, opt_method = \"\")"},{"path":"https://andrewhooker.github.io/PopED/reference/blockopt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize your optimization settings for optimization routines — blockopt","text":"fn file handle write . poped.db PopED database. opt_method \"RS\" (random search), \"SG\" (stochastic gradient) \"\" (discrete optimization) specific output produced.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/blockopt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize your optimization settings for optimization routines — blockopt","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   blockopt(fn=\"\",poped.db,opt_method=\"SG\") #> ============================================================================== #> Optimization Settings #>  #> Stochastic Gradient : #> Maximum number of cycles : 150 #> Epsilon for termination : 1e-08 #> First step factor for xt: 0.001 #> First step factor for a: 0.001 #> RS m0it: 50 #>  #> NULL blockopt(fn=\"\",poped.db,opt_method=\"RS\") #> ============================================================================== #> Optimization Settings #>  #> Random Search : #> Number of cycles : 300 #> Locality factor for xt : 10 #> Locality factor for a  : 10 #>  #> NULL blockopt(fn=\"\",poped.db,opt_method=\"DO\") #> ============================================================================== #> Optimization Settings #>  #> Discrete Optimization  : #> RS int it: 250 #> SG int it: 50 #>  #> NULL"},{"path":"https://andrewhooker.github.io/PopED/reference/build_sfg.html","id":null,"dir":"Reference","previous_headings":"","what":"Build PopED parameter function from a model function — build_sfg","title":"Build PopED parameter function from a model function — build_sfg","text":"Build PopED parameter function model function","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/build_sfg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build PopED parameter function from a model function — build_sfg","text":"","code":"build_sfg(   model = \"ff.PK.1.comp.oral.sd.CL\",   covariates = c(\"dose\", \"tau\"),   par_names = NULL,   etas = \"exp\",   no_etas = c(\"F\", \"Favail\"),   env = parent.frame() )"},{"path":"https://andrewhooker.github.io/PopED/reference/build_sfg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build PopED parameter function from a model function — build_sfg","text":"model string text describing model function name covariates list covariate names filtered model par_names list parameter names model file.  supplied undefined variables model file extracted covariate names filtered list. etas Can \"exp\", \"prop\", \"add\" \"none\".  Either one value parameters list defining model per parameter. no_etas Parameters etas associated . env environment create function .","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/build_sfg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build PopED parameter function from a model function — build_sfg","text":"parameter model function used input PopED calculations.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/build_sfg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build PopED parameter function from a model function — build_sfg","text":"","code":"build_sfg(model=\"ff.PK.1.comp.oral.md.CL\") #> function (x, a, bpop, b, bocc)  #> parameters = c(CL = bpop[1] * exp(b[1]), Favail = bpop[2], KA = bpop[3] *  #>     exp(b[2]), V = bpop[4] * exp(b[3]), DOSE = a[1], TAU = a[2]) #> <environment: 0x55c0591a3620>  etas <- c(Favail=\"exp\",KA=\"exp\",V=\"add\",CL=\"exp\") build_sfg(model=\"ff.PK.1.comp.oral.md.CL\",etas = etas) #> function (x, a, bpop, b, bocc)  #> parameters = c(CL = bpop[1] * exp(b[1]), Favail = bpop[2] * exp(b[2]),  #>     KA = bpop[3] * exp(b[3]), V = bpop[4] + b[4], DOSE = a[1],  #>     TAU = a[2]) #> <environment: 0x55c0591a3620>"},{"path":"https://andrewhooker.github.io/PopED/reference/calc_autofocus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the autofocus portion of the stochastic gradient routine — calc_autofocus","title":"Compute the autofocus portion of the stochastic gradient routine — calc_autofocus","text":"Compute autofocus portion stochastic gradient routine","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/calc_autofocus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the autofocus portion of the stochastic gradient routine — calc_autofocus","text":"","code":"calc_autofocus(   m,   ni_var,   dmf,   varopt,   varopto,   maxvar,   minvar,   gradvar,   normgvar,   avar,   model_switch,   groupsize,   xtopt,   xopt,   aopt,   ni,   bpop,   d,   sigma,   docc,   poped.db )"},{"path":"https://andrewhooker.github.io/PopED/reference/calc_autofocus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the autofocus portion of the stochastic gradient routine — calc_autofocus","text":"m Number groups study.  individual group design. ni_var ni_var. dmf initial OFV. set zero computed. varopt varopt. varopto varopto. maxvar maxvar. minvar minvar. gradvar gradvar. normgvar normgvar. avar avar. model_switch matrix size xt, specifying model sample belongs . groupsize vector number individuals group. xtopt optimal sampling times matrix. xopt optimal discrete design variables matrix. aopt optimal continuous design variables matrix. ni vector number samples group. bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). docc Matrix defining IOV, IOV variances IOV distribution d bpop. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/calc_autofocus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the autofocus portion of the stochastic gradient routine — calc_autofocus","text":"list containing: navar autofocus parameter. poped.db PopED database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/calc_autofocus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the autofocus portion of the stochastic gradient routine — calc_autofocus","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   if (FALSE) { # \\dontrun{    # Stochastic gradient search, DOSE and sample time optimization sg.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                              bUseRandomSearch= 0,                             bUseStochasticGradient = 1,                             bUseBFGSMinimizer = 0,                             bUseLineSearch = 0,                             sgit=20)  } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_fim.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Fisher Information Matrix (FIM) and the OFV(FIM) for either point values or parameters or distributions. — calc_ofv_and_fim","title":"Calculate the Fisher Information Matrix (FIM) and the OFV(FIM) for either point values or parameters or distributions. — calc_ofv_and_fim","text":"function computes expectation FIM OFV(FIM) either point values parameter estimates parameter distributions given model, parameters, distributions parameter uncertainty, design methods defined PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_fim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Fisher Information Matrix (FIM) and the OFV(FIM) for either point values or parameters or distributions. — calc_ofv_and_fim","text":"","code":"calc_ofv_and_fim(   poped.db,   ofv = 0,   fim = 0,   d_switch = poped.db$settings$d_switch,   bpopdescr = poped.db$parameters$bpop,   ddescr = poped.db$parameters$d,   bpop = bpopdescr[, 2, drop = F],   d = getfulld(ddescr[, 2, drop = F], poped.db$parameters$covd),   docc_full = getfulld(poped.db$parameters$docc[, 2, drop = F],     poped.db$parameters$covdocc),   model_switch = poped.db$design$model_switch,   ni = poped.db$design$ni,   xt = poped.db$design$xt,   x = poped.db$design$x,   a = poped.db$design$a,   fim.calc.type = poped.db$settings$iFIMCalculationType,   use_laplace = poped.db$settings$iEDCalculationType,   laplace.fim = FALSE,   ofv_fun = poped.db$settings$ofv_fun,   evaluate_fim = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_fim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Fisher Information Matrix (FIM) and the OFV(FIM) for either point values or parameters or distributions. — calc_ofv_and_fim","text":"poped.db PopED database. ofv current ofv.  zero value simply returned unchanged. fim current FIM. zero value simply returned unchanged. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. docc_full occasion variability matrix. model_switch matrix size xt, specifying model sample belongs . ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. use_laplace Laplace method used calculating expectation OFV? laplace.fim E(FIM) calculated computing Laplace approximated E(OFV).  Typically FIM need computed , desired,  calculation done using standard MC integration technique, can slow. ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . evaluate_fim FIM calculated? ... arguments passed function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_fim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Fisher Information Matrix (FIM) and the OFV(FIM) for either point values or parameters or distributions. — calc_ofv_and_fim","text":"list containing FIM OFV(FIM) E(FIM) E(OFV(FIM)) according  function arguments.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_fim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Fisher Information Matrix (FIM) and the OFV(FIM) for either point values or parameters or distributions. — calc_ofv_and_fim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error ## to avoid sample times at very low concentrations (time 0 or very late samoples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  # Adding 10% log-normal Uncertainty to fixed effects (not Favail) bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                          bpop_vals,                          ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0) bpop_vals_ed_ln #>          bpop_vals          #> CL     4      0.15 0.000225 #> V      4      8.00 0.640000 #> KA     4      1.00 0.010000 #> Favail 0      1.00 0.000000  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=bpop_vals_ed_ln,                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70,                                   mina=0,                                   maxa=100)  ############# END ################### ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################   calc_ofv_and_fim(poped.db) #> $ofv #> [1] 55.39645 #>  #> $fim #>             [,1]      [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 17141.83891 20.838375 10.011000 0.000000e+00     0.000000  0.00000000 #> [2,]    20.83837 17.268051 -3.423641 0.000000e+00     0.000000  0.00000000 #> [3,]    10.01100 -3.423641 49.864697 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000  0.000000  0.000000 2.324341e+03     9.770352  0.03523364 #> [5,]     0.00000  0.000000  0.000000 9.770352e+00 19083.877564 11.72131703 #> [6,]     0.00000  0.000000  0.000000 3.523364e-02    11.721317 38.85137516 #> [7,]     0.00000  0.000000  0.000000 7.268410e+02  9656.158553 64.78095548 #> [8,]     0.00000  0.000000  0.000000 9.062739e+01   266.487127  2.94728469 #>              [,7]        [,8] #> [1,]      0.00000    0.000000 #> [2,]      0.00000    0.000000 #> [3,]      0.00000    0.000000 #> [4,]    726.84097   90.627386 #> [5,]   9656.15855  266.487127 #> [6,]     64.78096    2.947285 #> [7,] 192840.20092 6659.569867 #> [8,]   6659.56987  475.500111 #>   if (FALSE) { # \\dontrun{      calc_ofv_and_fim(poped.db,d_switch=0)   calc_ofv_and_fim(poped.db,d_switch=0,use_laplace=TRUE)   calc_ofv_and_fim(poped.db,d_switch=0,use_laplace=TRUE,laplace.fim=TRUE)  } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_grad.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an objective function and gradient — calc_ofv_and_grad","title":"Compute an objective function and gradient — calc_ofv_and_grad","text":"Compute objective function gradient respect optimization parameters. function can passed Broyden Fletcher Goldfarb Shanno (BFGS) method nonlinear minimization box constraints implemented bfgsb_min.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_grad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an objective function and gradient — calc_ofv_and_grad","text":"","code":"calc_ofv_and_grad(   x,   optxt,   opta,   model_switch,   aa,   axt,   groupsize,   ni,   xtopto,   xopto,   aopto,   bpop,   d,   sigma,   docc_full,   poped.db,   only_fim = FALSE )"},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_grad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an objective function and gradient — calc_ofv_and_grad","text":"x matrix discrete design variables.  row group. optxt sampling times optimized opta continuous design variables optimized model_switch matrix size xt, specifying model sample belongs . aa aa value axt axt value groupsize vector number individuals group. ni vector number samples group. xtopto xtopto value xopto xopto value aopto aopto value bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). docc_full occasion variability matrix. poped.db PopED database. only_fim gradient calculated?","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_grad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an objective function and gradient — calc_ofv_and_grad","text":"list containing: f objective function. g gradient.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/calc_ofv_and_grad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an objective function and gradient — calc_ofv_and_grad","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   opta=TRUE aa=opta*poped.db$settings$cfaa*matrix(1,poped.db$design$m,size(poped.db$design$a,2)) aa #>       [,1] #> [1,] 0.001  optxt=TRUE axt=optxt*poped.db$settings$cfaxt*matrix(1,poped.db$design$m,max(poped.db$design_space$maxni)) axt #>       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8] #> [1,] 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001  calc_ofv_and_grad(x=c(poped.db$design$xt,poped.db$design$a),                   optxt=optxt, opta=opta,                    model_switch=poped.db$design$model_switch,                   aa=aa,                   axt=axt,                   groupsize=poped.db$design$groupsize,                   ni=poped.db$design$ni,                   xtopto=poped.db$design$xt,                   xopto=poped.db$design$x,                   aopto=poped.db$design$a,                   bpop=poped.db$parameters$param.pt.val$bpop,                   d=poped.db$parameters$param.pt.val$d,                   sigma=poped.db$parameters$param.pt.val$sigma,                   docc_full=poped.db$parameters$param.pt.val$docc,                   poped.db,                   only_fim=FALSE) #> $f #> [1] -55.39645 #>  #> $g #>               [,1] #>  [1,]  0.079631185 #>  [2,] -0.025697327 #>  [3,] -0.312973785 #>  [4,]  0.009484133 #>  [5,]  0.019485307 #>  [6,] -0.001675713 #>  [7,] -0.009544061 #>  [8,] -0.001929802 #>  [9,] -0.035844547 #>   if (FALSE) { # \\dontrun{      # BFGS search, DOSE and sample time optimization   bfgs.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                                 bUseRandomSearch= 0,                                 bUseStochasticGradient = 0,                                 bUseBFGSMinimizer = 1,                                 bUseLineSearch = 0)    } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cell array (a matrix of lists) — cell","title":"Create a cell array (a matrix of lists) — cell","text":"Create cell array MATLAB.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cell array (a matrix of lists) — cell","text":"","code":"cell(...)"},{"path":"https://andrewhooker.github.io/PopED/reference/cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cell array (a matrix of lists) — cell","text":"... Dimensions cell array.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cell array (a matrix of lists) — cell","text":"list empty lists.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/cell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a cell array (a matrix of lists) — cell","text":"modified version function matlab R-package.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/cell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cell array (a matrix of lists) — cell","text":"","code":"cell(3) #>      [,1]      [,2]      [,3]      #> [1,] numeric,0 numeric,0 numeric,0 #> [2,] numeric,0 numeric,0 numeric,0 #> [3,] numeric,0 numeric,0 numeric,0 cell(2,3) #>      [,1]      [,2]      [,3]      #> [1,] numeric,0 numeric,0 numeric,0 #> [2,] numeric,0 numeric,0 numeric,0  ## define possible values of 2 categorical design variable x.space <- cell(1,2) x.space[1,1] <- list(seq(10,100,10)) x.space[1,2] <- list(seq(10,300,10)) x.space #>      [,1]       [,2]       #> [1,] numeric,10 numeric,30 x.space[1,1] #> [[1]] #>  [1]  10  20  30  40  50  60  70  80  90 100 #>  x.space[1,2] #> [[1]] #>  [1]  10  20  30  40  50  60  70  80  90 100 110 120 130 140 150 160 170 180 190 #> [20] 200 210 220 230 240 250 260 270 280 290 300 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/convert_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Create global variables in the PopED database — convert_variables","title":"Create global variables in the PopED database — convert_variables","text":"Function takes design variables input files converts global variables needed PopED.  Typically used user.  Instead use function create.poped.database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/convert_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create global variables in the PopED database — convert_variables","text":"","code":"convert_variables(poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/convert_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create global variables in the PopED database — convert_variables","text":"poped.db PopED database","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/convert_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create global variables in the PopED database — convert_variables","text":"PopED database","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/create.poped.database.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PopED database — create.poped.database","title":"Create a PopED database — create.poped.database","text":"function takes input file (previously created poped database) supplied user, function arguments, creates database can used run PopED functions.  function supplies default values elements database specified input file function arguments. Default arguments supplied Usage section (easiest use text search find values interested ).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/create.poped.database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PopED database — create.poped.database","text":"","code":"create.poped.database(   popedInput = list(),   ff_file = NULL,   ff_fun = poped.choose(popedInput$model$ff_pointer, NULL),   fg_file = NULL,   fg_fun = poped.choose(popedInput$model$fg_pointer, NULL),   fError_file = NULL,   fError_fun = poped.choose(popedInput$model$ferror_pointer, NULL),   optsw = poped.choose(popedInput$settings$optsw, cbind(0, 0, 0, 0, 0)),   xt = poped.choose(popedInput$design[[\"xt\"]], stop(\"'xt' needs to be defined\")),   m = poped.choose(popedInput$design[[\"m\"]], NULL),   x = poped.choose(popedInput$design[[\"x\"]], NULL),   nx = poped.choose(popedInput$design$nx, NULL),   a = poped.choose(popedInput$design[[\"a\"]], NULL),   groupsize = poped.choose(popedInput$design$groupsize,     stop(\"'groupsize' needs to be defined\")),   ni = poped.choose(popedInput$design$ni, NULL),   model_switch = poped.choose(popedInput$design$model_switch, NULL),   maxni = poped.choose(popedInput$design_space$maxni, NULL),   minni = poped.choose(popedInput$design_space$minni, NULL),   maxtotni = poped.choose(popedInput$design_space$maxtotni, NULL),   mintotni = poped.choose(popedInput$design_space$mintotni, NULL),   maxgroupsize = poped.choose(popedInput$design_space$maxgroupsize, NULL),   mingroupsize = poped.choose(popedInput$design_space$mingroupsize, NULL),   maxtotgroupsize = poped.choose(popedInput$design_space$maxtotgroupsize, NULL),   mintotgroupsize = poped.choose(popedInput$design_space$mintotgroupsize, NULL),   maxxt = poped.choose(popedInput$design_space$maxxt, NULL),   minxt = poped.choose(popedInput$design_space$minxt, NULL),   discrete_xt = poped.choose(popedInput$design_space$xt_space, NULL),   discrete_x = poped.choose(popedInput$design_space$discrete_x, NULL),   maxa = poped.choose(popedInput$design_space$maxa, NULL),   mina = poped.choose(popedInput$design_space$mina, NULL),   discrete_a = poped.choose(popedInput$design_space$a_space, NULL),   bUseGrouped_xt = poped.choose(popedInput$design_space$bUseGrouped_xt, FALSE),   G_xt = poped.choose(popedInput$design_space$G_xt, NULL),   bUseGrouped_a = poped.choose(popedInput$design_space$bUseGrouped_a, FALSE),   G_a = poped.choose(popedInput$design_space$G_a, NULL),   bUseGrouped_x = poped.choose(popedInput$design_space$bUseGrouped_x, FALSE),   G_x = poped.choose(popedInput$design_space[[\"G_x\"]], NULL),   iFIMCalculationType = poped.choose(popedInput$settings$iFIMCalculationType, 1),   iApproximationMethod = poped.choose(popedInput$settings$iApproximationMethod, 0),   iFOCENumInd = poped.choose(popedInput$settings$iFOCENumInd, 1000),   prior_fim = poped.choose(popedInput$settings$prior_fim, matrix(0, 0, 1)),   strAutoCorrelationFile = poped.choose(popedInput$model$auto_pointer, \"\"),   d_switch = poped.choose(popedInput$settings$d_switch, 1),   ofv_calc_type = poped.choose(popedInput$settings$ofv_calc_type, 4),   ds_index = popedInput$parameters$ds_index,   strEDPenaltyFile = poped.choose(popedInput$settings$strEDPenaltyFile, \"\"),   ofv_fun = poped.choose(popedInput$settings$ofv_fun, NULL),   iEDCalculationType = poped.choose(popedInput$settings$iEDCalculationType, 0),   ED_samp_size = poped.choose(popedInput$settings$ED_samp_size, 45),   bLHS = poped.choose(popedInput$settings$bLHS, 1),   strUserDistributionFile = poped.choose(popedInput$model$user_distribution_pointer, \"\"),   nbpop = popedInput$parameters$nbpop,   NumRanEff = popedInput$parameters$NumRanEff,   NumDocc = popedInput$parameters$NumDocc,   NumOcc = popedInput$parameters$NumOcc,   bpop = poped.choose(popedInput$parameters$bpop, stop(\"bpop must be defined\")),   d = poped.choose(popedInput$parameters$d, NULL),   covd = popedInput$parameters$covd,   sigma = popedInput$parameters$sigma,   docc = poped.choose(popedInput$parameters$docc, matrix(0, 0, 3)),   covdocc = poped.choose(popedInput$parameters$covdocc, zeros(1, length(docc[, 2, drop =     F]) * (length(docc[, 2, drop = F]) - 1)/2)),   notfixed_bpop = popedInput$parameters$notfixed_bpop,   notfixed_d = popedInput$parameters$notfixed_d,   notfixed_covd = popedInput$parameters$notfixed_covd,   notfixed_docc = popedInput$parameters$notfixed_docc,   notfixed_covdocc = poped.choose(popedInput$parameters$notfixed_covdocc, zeros(1,     length(covdocc))),   notfixed_sigma = poped.choose(popedInput$parameters$notfixed_sigma, t(rep(1,     size(sigma, 2)))),   notfixed_covsigma = poped.choose(popedInput$parameters$notfixed_covsigma, zeros(1,     length(notfixed_sigma) * (length(notfixed_sigma) - 1)/2)),   reorder_parameter_vectors = FALSE,   bUseRandomSearch = poped.choose(popedInput$settings$bUseRandomSearch, TRUE),   bUseStochasticGradient = poped.choose(popedInput$settings$bUseStochasticGradient, TRUE),   bUseLineSearch = poped.choose(popedInput$settings$bUseLineSearch, TRUE),   bUseExchangeAlgorithm = poped.choose(popedInput$settings$bUseExchangeAlgorithm, FALSE),   bUseBFGSMinimizer = poped.choose(popedInput$settings$bUseBFGSMinimizer, FALSE),   EACriteria = poped.choose(popedInput$settings$EACriteria, 1),   strRunFile = poped.choose(popedInput$settings$run_file_pointer, \"\"),   poped_version = poped.choose(popedInput$settings$poped_version,     packageVersion(\"PopED\")),   modtit = poped.choose(popedInput$settings$modtit, \"PopED model\"),   output_file = poped.choose(popedInput$settings$output_file, paste(\"PopED_output\",     \"_summary\", sep = \"\")),   output_function_file = poped.choose(popedInput$settings$output_function_file,     paste(\"PopED\", \"_output_\", sep = \"\")),   strIterationFileName = poped.choose(popedInput$settings$strIterationFileName,     paste(\"PopED\", \"_current.R\", sep = \"\")),   user_data = poped.choose(popedInput$settings$user_data, cell(0, 0)),   ourzero = poped.choose(popedInput$settings$ourzero, 1e-05),   dSeed = poped.choose(popedInput$settings$dSeed, NULL),   line_opta = poped.choose(popedInput$settings$line_opta, NULL),   line_optx = poped.choose(popedInput$settings$line_optx, NULL),   bShowGraphs = poped.choose(popedInput$settings$bShowGraphs, FALSE),   use_logfile = poped.choose(popedInput$settings$use_logfile, FALSE),   m1_switch = poped.choose(popedInput$settings$m1_switch, 1),   m2_switch = poped.choose(popedInput$settings$m2_switch, 1),   hle_switch = poped.choose(popedInput$settings$hle_switch, 1),   gradff_switch = poped.choose(popedInput$settings$gradff_switch, 1),   gradfg_switch = poped.choose(popedInput$settings$gradfg_switch, 1),   grad_all_switch = poped.choose(popedInput$settings$grad_all_switch, 1),   rsit_output = poped.choose(popedInput$settings$rsit_output, 5),   sgit_output = poped.choose(popedInput$settings$sgit_output, 1),   hm1 = poped.choose(popedInput$settings[[\"hm1\"]], 1e-05),   hlf = poped.choose(popedInput$settings[[\"hlf\"]], 1e-05),   hlg = poped.choose(popedInput$settings[[\"hlg\"]], 1e-05),   hm2 = poped.choose(popedInput$settings[[\"hm2\"]], 1e-05),   hgd = poped.choose(popedInput$settings[[\"hgd\"]], 1e-05),   hle = poped.choose(popedInput$settings[[\"hle\"]], 1e-05),   AbsTol = poped.choose(popedInput$settings$AbsTol, 1e-06),   RelTol = poped.choose(popedInput$settings$RelTol, 1e-06),   iDiffSolverMethod = poped.choose(popedInput$settings$iDiffSolverMethod, NULL),   bUseMemorySolver = poped.choose(popedInput$settings$bUseMemorySolver, FALSE),   rsit = poped.choose(popedInput$settings[[\"rsit\"]], 300),   sgit = poped.choose(popedInput$settings[[\"sgit\"]], 150),   intrsit = poped.choose(popedInput$settings$intrsit, 250),   intsgit = poped.choose(popedInput$settings$intsgit, 50),   maxrsnullit = poped.choose(popedInput$settings$maxrsnullit, 50),   convergence_eps = poped.choose(popedInput$settings$convergence_eps, 1e-08),   rslxt = poped.choose(popedInput$settings$rslxt, 10),   rsla = poped.choose(popedInput$settings$rsla, 10),   cfaxt = poped.choose(popedInput$settings$cfaxt, 0.001),   cfaa = poped.choose(popedInput$settings$cfaa, 0.001),   bGreedyGroupOpt = poped.choose(popedInput$settings$bGreedyGroupOpt, FALSE),   EAStepSize = poped.choose(popedInput$settings$EAStepSize, 0.01),   EANumPoints = poped.choose(popedInput$settings$EANumPoints, FALSE),   EAConvergenceCriteria = poped.choose(popedInput$settings$EAConvergenceCriteria, 1e-20),   bEANoReplicates = poped.choose(popedInput$settings$bEANoReplicates, FALSE),   BFGSConvergenceCriteriaMinStep = NULL,   BFGSProjectedGradientTol = poped.choose(popedInput$settings$BFGSProjectedGradientTol,     1e-04),   BFGSTolerancef = poped.choose(popedInput$settings$BFGSTolerancef, 0.001),   BFGSToleranceg = poped.choose(popedInput$settings$BFGSToleranceg, 0.9),   BFGSTolerancex = poped.choose(popedInput$settings$BFGSTolerancex, 0.1),   ED_diff_it = poped.choose(popedInput$settings$ED_diff_it, 30),   ED_diff_percent = poped.choose(popedInput$settings$ED_diff_percent, 10),   line_search_it = poped.choose(popedInput$settings$ls_step_size, 50),   Doptim_iter = poped.choose(popedInput$settings$iNumSearchIterationsIfNotLineSearch, 1),   iCompileOption = poped.choose(popedInput$settings$parallel$iCompileOption, -1),   iUseParallelMethod = poped.choose(popedInput$settings$parallel$iUseParallelMethod, 1),   MCC_Dep = NULL,   strExecuteName = poped.choose(popedInput$settings$parallel$strExecuteName,     \"calc_fim.exe\"),   iNumProcesses = poped.choose(popedInput$settings$parallel$iNumProcesses, 2),   iNumChunkDesignEvals = poped.choose(popedInput$settings$parallel$iNumChunkDesignEvals,     -2),   Mat_Out_Pre = poped.choose(popedInput$settings$parallel$strMatFileOutputPrefix,     \"parallel_output\"),   strExtraRunOptions = poped.choose(popedInput$settings$parallel$strExtraRunOptions, \"\"),   dPollResultTime = poped.choose(popedInput$settings$parallel$dPollResultTime, 0.1),   strFunctionInputName = poped.choose(popedInput$settings$parallel$strFunctionInputName,     \"function_input\"),   bParallelRS = poped.choose(popedInput$settings$parallel$bParallelRS, FALSE),   bParallelSG = poped.choose(popedInput$settings$parallel$bParallelSG, FALSE),   bParallelMFEA = poped.choose(popedInput$settings$parallel$bParallelMFEA, FALSE),   bParallelLS = poped.choose(popedInput$settings$parallel$bParallelLS, FALSE) )"},{"path":"https://andrewhooker.github.io/PopED/reference/create.poped.database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PopED database — create.poped.database","text":"popedInput PopED database file empty list list().  List elements match values seen Usage section (defaults function arguments). ff_file ******START MODEL DEFINITION OPTIONS********** string giving function name filename path structural model. filename function name must giving filename. e.g. \"ff.PK.1.comp.oral.md.KE\" ff_fun Function describing structural model. e.g. ff.PK.1.comp.oral.md.KE. fg_file string giving function name filename path parameter model. filename function name must giving filename. e.g. \"parameter.model\" fg_fun Function describing parameter model. e.g. parameter.model. fError_file string giving function name filename path residual error model. filename function name must giving filename. e.g. \"feps.prop\". fError_fun Function describing residual error model. e.g. feps.prop. optsw ******OPTIMIZE********** Row vector optimization tasks (1=TRUE,0=FALSE) following order: (Samples per subject, Sampling schedule, Discrete design variable, Continuous design variable, Number id per group). elements set zero => calculate FIM current design xt ******START INITIAL DESIGN OPTIONS********** Matrix defining initial sampling schedule.  row group/individual.  one vector supplied, e.g. c(1,2,3,4), groups initial design. m Number groups study.  individual group design. x matrix defining initial discrete values model row group/individual. nx Number discrete design variables. Matrix defining initial continuous covariate values. n_rows=number groups, n_cols=number covariates. number rows one number groups > 1 groups assigned values. groupsize Vector defining size different groups (num individuals group). one number number every group. ni Vector defining number samples group. model_switch Matrix defining response certain sampling time belongs . maxni ******START DESIGN SPACE OPTIONS********** Max number samples per group/individual minni Min number samples per group/individual maxtotni Number defining maximum number samples allowed experiment. mintotni Number defining minimum number samples allowed experiment. maxgroupsize Vector defining max size different groups (max number individuals group) mingroupsize Vector defining min size different groups (min num individuals group) – maxtotgroupsize total maximal groupsize groups mintotgroupsize total minimal groupsize groups maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value discrete_xt Cell array cell defining discrete variables allowed xt value.  Can also list values list(1:10) (values allowed xt), list lists list(1:10, 2:23, 4:6) (one value xt). See examples create_design_space. discrete_x Cell array defining discrete variables x value. See examples create_design_space. maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value discrete_a Cell array cell defining discrete variables allowed value.  Can also list values list(1:10) (values allowed ), list lists list(1:10, 2:23, 4:6) (one value ). See examples create_design_space. bUseGrouped_xt Use grouped time points (1=TRUE, 0=FALSE). G_xt Matrix defining grouping sample points. Matching integers mean points matched. bUseGrouped_a Use grouped covariates (1=TRUE, 0=FALSE) G_a Matrix defining grouping covariates. Matching integers mean points matched. bUseGrouped_x Use grouped discrete design variables (1=TRUE, 0=FALSE). G_x Matrix defining grouping discrete design variables. Matching integers mean points matched. iFIMCalculationType ******START FIM CALCULATION OPTIONS********** Fisher Information Matrix type 0=Full FIM 1=Reduced FIM 2=weighted models 3=Loc models 4=reduced FIM derivative SD sigma PFIM 5=FULL FIM parameterized ,B,C matrices & derivative variance 6=Calculate one model switch time, good large matrices 7=Reduced FIM parameterized ,B,C matrices & derivative variance iApproximationMethod Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI iFOCENumInd Num individuals step FOCE prior_fim prior FIM (added calculated FIM) strAutoCorrelationFile Filename path, function name, Autocorrelation function, empty string means autocorrelation. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) ds_index Ds_index vector set 1 parameter uninteresting, otherwise 0. size=(1,num unfixed parameters). First unfixed bpop, unfixed d, unfixed docc last unfixed sigma. Default fixed effects important, everything else important.  Used conjunction ofv_calc_type=6. strEDPenaltyFile Penalty function name path filename, empty string means penalty. User defined criterion can defined way. ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . iEDCalculationType ******START E-FAMILY CRITERION SPECIFICATION OPTIONS********** ED Integral Calculation, 0=Monte-Carlo-Integration, 1=Laplace Approximation, 2=BFGS Laplace Approximation  – – ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – strUserDistributionFile Filename path, function name, user defined distributions E-family designs nbpop ******START Model parameters  SPECIFICATION OPTIONS********** Number typical values NumRanEff Number IIV parameters. Typically can computed values supplied. NumDocc Number IOV variance parameters. Typically can computed values supplied. NumOcc Number occasions. Typically can computed values supplied. bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. covd Column major vector defining covariances IIV variances. , full IIV matrix  covd <-  IIV[lower.tri(IIV)]. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). docc Matrix defining IOV, IOV variances IOV distribution d bpop. covdocc Column major vector defining covariance IOV, covd. notfixed_bpop ******START Model parameters fixed  SPECIFICATION OPTIONS********** Vector defining typical value fixed (1=fixed, 0=fixed). parameter order 'notfixed_bpop' defined 'fg_fun' 'fg_file'. use named arguments 'notfixed_bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. notfixed_d Vector defining IIV fixed (1=fixed, 0=fixed). parameter order 'notfixed_d' defined 'fg_fun' 'fg_file'. use named arguments 'notfixed_d' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. . notfixed_covd Vector defining covariance IIV fixed (1=fixed, 0=fixed) notfixed_docc Vector defining IOV variance fixed (1=fixed, 0=fixed) notfixed_covdocc Vector row major order lower triangular matrix defining covariance IOV fixed (1=fixed, 0=fixed) notfixed_sigma Vector defining residual error parameter fixed (1=fixed, 0=fixed) notfixed_covsigma Vector defining covariance residual error parameter fixed (1=fixed, 0=fixed). Default fixed. reorder_parameter_vectors use named arguments 'bpop' 'd' PopED try figure order parameters based found 'fg_fun'. See resulting `poped_db$parameters` make sure order matches 'fg_fun'. bUseRandomSearch ******START Optimization algorithm  SPECIFICATION OPTIONS********** Use random search (1=TRUE, 0=FALSE) bUseStochasticGradient Use Stochastic Gradient search (1=TRUE, 0=FALSE) bUseLineSearch Use Line search (1=TRUE, 0=FALSE) bUseExchangeAlgorithm Use Exchange algorithm (1=TRUE, 0=FALSE) bUseBFGSMinimizer Use BFGS Minimizer (1=TRUE, 0=FALSE) EACriteria Exchange Algorithm Criteria, 1 = Modified, 2 = Fedorov strRunFile Filename path, function name, run file used instead regular PopED call. poped_version ******START Labeling file names  SPECIFICATION OPTIONS********** current PopED version modtit model title output_file Filename path output file search output_function_file Filename suffix result function file strIterationFileName Filename path storage current optimal design user_data ******START Miscellaneous SPECIFICATION OPTIONS********** User defined data structure , example used send data model ourzero Value interpret zero design dSeed seed number used optimization sampling – integer -1 creates random seed .integer(Sys.time()) NULL. line_opta Vector line search continuous design variables (1=TRUE,0=FALSE) line_optx Vector line search discrete design variables (1=TRUE,0=FALSE) bShowGraphs Use graph output search use_logfile log file used (0=FALSE, 1=TRUE) m1_switch Method used calculate M1 (0=Complex difference, 1=Central difference, 20=Analytic derivative, 30=Automatic differentiation) m2_switch Method used calculate M2 (0=Central difference, 1=Central difference, 20=Analytic derivative, 30=Automatic differentiation) hle_switch Method used calculate linearization residual error (0=Complex difference, 1=Central difference, 30=Automatic differentiation) gradff_switch Method used calculate gradient model (0=Complex difference, 1=Central difference, 20=Analytic derivative, 30=Automatic differentiation) gradfg_switch Method used calculate gradient parameter vector g (0=Complex difference, 1=Central difference, 20=Analytic derivative, 30=Automatic differentiation) grad_all_switch Method used calculate gradients (0=Complex difference, 1=Central difference) rsit_output Number iterations random search screen output sgit_output Number iterations stochastic gradient search screen output hm1 Step length derivative linearized model w.r.t. typical values hlf Step length derivative model w.r.t. g hlg Step length derivative g w.r.t. b hm2 Step length derivative variance w.r.t. typical values hgd Step length derivative OFV w.r.t. time hle Step length derivative model w.r.t. sigma AbsTol absolute tolerance diff equation solver RelTol relative tolerance diff equation solver iDiffSolverMethod diff equation solver method, NULL default. bUseMemorySolver differential equation results stored memory (1) (0) rsit Number Random search iterations sgit Number stochastic gradient iterations intrsit Number Random search iterations discrete optimization. intsgit Number Stochastic Gradient search iterations discrete optimization maxrsnullit Iterations adaptive narrowing random search convergence_eps Stochastic Gradient convergence value, (difference OFV D-optimal, difference gradient ED-optimal) rslxt Random search locality factor sample times rsla Random search locality factor covariates cfaxt Stochastic Gradient search first step factor sample times cfaa Stochastic Gradient search first step factor covariates bGreedyGroupOpt Use greedy algorithm group assignment optimization EAStepSize Exchange Algorithm StepSize EANumPoints Exchange Algorithm NumPoints EAConvergenceCriteria Exchange Algorithm Convergence Limit/Criteria bEANoReplicates Avoid replicate samples using Exchange Algorithm BFGSConvergenceCriteriaMinStep BFGS Minimizer Convergence Criteria Minimum Step BFGSProjectedGradientTol BFGS Minimizer Convergence Criteria Normalized Projected Gradient Tolerance BFGSTolerancef BFGS Minimizer Line Search Tolerance f BFGSToleranceg BFGS Minimizer Line Search Tolerance g BFGSTolerancex BFGS Minimizer Line Search Tolerance x ED_diff_it Number iterations ED-optimal design calculate convergence criteria ED_diff_percent ED-optimal design convergence criteria percent line_search_it Number grid points line search Doptim_iter Number iterations full Random search full Stochastic Gradient line search used iCompileOption ******START PARALLEL OPTIONS********** Compile options PopED -1 = compilation, 0 3 = Full compilation, 1 4 = using MCC (shared lib), 2 5 = MPI, Option 0,1,2 runs PopED option 3,4,5 stops compilation iUseParallelMethod Parallel method use (0 = Matlab PCT, 1 = MPI) MCC_Dep Additional dependencies used MCC compilation (mat-files), several space separated strExecuteName Compilation output executable name iNumProcesses Number processes use running parallel (e.g. 3 = 2 workers, 1 job manager) iNumChunkDesignEvals Number design evaluations evaluated process getting new work job manager Mat_Out_Pre prefix output mat file communicate executable strExtraRunOptions Extra options send e$g. MPI executable batch script, see execute_parallel$m information options dPollResultTime Polling time check parallel execution finished strFunctionInputName file containing popedInput structure used evaluate designs bParallelRS random search going executed parallel bParallelSG stochastic gradient search going executed parallel bParallelMFEA modified exchange algorithm going executed parallel bParallelLS line search going executed parallel","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/create.poped.database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PopED database — create.poped.database","text":"PopED database","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/create.poped.database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a PopED database — create.poped.database","text":"","code":"## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])     return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(   ff_fun=ff.PK.1.comp.oral.sd.CL,   fg_fun=sfg,   fError_fun=feps.prop,   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),    notfixed_bpop=c(1,1,1,0),   d=c(CL=0.07, V=0.02, KA=0.6),    sigma=0.01,   groupsize=32,   xt=c( 0.5,1,2,6,24,36,72,120),   minxt=0,   maxxt=120,   a=70)   ## evaluate initial design evaluate_design(poped.db) #> $ofv #> [1] 52.44799 #>  #> $fim #>                     CL          V        KA         d_CL          d_V #> CL         19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000 #> V            -21.83655  20.656071 -1.807099 0.000000e+00     0.000000 #> KA            -8.62214  -1.807099 51.729039 0.000000e+00     0.000000 #> d_CL           0.00000   0.000000  0.000000 3.107768e+03    10.728786 #> d_V            0.00000   0.000000  0.000000 1.072879e+01 27307.089308 #> d_KA           0.00000   0.000000  0.000000 2.613561e-02     3.265608 #> SIGMA[1,1]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 #>                   d_KA   SIGMA[1,1] #> CL          0.00000000      0.00000 #> V           0.00000000      0.00000 #> KA          0.00000000      0.00000 #> d_CL        0.02613561    521.54030 #> d_V         3.26560786  11214.21071 #> d_KA       41.81083599     71.08764 #> SIGMA[1,1] 71.08763902 806176.95068 #>  #> $rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327  11.170784  #>"},{"path":"https://andrewhooker.github.io/PopED/reference/create_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create design variables for a full description of a design. — create_design","title":"Create design variables for a full description of a design. — create_design","text":"Create design variables fully describe design. variables supplied variables checked consistency , possible, changed sizes make sense inconsistencies. Returns list matricies compatible PopED.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/create_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create design variables for a full description of a design. — create_design","text":"","code":"create_design(   xt,   groupsize,   m = NULL,   x = NULL,   a = NULL,   ni = NULL,   model_switch = NULL )"},{"path":"https://andrewhooker.github.io/PopED/reference/create_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create design variables for a full description of a design. — create_design","text":"xt Matrix defining  sampling schedule. row group. groupsize Vector defining  size different groups (number individuals group). m number defining  number groups. Computed xt defined. x matrix defining  discrete design variables model row group. Matrix defining  continuous design variables. row group. ni Vector defining number samples group, computed elements xt group default. model_switch Matrix defining response certain sampling time belongs . Defaults one elements xt.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/create_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create design variables for a full description of a design. — create_design","text":"value (vector/list values) supplied corresponds one group design multiple groups groups value(s). matrix expected list lists can supplied instead, list corresponding group.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/create_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create design variables for a full description of a design. — create_design","text":"","code":"library(PopED)  xt1 <- list(c(1,2,3),c(1,2,3,4)) xt4 <- list(c(1,2,3,4,5),c(1,2,3,4)) xt2 <- rbind(c(1,2,3,4),c(1,2,3,4)) xt3 <- c(1,2,3,4)  design_1 <- create_design(xt=xt1,groupsize=20) design_2 <- create_design(xt=xt4,groupsize=20) design_3 <- create_design(xt=xt2,groupsize=20) design_4 <- create_design(xt=xt3,groupsize=20)  design_5 <- create_design(xt=xt3,groupsize=20,m=3)  design_6 <- create_design(xt=xt1,groupsize=20,model_switch=ones(2,4))  design_7 <-create_design(xt=xt1,groupsize=20,a=c(2,3,4)) design_8 <-create_design(xt=xt1,groupsize=20,a=rbind(c(2,3,4),c(4,5,6))) design_9 <-create_design(xt=xt1,groupsize=20,a=list(c(2,3,4,6),c(4,5,6))) design_10 <-create_design(xt=xt1,groupsize=20,a=list(c(2,3,4),c(4,5,6)))  design_11 <-create_design(xt=c(0,1,2,4,6,8,24),                          groupsize=50,                          a=c(WT=70,DOSE=1000))  design_12 <-create_design(xt=c(0,1,2,4,6,8,24),                          groupsize=50,                          a=c(WT=70,DOSE=1000),m=2)  design_13 <-create_design(xt=c(0,1,2,4,6,8,24),                          groupsize=50,                          a=list(c(WT=70,DOSE=1000),c(DOSE=90,WT=200,AGE=45)),m=2)  design_14 <-create_design(xt=c(0,1,2,4,6,8,24),                          groupsize=50,                          a=list(list(WT=70,DOSE=1000),list(DOSE=90,WT=200,AGE=45)),m=2)  design_15 <-create_design(xt=xt4,                           groupsize=c(50,20),                           a=rbind(c(\"DOSE\"=2,\"WT\"=3,\"AGE\"=4),                                   c(4,5,6)))"},{"path":"https://andrewhooker.github.io/PopED/reference/create_design_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Create design variables and a design space for a full description of an optimization problem. — create_design_space","title":"Create design variables and a design space for a full description of an optimization problem. — create_design_space","text":"create_design_space takes initial design arguments design space creates design design space design optimization. Checks sizes supplied design space variables changes sizes  make sense inconsistencies. Function arguments can use shorthand notation (single values, vectors, lists vectors list list) matricies. Returns list matricies compatible PopED.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/create_design_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create design variables and a design space for a full description of an optimization problem. — create_design_space","text":"","code":"create_design_space(   design,   maxni = NULL,   minni = NULL,   maxtotni = NULL,   mintotni = NULL,   maxgroupsize = NULL,   mingroupsize = NULL,   maxtotgroupsize = NULL,   mintotgroupsize = NULL,   maxxt = NULL,   minxt = NULL,   xt_space = NULL,   maxa = NULL,   mina = NULL,   a_space = NULL,   x_space = NULL,   use_grouped_xt = FALSE,   grouped_xt = NULL,   use_grouped_a = FALSE,   grouped_a = NULL,   use_grouped_x = FALSE,   grouped_x = NULL,   our_zero = NULL )"},{"path":"https://andrewhooker.github.io/PopED/reference/create_design_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create design variables and a design space for a full description of an optimization problem. — create_design_space","text":"design output call create_design. maxni Vector defining maximum number samples per group. minni Vector defining minimum number samples per group. maxtotni Number defining maximum number samples allowed experiment. mintotni Number defining minimum number samples allowed experiment. maxgroupsize Vector defining maximum size different groups (maximum number individuals group) mingroupsize Vector defining minimum size different groups (minimum num individuals group) maxtotgroupsize total maximal groupsize groups mintotgroupsize total minimal groupsize groups maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value xt_space Cell array cell defining discrete variables allowed xt value.  Can also vector values c(1:10) (values allowed xt), list lists list(1:10, 2:23, 4:6) (one value xt row major order just one row xt, rows duplicated). maxa Vector defining maximum value covariate. single value supplied values given maximum value mina Vector defining minimum value covariate. single value supplied values given minimum value a_space Cell array cell defining discrete variables allowed value.  Can also list values list(1:10) (values allowed ), list lists list(1:10, 2:23, 4:6) (one value ). x_space Cell array cell defining discrete variables x value. use_grouped_xt Group sampling times groups group values (TRUE FALSE). grouped_xt Matrix defining grouping sample points. Matching integers mean points matched. Allows finer control use_grouped_xt use_grouped_a Group continuous design variables groups group values (TRUE FALSE). grouped_a Matrix defining grouping continuous design variables. Matching integers mean values matched. Allows finer control use_grouped_a. use_grouped_x Group discrete design variables groups group values (TRUE FALSE). grouped_x Matrix defining grouping discrete design variables. Matching integers mean values matched. Allows finer control use_grouped_x. our_zero Value interpret zero design.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/create_design_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create design variables and a design space for a full description of an optimization problem. — create_design_space","text":"value (vector list values) supplied corresponds one group design multiple groups groups value(s). matrix expected list lists can supplied instead, list corresponding group.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/create_design_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create design variables and a design space for a full description of an optimization problem. — create_design_space","text":"","code":"library(PopED)  design_1 <- create_design(xt=list(c(1,2,3,4,5),                                   c(1,2,3,4)),                           groupsize=c(50,20),                           a=list(c(WT=70,DOSE=1000),                                  c(DOSE=1000,WT=35)))  ds_1 <- create_design_space(design_1)  ds_1_a <- create_design_space(design_1,our_zero = 1e-5)  ds_2 <- create_design_space(design_1,maxni=10,maxxt=10,minxt=0)  ds_3 <- create_design_space(design_1,maxni=10,mingroupsize=20,maxxt=10,minxt=0)  ds_4 <- create_design_space(design_1,maxa=c(100,2000))  ds_5 <- create_design_space(design_1,mina=c(10,20))  design_2 <- create_design(xt=list(c(1,2,3,4,5),                                   c(1,2,3,4)),                           groupsize=c(50,20),                           a=list(c(WT=70,DOSE=1000),                                  c(WT=35,DOSE=1000)),                           x=list(c(SEX=1,DOSE_discrete=100),                                  c(SEX=2,DOSE_discrete=200)))  ds_6 <- create_design_space(design_2)   ds_7 <- create_design_space(design_2,                             x_space=list(SEX=c(1,2),                                          DOSE_discrete=seq(100,400,by=20)))  ds_8 <- create_design_space(design_2,                             x_space=list(SEX=c(1,2),                                          DOSE_discrete=seq(100,400,by=20)),                             grouped_xt=c(1,2,3,4,5))  ds_9 <- create_design_space(design_2,                             x_space=list(SEX=c(1,2),                                          DOSE_discrete=seq(100,400,by=20)),                             use_grouped_xt=TRUE)  design_3 <- create_design(xt=list(c(1,2,3,4,5),                                   c(1,2,3,4)),                           groupsize=c(50,20),                           a=list(c(WT=35,DOSE=1000)),                           x=list(c(SEX=1,DOSE_discrete=100)))  ds_10 <- create_design_space(design_3,                              x_space=list(SEX=c(1,2),DOSE_discrete=seq(100,400,by=20)),                              use_grouped_a=TRUE)  ds_11 <- create_design_space(design_2,                              x_space=list(SEX=c(1,2),DOSE_discrete=seq(100,400,by=20)),                              grouped_a=list(c(1,2),c(3,2)))  ds_12 <- create_design_space(design_3,                              x_space=list(SEX=c(1,2),DOSE_discrete=seq(100,400,by=20)),                              use_grouped_x=TRUE)  ds_13 <- create_design_space(design_3,                              x_space=list(SEX=c(1,2),DOSE_discrete=seq(100,400,by=20)),                              grouped_x=list(c(1,2),c(3,2)))  seq_1 <- 1:10 ds_14 <- create_design_space(design_1,maxxt=10,minxt=0,                              xt_space = list(seq_1,seq_1,seq_1,seq_1,seq_1)) ds_15 <- create_design_space(design_1,maxxt=10,minxt=0,xt_space = list(seq_1))  possible_values <- as.matrix(cbind(list(0:10),list(0:10),list(0:10),list(0:20),list(0:20))) xt_space <- as.matrix(rbind(possible_values,possible_values))  ds_16 <- create_design_space(design_1,maxxt=10,minxt=0,xt_space = xt_space)  ds_17 <- create_design_space(design_1,a_space = list(1:100,seq(1000,100000,by=1000)))"},{"path":"https://andrewhooker.github.io/PopED/reference/design_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a summary of output from poped_db — design_summary","title":"Display a summary of output from poped_db — design_summary","text":"Display summary output poped_db","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/design_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a summary of output from poped_db — design_summary","text":"","code":"design_summary(poped_db, file = \"\", ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/design_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a summary of output from poped_db — design_summary","text":"poped_db object returned create.poped.database summarize. file file handle write .  Default R console. ... Additional arguments. Passed blockfinal.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/diag_matlab.html","id":null,"dir":"Reference","previous_headings":"","what":"Function written to match MATLAB's diag function — diag_matlab","title":"Function written to match MATLAB's diag function — diag_matlab","text":"differences tha MATLAB R version diag. Specifically, 1xN Nx1 matrix supplied R diag function just first element vector returned. function tries match MATLAB version handling vectors (matricies one dimension equal one), return diagonal matrix situations.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/diag_matlab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function written to match MATLAB's diag function — diag_matlab","text":"","code":"diag_matlab(mat)"},{"path":"https://andrewhooker.github.io/PopED/reference/diag_matlab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function written to match MATLAB's diag function — diag_matlab","text":"mat Either vector make diagonal matrix matrix want extract diagonal ","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/diag_matlab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function written to match MATLAB's diag function — diag_matlab","text":"Either diagonal matrix diagonal matrix.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/diag_matlab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function written to match MATLAB's diag function — diag_matlab","text":"","code":"diag_matlab(3) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 diag_matlab(c(1,2,3)) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    2    0 #> [3,]    0    0    3 diag_matlab(cbind(1,2,3)) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    2    0 #> [3,]    0    0    3 diag_matlab(rbind(1,2,3)) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    2    0 #> [3,]    0    0    3  diag_matlab(matrix(c(1, 2, 3),6,6)) #> [1] 1 2 3 1 2 3  # here is where the R default does something different diag(cbind(1,2,3)) #> [1] 1 diag(rbind(1,2,3)) #> [1] 1"},{"path":"https://andrewhooker.github.io/PopED/reference/downsizing_general_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsize a general design to a specific design — downsizing_general_design","title":"Downsize a general design to a specific design — downsizing_general_design","text":"Function takes design potentially empty design variables rescues design FIM can calculated using mftot.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/downsizing_general_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsize a general design to a specific design — downsizing_general_design","text":"","code":"downsizing_general_design(poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/downsizing_general_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsize a general design to a specific design — downsizing_general_design","text":"poped.db PopED database","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/downsizing_general_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsize a general design to a specific design — downsizing_general_design","text":"list containing: ni vector number samples group. xt matrix sample times.  row vector sample times group. model_switch matrix size xt, specifying model sample belongs . x matrix discrete design variables.  row group. matrix covariates.  row group. bpop matrix fixed effect parameter values.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ed_laplace_ofv.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","title":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","text":"Compute expectation det(FIM) using Laplace approximation expectation. Computations made based model, parameters, distributions parameter uncertainty, design methods defined PopED database arguments function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ed_laplace_ofv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","text":"","code":"ed_laplace_ofv(   model_switch,   groupsize,   ni,   xtopto,   xopto,   aopto,   bpopdescr,   ddescr,   covd,   sigma,   docc,   poped.db,   method = 1,   return_gradient = FALSE,   optxt = poped.db$settings$optsw[2],   opta = poped.db$settings$optsw[4],   x = c(),   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/ed_laplace_ofv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","text":"model_switch matrix size xt, specifying model sample belongs . groupsize vector number individuals group. ni vector number samples group. xtopto sampling times xopto discrete design variables aopto continuous design variables bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). covd Column major vector defining covariances IIV variances. , full IIV matrix  covd <-  IIV[lower.tri(IIV)]. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). docc Matrix defining IOV, IOV variances IOV distribution d bpop. poped.db PopED database. method 0 use optimization routine translated PopED code written MATLAB optimize parameters Laplace approximation.  1 use optim compute k hessian k (see Dodds et al, JPP, 2005 information). 2 use fdHess compute hessian. return_gradient gradient returned. optxt sampling times optimized opta continuous design variables optimized x design parameters compute gradient . ... Arguments passed functions, pass anything another function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ed_laplace_ofv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","text":"FIM hessian FIM.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ed_laplace_ofv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","text":"computation follows method outlined Dodds et al, \"Robust Population Pharmacokinetic Experiment Design\" JPP, 2005, equation 16. Typically function run user.  Instead use evaluate.e.ofv.fim.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ed_laplace_ofv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the expectation of determinant the Fisher Information Matrix (FIM) using the Laplace approximation. — ed_laplace_ofv","text":"","code":"## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error to  ##   avoid sample times at very low concentrations (time 0 or very late samoples). library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ###################### # Normal distribution ###################### bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_n <- cbind(ones(length(bpop_vals),1)*1, # normal distribution                         bpop_vals,                         ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_n[\"Favail\",]  <- c(0,1,0) bpop_vals_ed_n #>          bpop_vals          #> CL     1      0.15 0.000225 #> V      1      8.00 0.640000 #> KA     1      1.00 0.010000 #> Favail 0      1.00 0.000000  ## -- Define initial design  and design space poped.db.n <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                     fg_fun=sfg,                                     fError_fun=feps.add.prop,                                     bpop=bpop_vals_ed_n,                                      notfixed_bpop=c(1,1,1,0),                                     d=c(CL=0.07, V=0.02, KA=0.6),                                      sigma=c(0.01,0.25),                                     groupsize=32,                                     xt=c( 0.5,1,2,6,24,36,72,120),                                     minxt=0,                                     maxxt=120,                                     a=70,                                     mina=0,                                     maxa=100)   ## ED evaluate using LaPlace approximation  tic(); output <- evaluate.e.ofv.fim(poped.db.n,use_laplace=TRUE); toc() #> Elapsed time: 0.883 seconds. output$E_ofv #> [1] 1.331515e+24  if (FALSE) { # \\dontrun{         ## ED value using MC integration (roughly)   tic();e_ofv_mc_n <- evaluate.e.ofv.fim(poped.db.n,ED_samp_size=500,ofv_calc_type = 1);toc()   e_ofv_mc_n$E_ofv         ## Using ed_laplce_ofv directly   ed_laplace_ofv(model_switch=poped.db.n$design$model_switch,                  groupsize=poped.db.n$design$groupsize,                  ni=poped.db.n$design$ni,                  xtopto=poped.db.n$design$xt,                  xopto=poped.db.n$design$x,                  aopto=poped.db.n$design$a,                  bpopdescr=poped.db.n$parameters$bpop,                  ddescr=poped.db.n$parameters$d,                  covd=poped.db.n$parameters$covd,                  sigma=poped.db.n$parameters$sigma,                  docc=poped.db.n$parameters$docc,                   poped.db.n)         ######################   # Log-normal distribution   ######################      # Adding 10% log-normal Uncertainty to fixed effects (not Favail)   bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1)   bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                            bpop_vals,                            ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value   bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0)   bpop_vals_ed_ln      ## -- Define initial design  and design space   poped.db.ln <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                        fg_fun=sfg,                                        fError_fun=feps.add.prop,                                        bpop=bpop_vals_ed_ln,                                         notfixed_bpop=c(1,1,1,0),                                        d=c(CL=0.07, V=0.02, KA=0.6),                                         sigma=c(0.01,0.25),                                        groupsize=32,                                        xt=c( 0.5,1,2,6,24,36,72,120),                                        minxt=0,                                        maxxt=120,                                        a=70,                                        mina=0,                                        maxa=100)            ## ED evaluate using LaPlace approximation    tic()   output <- evaluate.e.ofv.fim(poped.db.ln,use_laplace=TRUE)   toc()   output$E_ofv      ## expected value (roughly)   tic()   e_ofv_mc_ln <- evaluate.e.ofv.fim(poped.db.ln,ED_samp_size=500,ofv_calc_type = 1)[[\"E_ofv\"]]   toc()   e_ofv_mc_ln      ## Using ed_laplce_ofv directly   ed_laplace_ofv(model_switch=poped.db.ln$design$model_switch,                  groupsize=poped.db.ln$design$groupsize,                  ni=poped.db.ln$design$ni,                  xtopto=poped.db.ln$design$xt,                  xopto=poped.db.ln$design$x,                  aopto=poped.db.ln$design$a,                  bpopdescr=poped.db.ln$parameters$bpop,                  ddescr=poped.db.ln$parameters$d,                  covd=poped.db.ln$parameters$covd,                  sigma=poped.db.ln$parameters$sigma,                  docc=poped.db.ln$parameters$docc,                   poped.db.ln)             } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/ed_mftot.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — ed_mftot","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — ed_mftot","text":"Compute expectation FIM given model, parameters, distributions parameter uncertainty, design methods defined PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ed_mftot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — ed_mftot","text":"","code":"ed_mftot(   model_switch,   groupsize,   ni,   xtoptn,   xoptn,   aoptn,   bpopdescr,   ddescr,   covd,   sigma,   docc,   poped.db,   calc_fim = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/ed_mftot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — ed_mftot","text":"model_switch matrix size xt, specifying model sample belongs . groupsize vector number individuals group. ni vector number samples group. xtoptn xtoptn value xoptn xoptn aoptn aoptn value bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). covd Column major vector defining covariances IIV variances. , full IIV matrix  covd <-  IIV[lower.tri(IIV)]. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). docc Matrix defining IOV, IOV variances IOV distribution d bpop. poped.db PopED database. calc_fim FIM calculated just use user defined ed_penalty_pointer. ... arguments passed function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ed_mftot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — ed_mftot","text":"list containing E(FIM) E(OFV(FIM)) poped.db.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ed_mftot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — ed_mftot","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error ## to avoid sample times at very low concentrations (time 0 or very late samoples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  # Adding 10% log-normal Uncertainty to fixed effects (not Favail) bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                          bpop_vals,                          ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0) bpop_vals_ed_ln #>          bpop_vals          #> CL     4      0.15 0.000225 #> V      4      8.00 0.640000 #> KA     4      1.00 0.010000 #> Favail 0      1.00 0.000000  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=bpop_vals_ed_ln,                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70,                                   mina=0,                                   maxa=100)  ############# END ################### ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################   # very few samples poped.db$settings$ED_samp_size=10 ed_mftot(model_switch=poped.db$design$model_switch,          groupsize=poped.db$design$groupsize,          ni=poped.db$design$ni,          xtoptn=poped.db$design$xt,          xoptn=poped.db$design$x,          aoptn=poped.db$design$a,          bpopdescr=poped.db$parameters$bpop,          ddescr=poped.db$parameters$d,          covd=poped.db$parameters$covd,          sigma=poped.db$parameters$sigma,          docc=poped.db$parameters$docc,           poped.db)[\"ED_ofv\"] #> $ED_ofv #> [1] 55.36459 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute efficiency. — efficiency","title":"Compute efficiency. — efficiency","text":"Efficiency calculation two designs.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute efficiency. — efficiency","text":"","code":"efficiency(   ofv_init,   ofv_final,   poped_db,   npar = get_fim_size(poped_db),   ofv_calc_type = poped_db$settings$ofv_calc_type,   ds_index = poped_db$parameters$ds_index,   use_log = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute efficiency. — efficiency","text":"ofv_init initial objective function ofv_final final objective function. poped_db poped database npar number parameters use normalization. ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) ds_index Ds_index vector set 1 parameter uninteresting, otherwise 0. size=(1,num unfixed parameters). First unfixed bpop, unfixed d, unfixed docc last unfixed sigma. Default fixed effects important, everything else important.  Used conjunction ofv_calc_type=6. use_log `ofv` arguments log space? ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute efficiency. — efficiency","text":"specified efficiency value depending ofv_calc_type. attribute \"description\" tells calculation made attr(return_vale,\"description\")","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.e.ofv.fim.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — evaluate.e.ofv.fim","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — evaluate.e.ofv.fim","text":"Compute expectation FIM OFV(FIM) given model, parameters, distributions parameter uncertainty, design methods defined PopED database. arguments coming PopED database can overwritten; default arguments NULL function, supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.e.ofv.fim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — evaluate.e.ofv.fim","text":"","code":"evaluate.e.ofv.fim(   poped.db,   fim.calc.type = NULL,   bpop = poped.db$parameters$bpop,   d = poped.db$parameters$d,   covd = poped.db$parameters$covd,   docc = poped.db$parameters$docc,   sigma = poped.db$parameters$sigma,   model_switch = NULL,   ni = NULL,   xt = NULL,   x = NULL,   a = NULL,   groupsize = poped.db$design$groupsize,   deriv.type = NULL,   bLHS = poped.db$settings$bLHS,   ofv_calc_type = poped.db$settings$ofv_calc_type,   ED_samp_size = poped.db$settings$ED_samp_size,   use_laplace = poped.db$settings$iEDCalculationType,   laplace.fim = FALSE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.e.ofv.fim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — evaluate.e.ofv.fim","text":"poped.db PopED database. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. covd Column major vector defining covariances IIV variances. , full IIV matrix  covd <-  IIV[lower.tri(IIV)]. docc Matrix defining IOV, IOV variances IOV distribution d bpop. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). model_switch matrix size xt, specifying model sample belongs . ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. groupsize vector number individuals group. deriv.type number indicating type derivative use: 0=Complex difference 1=Central difference 20=Analytic derivative (placeholder) 30=Automatic differentiation (placeholder) bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) ED_samp_size Sample size E-family sampling use_laplace Laplace method used calculating expectation OFV? laplace.fim E(FIM) calculated computing Laplace approximated E(OFV).  Typically FIM need computed , desired,  calculation done using standard MC integration technique, can slow. ... arguments passed function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.e.ofv.fim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — evaluate.e.ofv.fim","text":"list containing E(FIM) E(OFV(FIM)) poped.db updated according  function arguments.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.e.ofv.fim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the expectation of the Fisher Information Matrix (FIM) and the expectation of the OFV(FIM). — evaluate.e.ofv.fim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error ## to avoid sample times at very low concentrations (time 0 or very late samoples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  # Adding 10% log-normal Uncertainty to fixed effects (not Favail) bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                          bpop_vals,                          ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0) bpop_vals_ed_ln #>          bpop_vals          #> CL     4      0.15 0.000225 #> V      4      8.00 0.640000 #> KA     4      1.00 0.010000 #> Favail 0      1.00 0.000000  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=bpop_vals_ed_ln,                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70,                                   mina=0,                                   maxa=100)  ############# END ################### ## Create PopED database ## (warfarin model for optimization ##  with parameter uncertainty) #####################################   ## ED evaluate (with very few samples) output <- evaluate.e.ofv.fim(poped.db,ED_samp_size=10) output$E_ofv #> [1] 55.45214  ## API evaluate (with very few samples) output <- evaluate.e.ofv.fim(poped.db,ED_samp_size=10,ofv_calc_type=4) output$E_ofv #> [1] 55.46088  ## ED evaluate using Laplace approximation  tic() output <- evaluate.e.ofv.fim(poped.db,use_laplace=TRUE) toc() #> Elapsed time: 0.875 seconds. output$E_ofv #> [1] 1.302806e+24  if (FALSE) { # \\dontrun{    ## ED expected value with more precision.    ## Compare time and value to Laplace approximation.   ## Run a couple of times to see stochasticity of calculation.   tic()   e_ofv_mc <- evaluate.e.ofv.fim(poped.db,ED_samp_size=500)   toc()   e_ofv_mc$E_ofv      # If you want to get an E(FIM) from the laplace approximation you have to ask for it   # and it will take more time.   output <- evaluate.e.ofv.fim(poped.db,use_laplace=TRUE,laplace.fim=TRUE)   output$E_fim       } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.fim.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the Fisher Information Matrix (FIM) — evaluate.fim","title":"Evaluate the Fisher Information Matrix (FIM) — evaluate.fim","text":"Compute FIM given model, parameters, design methods defined PopED database. arguments coming PopED database can overwritten; default arguments NULL function, supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.fim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the Fisher Information Matrix (FIM) — evaluate.fim","text":"","code":"evaluate.fim(   poped.db,   fim.calc.type = NULL,   approx.method = NULL,   FOCE.num = NULL,   bpop.val = NULL,   d_full = NULL,   docc_full = NULL,   sigma_full = NULL,   model_switch = NULL,   ni = NULL,   xt = NULL,   x = NULL,   a = NULL,   groupsize = NULL,   deriv.type = NULL,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.fim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the Fisher Information Matrix (FIM) — evaluate.fim","text":"poped.db PopED database. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. approx.method Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI FOCE.num Number individuals step FOCE approximation method bpop.val fixed effects parameter values.  Supplied vector. d_full subject variability matrix (OMEGA NONMEM). docc_full occasion variability matrix. sigma_full residual unexplained variability matrix (SIGMA NONMEM). model_switch matrix size xt, specifying model sample belongs . ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. groupsize vector number individuals group. deriv.type number indicating type derivative use: 0=Complex difference 1=Central difference 20=Analytic derivative (placeholder) 30=Automatic differentiation (placeholder) ... arguments passed function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.fim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the Fisher Information Matrix (FIM) — evaluate.fim","text":"FIM.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate.fim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the Fisher Information Matrix (FIM) — evaluate.fim","text":"","code":"## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])     return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun = ff.PK.1.comp.oral.sd.CL,                                   fg_fun = sfg,                                   fError_fun = feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    # notfixed_bpop=c(1,1,1,0),                                   notfixed_bpop=c(CL=1,V=1,KA=1,Favail=0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=0.01,                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70)   ## evaluate initial design with the reduced FIM FIM.1 <- evaluate.fim(poped.db)  FIM.1 #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    521.54030 #> [5,]  11214.21071 #> [6,]     71.08764 #> [7,] 806176.95068 det(FIM.1) #> [1] 5.996147e+22 det(FIM.1)^(1/7) #> [1] 1794.658 get_rse(FIM.1,poped.db) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327  11.170784   ## evaluate initial design with the full FIM FIM.0 <- evaluate.fim(poped.db,fim.calc.type=0)  FIM.0 #>               [,1]         [,2]        [,3]          [,4]         [,5] #> [1,]  47625.234145  -341.996566   35.504624 -2.073844e+03 -5899.486674 #> [2,]   -341.996566    30.887205  -12.589615 -1.686280e+01   -54.629529 #> [3,]     35.504624   -12.589615  452.758773 -8.336530e-01   -43.619195 #> [4,]  -2073.844369   -16.862802   -0.833653  3.107768e+03    10.728786 #> [5,]  -5899.486674   -54.629529  -43.619195  1.072879e+01 27307.089308 #> [6,]      4.490538    -6.550313   18.653863  2.613561e-02     3.265608 #> [7,] -54419.723543 -1070.933661 2955.924225  5.215403e+02 11214.210707 #>             [,6]         [,7] #> [1,]  4.49053810 -54419.72354 #> [2,] -6.55031322  -1070.93366 #> [3,] 18.65386273   2955.92422 #> [4,]  0.02613561    521.54030 #> [5,]  3.26560786  11214.21071 #> [6,] 41.81083599     71.08764 #> [7,] 71.08763902 806176.95068 det(FIM.0) #> [1] 1.220371e+24 det(FIM.0)^(1/7) #> [1] 2760.117 get_rse(FIM.0,poped.db) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   3.560994   2.560413   4.811952  26.270324  30.901555  26.503936  12.409516   ## evaluate initial design with the reduced FIM  ## computing all derivatives with respect to the  ## standard deviation of the residual unexplained variation  FIM.4 <- evaluate.fim(poped.db,fim.calc.type=4)  FIM.4 #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 1.043081e+02  2242.842141 14.21752780 #>             [,7] #> [1,]     0.00000 #> [2,]     0.00000 #> [3,]     0.00000 #> [4,]   104.30806 #> [5,]  2242.84214 #> [6,]    14.21753 #> [7,] 32247.07803 det(FIM.4) #> [1] 2.398459e+21 get_rse(FIM.4,poped.db,fim.calc.type=4) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327   5.585392   ## evaluate initial design with the full FIM with A,B,C matricies ## should give same answer as fim.calc.type=0 FIM.5 <- evaluate.fim(poped.db,fim.calc.type=5)  FIM.5 #>               [,1]         [,2]        [,3]          [,4]         [,5] #> [1,]  47625.234145  -341.996566   35.504624 -2.073844e+03 -5899.486674 #> [2,]   -341.996566    30.887205  -12.589615 -1.686280e+01   -54.629529 #> [3,]     35.504624   -12.589615  452.758773 -8.336530e-01   -43.619195 #> [4,]  -2073.844369   -16.862802   -0.833653  3.107768e+03    10.728786 #> [5,]  -5899.486674   -54.629529  -43.619195  1.072879e+01 27307.089308 #> [6,]      4.490538    -6.550313   18.653863  2.613561e-02     3.265608 #> [7,] -54419.723543 -1070.933661 2955.924225  5.215403e+02 11214.210707 #>             [,6]         [,7] #> [1,]  4.49053810 -54419.72354 #> [2,] -6.55031322  -1070.93366 #> [3,] 18.65386273   2955.92422 #> [4,]  0.02613561    521.54030 #> [5,]  3.26560786  11214.21071 #> [6,] 41.81083599     71.08764 #> [7,] 71.08763902 806176.95068 det(FIM.5) #> [1] 1.220371e+24 get_rse(FIM.5,poped.db,fim.calc.type=5) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   3.560994   2.560413   4.811952  26.270324  30.901555  26.503936  12.409516   ## evaluate initial design with the reduced FIM with  ## A,B,C matricies and derivative of variance ## should give same answer as fim.calc.type=1 (default) FIM.7 <- evaluate.fim(poped.db,fim.calc.type=7)  FIM.7 #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    521.54030 #> [5,]  11214.21071 #> [6,]     71.08764 #> [7,] 806176.95068 det(FIM.7) #> [1] 5.996147e+22 get_rse(FIM.7,poped.db,fim.calc.type=7) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327  11.170784   ## evaluate FIM and rse with prior FIM.1 poped.db.prior = create.poped.database(poped.db, prior_fim = FIM.1) FIM.1.prior <- evaluate.fim(poped.db.prior) all.equal(FIM.1.prior,FIM.1) # the FIM is only computed from the design in the poped.db #> [1] TRUE get_rse(FIM.1.prior,poped.db.prior) # the RSE is computed with the prior information #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   3.350460   1.948932   9.847048  18.121170  21.456671  18.227322   7.898937"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a design — evaluate_design","title":"Evaluate a design — evaluate_design","text":"function evaluates design defined poped database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a design — evaluate_design","text":"","code":"evaluate_design(poped.db, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a design — evaluate_design","text":"poped.db poped database ... Extra parameters passed calc_ofv_and_fim get_rse","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a design — evaluate_design","text":"list elements evaluating current design.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a design — evaluate_design","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################  evaluate_design(poped.db) #> $ofv #> [1] 52.44799 #>  #> $fim #>                   CL          V        KA         d_CL          d_V        d_KA #> CL       19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> V          -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> KA          -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> d_CL         0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> d_V          0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> d_KA         0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> sig_prop     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              sig_prop #> CL            0.00000 #> V             0.00000 #> KA            0.00000 #> d_CL        521.54030 #> d_V       11214.21071 #> d_KA         71.08764 #> sig_prop 806176.95068 #>  #> $rse #>        CL         V        KA      d_CL       d_V      d_KA  sig_prop  #>  4.738266  2.756206 13.925829 25.627205 30.344316 25.777327 11.170784  #>"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_fim_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","title":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","text":"Computation Bayesian Fisher information matrix individual parameters population model based Maximum Posteriori (MAP) estimation empirical Bayes estimates (EBEs) population model","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_fim_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","text":"","code":"evaluate_fim_map(   poped.db,   use_mc = FALSE,   num_sim_ids = 1000,   use_purrr = FALSE,   shrink_mat = F )"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_fim_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","text":"poped.db PopED database use_mc calculation based monte-carlo simulations. first order approximation used num_sim_ids use_mc=TRUE, many individuals simulated make computations. use_purrr use_mc=TRUE method use package purrr calculations?  may speed computations (potentially). shrink_mat shrinkage matrix returned.  Calculated inverse  Bayesian Fisher information matrix times inverse omega matrix (variance matrix -subject variability).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_fim_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","text":"Bayesian Fisher information matrix design group","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_fim_map.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","text":"Combes, F. P., Retout, S.,   Frey, N., & Mentre, F. (2013). Prediction shrinkage individual   parameters using Bayesian information matrix non-linear mixed effect   models evaluation pharmacokinetics. Pharmaceutical Research, 30(9),   2355-67. doi:10.1007/s11095-013-1079-3 . Hennig, S., Nyberg, J., Fanta, S., Backman, J.   T., Hoppu, K., Hooker, . C., & Karlsson, M. O. (2012). Application   optimal design approach improve pretransplant drug dose finding design   ciclosporin. Journal Clinical Pharmacology, 52(3), 347-360.   doi:10.1177/0091270010397731 .","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_fim_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Bayesian Fisher information matrix — evaluate_fim_map","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################  shrinkage(poped.db) #> # A tibble: 3 × 5 #>     d_CL    d_V   d_KA type       group #>    <dbl>  <dbl>  <dbl> <chr>      <chr> #> 1 0.0244 0.174  0.0301 shrink_var grp_1 #> 2 0.0123 0.0910 0.0152 shrink_sd  grp_1 #> 3 0.0413 0.0590 0.134  se         grp_1"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Power of a design to estimate a parameter. — evaluate_power","title":"Power of a design to estimate a parameter. — evaluate_power","text":"Evaluate power design estimate parameter value different assumed value (often assumed value zero). power calculated using linear Wald test design defined poped database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power of a design to estimate a parameter. — evaluate_power","text":"","code":"evaluate_power(   poped.db,   bpop_idx,   h0 = 0,   alpha = 0.05,   power = 0.8,   twoSided = TRUE,   find_min_n = TRUE,   fim = NULL,   out = NULL,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power of a design to estimate a parameter. — evaluate_power","text":"poped.db poped database bpop_idx Index unfixed population parameter (bpop) power evaluated different null hypothesis (h0). h0 null hypothesized value parameter. alpha Type 1 error. power Targeted power. twoSided two-sided test. find_min_n function compute minimum n needed (given current design) achieve desired power? fim Provide FIM previous calculation provide output previous calculation (e.g., calc_ofv_and_fim, ...) ... Extra parameters passed calc_ofv_and_fim get_rse","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power of a design to estimate a parameter. — evaluate_power","text":"list elements evaluating current design including power.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_power.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power of a design to estimate a parameter. — evaluate_power","text":"Retout, S., Comets, E., Samson, ., Mentre,   F. (2007). Design nonlinear mixed effects models: Optimization using   Fedorov-Wynn algorithm power Wald test binary covariates.   Statistics Medicine, 26(28), 5162-5179.   doi:10.1002/sim.2910 . Ueckert, S., Hennig, S.,   Nyberg, J., Karlsson, M. O., Hooker, . C. (2013). Optimizing disease   progression study designs drug effect discrimination. Journal   Pharmacokinetics Pharmacodynamics, 40(5), 587-596.   doi:10.1007/s10928-013-9331-3 .","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/evaluate_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power of a design to estimate a parameter. — evaluate_power","text":"","code":"# Folowing the examples presented in Retout, 2007  ff <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{          lambda1 <- lam1a     if(TREAT==2) lambda1 <- lam1b          y=log10(P1*exp(-lambda1*xt)+P2*exp(-lam2*xt))          return(list(y=y,poped.db=poped.db))   }) }  sfg <- function(x,a,bpop,b,bocc){   parameters=c(P1=exp(bpop[1]+b[1]),                P2=exp(bpop[2]+b[2]),                lam1a=exp(bpop[3]+b[3]),                lam1b=exp(bpop[3]+bpop[4]+b[3]),                lam2=exp(bpop[5]+b[4]),                TREAT=a[1])   return(parameters)  }     poped.db <- create.poped.database(ff_fun = ff,                                   fg_fun = sfg,                                   fError_fun = feps.add,                                   bpop=c(P1=12, P2=8,                                          lam1=-0.7,beta=0,lam2=-3.0),                                   d=c(P1=0.3, P2=0.3,                                       lam1=0.3,lam2=0.3),                                    sigma=c(0.065^2),                                   groupsize=100,                                   m=2,                                   xt=c(1, 3, 7, 14, 28, 56),                                   minxt=0,                                   maxxt=100,                                   a=list(c(TREAT=1),c(TREAT=2)))  plot_model_prediction(poped.db)  evaluate_design(poped.db) #> $ofv #> [1] 74.52441 #>  #> $fim #>                    P1         P2       lam1       beta       lam2         d_P1 #> P1         611.712173 -12.723468 -24.210864 -12.105432  -5.109809 0.000000e+00 #> P2         -12.723468 580.838635 -16.202945  -8.101473 -39.342222 0.000000e+00 #> lam1       -24.210864 -16.202945 648.887538 324.443769  -6.742703 0.000000e+00 #> beta       -12.105432  -8.101473 324.443769 324.443769  -3.371351 0.000000e+00 #> lam2        -5.109809 -39.342222  -6.742703  -3.371351 643.716238 0.000000e+00 #> d_P1         0.000000   0.000000   0.000000   0.000000   0.000000 9.354418e+02 #> d_P2         0.000000   0.000000   0.000000   0.000000   0.000000 4.051226e-01 #> d_lam1       0.000000   0.000000   0.000000   0.000000   0.000000 1.465796e+00 #> d_lam2       0.000000   0.000000   0.000000   0.000000   0.000000 6.533664e-02 #> SIGMA[1,1]   0.000000   0.000000   0.000000   0.000000   0.000000 5.831126e+03 #>                    d_P2       d_lam1       d_lam2   SIGMA[1,1] #> P1            0.0000000    0.0000000 0.000000e+00        0.000 #> P2            0.0000000    0.0000000 0.000000e+00        0.000 #> lam1          0.0000000    0.0000000 0.000000e+00        0.000 #> beta          0.0000000    0.0000000 0.000000e+00        0.000 #> lam2          0.0000000    0.0000000 0.000000e+00        0.000 #> d_P1          0.4051226    1.4657963 6.533664e-02     5831.126 #> d_P2        843.4338997    0.6563403 3.869526e+00     8499.377 #> d_lam1        0.6563403 1052.6375905 1.136601e-01     1889.172 #> d_lam2        3.8695261    0.1136601 1.035926e+03     2335.057 #> SIGMA[1,1] 8499.3770552 1889.1722062 2.335057e+03 11411954.974 #>  #> $rse #>          P1          P2        lam1        beta        lam2        d_P1  #>  0.33728477  0.52006496  7.93579642  0.07851367  1.31669814 10.91610610  #>        d_P2      d_lam1      d_lam2  SIGMA[1,1]  #> 11.52111962 10.27552547 10.35895352  7.04673895  #>   poped.db_2 <- create.poped.database(poped.db,bpop=c(P1=12, P2=8,                                       lam1=-0.7,beta=0.262,lam2=-3.0))  plot_model_prediction(poped.db_2)  evaluate_design(poped.db_2) #> $ofv #> [1] 74.54742 #>  #> $fim #>                    P1         P2       lam1       beta       lam2         d_P1 #> P1         606.085238 -12.699077 -26.355895 -14.250463  -5.275413 0.000000e+00 #> P2         -12.699077 590.575904 -15.713924  -7.612451 -35.363100 0.000000e+00 #> lam1       -26.355895 -15.713924 647.696264 323.252495  -6.706096 0.000000e+00 #> beta       -14.250463  -7.612451 323.252495 323.252495  -3.334744 0.000000e+00 #> lam2        -5.275413 -35.363100  -6.706096  -3.334744 645.343254 0.000000e+00 #> d_P1         0.000000   0.000000   0.000000   0.000000   0.000000 9.184094e+02 #> d_P2         0.000000   0.000000   0.000000   0.000000   0.000000 4.034200e-01 #> d_lam1       0.000000   0.000000   0.000000   0.000000   0.000000 1.748333e+00 #> d_lam2       0.000000   0.000000   0.000000   0.000000   0.000000 6.967869e-02 #> SIGMA[1,1]   0.000000   0.000000   0.000000   0.000000   0.000000 6.355130e+03 #>                    d_P2       d_lam1       d_lam2   SIGMA[1,1] #> P1            0.0000000    0.0000000 0.000000e+00        0.000 #> P2            0.0000000    0.0000000 0.000000e+00        0.000 #> lam1          0.0000000    0.0000000 0.000000e+00        0.000 #> beta          0.0000000    0.0000000 0.000000e+00        0.000 #> lam2          0.0000000    0.0000000 0.000000e+00        0.000 #> d_P1          0.4034200    1.7483334 6.967869e-02     6355.130 #> d_P2        872.1867430    0.6179188 3.165957e+00     7662.896 #> d_lam1        0.6179188 1048.7796745 1.124327e-01     2004.881 #> d_lam2        3.1659566    0.1124327 1.041176e+03     2204.564 #> SIGMA[1,1] 7662.8956868 2004.8814970 2.204564e+03 11396938.075 #>  #> $rse #>         P1         P2       lam1       beta       lam2       d_P1       d_P2  #>  0.3388987  0.5155216  7.9357907 29.9948370  1.3144681 11.0205831 11.3204962  #>     d_lam1     d_lam2 SIGMA[1,1]  #> 10.2946096 10.3325268  7.0480557  #>   evaluate_power(poped.db_2,bpop_idx = 4) #> $ofv #> [1] 74.54742 #>  #> $fim #>             [,1]       [,2]       [,3]       [,4]       [,5]         [,6] #>  [1,] 606.085238 -12.699077 -26.355895 -14.250463  -5.275413 0.000000e+00 #>  [2,] -12.699077 590.575904 -15.713924  -7.612451 -35.363100 0.000000e+00 #>  [3,] -26.355895 -15.713924 647.696264 323.252495  -6.706096 0.000000e+00 #>  [4,] -14.250463  -7.612451 323.252495 323.252495  -3.334744 0.000000e+00 #>  [5,]  -5.275413 -35.363100  -6.706096  -3.334744 645.343254 0.000000e+00 #>  [6,]   0.000000   0.000000   0.000000   0.000000   0.000000 9.184094e+02 #>  [7,]   0.000000   0.000000   0.000000   0.000000   0.000000 4.034200e-01 #>  [8,]   0.000000   0.000000   0.000000   0.000000   0.000000 1.748333e+00 #>  [9,]   0.000000   0.000000   0.000000   0.000000   0.000000 6.967869e-02 #> [10,]   0.000000   0.000000   0.000000   0.000000   0.000000 6.355130e+03 #>               [,7]         [,8]         [,9]        [,10] #>  [1,]    0.0000000    0.0000000 0.000000e+00        0.000 #>  [2,]    0.0000000    0.0000000 0.000000e+00        0.000 #>  [3,]    0.0000000    0.0000000 0.000000e+00        0.000 #>  [4,]    0.0000000    0.0000000 0.000000e+00        0.000 #>  [5,]    0.0000000    0.0000000 0.000000e+00        0.000 #>  [6,]    0.4034200    1.7483334 6.967869e-02     6355.130 #>  [7,]  872.1867430    0.6179188 3.165957e+00     7662.896 #>  [8,]    0.6179188 1048.7796745 1.124327e-01     2004.881 #>  [9,]    3.1659566    0.1124327 1.041176e+03     2204.564 #> [10,] 7662.8956868 2004.8814970 2.204564e+03 11396938.075 #>  #> $rse #>         P1         P2       lam1       beta       lam2       d_P1       d_P2  #>  0.3388987  0.5155216  7.9357907 29.9948370  1.3144681 11.0205831 11.3204962  #>     d_lam1     d_lam2 SIGMA[1,1]  #> 10.2946096 10.3325268  7.0480557  #>  #> $power #>      Value      RSE power_pred power_want need_rse min_N_tot #> beta 0.262 29.99484   91.52704         80 35.69408       142 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/extract_norm_group_fim.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a normalized group FIM — extract_norm_group_fim","title":"Extract a normalized group FIM — extract_norm_group_fim","text":"Extract individual FIM group design","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/extract_norm_group_fim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a normalized group FIM — extract_norm_group_fim","text":"","code":"extract_norm_group_fim(poped.db, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/extract_norm_group_fim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a normalized group FIM — extract_norm_group_fim","text":"poped.db PopED database ... Arguments passed evaluate.fim","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/extract_norm_group_fim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a normalized group FIM — extract_norm_group_fim","text":"list FIMs, one group design.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.html","id":null,"dir":"Reference","previous_headings":"","what":"RUV model: Additive . — feps.add","title":"RUV model: Additive . — feps.add","text":"residual unexplained variability (RUV) model function encodes model described . function suitable input create.poped.database function using  fError_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RUV model: Additive . — feps.add","text":"","code":"feps.add(model_switch, xt, parameters, epsi, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RUV model: Additive . — feps.add","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. epsi matrix number rows xt vector, columns match numbers defined function. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RUV model: Additive . — feps.add","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RUV model: Additive . — feps.add","text":"","code":"library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.KE #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - KE))) * (exp(-KE *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05b02da60> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(KE=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.KE,                                   fg_fun=sfg,                                   fError_fun=feps.add,                                   bpop=c(KE=0.15/8, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(KE=0.07, V=0.02, KA=0.6),                                    sigma=1,                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70)  ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>             [,1]        [,2]       [,3]        [,4]        [,5]      [,6] #> [1,] 746643.9218 1031.526838 485.621863    0.000000     0.00000  0.000000 #> [2,]   1031.5268   16.667994  -3.901736    0.000000     0.00000  0.000000 #> [3,]    485.6219   -3.901736  47.787464    0.000000     0.00000  0.000000 #> [4,]      0.0000    0.000000   0.000000 1076.594563   374.07924  1.295445 #> [5,]      0.0000    0.000000   0.000000  374.079240 17780.60889 15.223541 #> [6,]      0.0000    0.000000   0.000000    1.295445    15.22354 35.681901 #> [7,]      0.0000    0.000000   0.000000   47.625531   142.44395  2.089439 #>            [,7] #> [1,]   0.000000 #> [2,]   0.000000 #> [3,]   0.000000 #> [4,]  47.625531 #> [5,] 142.443949 #> [6,]   2.089439 #> [7,]  86.372695 det(FIM) #> [1] 2.960928e+19 get_rse(FIM,poped.db) #>         KE          V         KA       d_KE        d_V       d_KA SIGMA[1,1]  #>   6.508287   3.248953  14.728214  44.184490  37.841158  27.924203  10.959023"},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.prop.html","id":null,"dir":"Reference","previous_headings":"","what":"RUV model: Additive and Proportional. — feps.add.prop","title":"RUV model: Additive and Proportional. — feps.add.prop","text":"residual unexplained variability (RUV) model function encodes model described . function suitable input create.poped.database function using  fError_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RUV model: Additive and Proportional. — feps.add.prop","text":"","code":"feps.add.prop(model_switch, xt, parameters, epsi, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RUV model: Additive and Proportional. — feps.add.prop","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. epsi matrix number rows xt vector, columns match numbers defined function. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RUV model: Additive and Proportional. — feps.add.prop","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/feps.add.prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RUV model: Additive and Proportional. — feps.add.prop","text":"","code":"library(PopED)  ## find the parameters that are needed to define in the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                 CL=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU=a[2])   return( parameters )  }  ## -- Define design and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.md.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   groupsize=20,                                   m=2,                                   sigma=c(0.04,5e-6),                                   bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9),                                    d=c(V=0.09,KA=0.09,CL=0.25^2),                                    notfixed_bpop=c(1,1,1,0),                                   notfixed_sigma=c(0,0),                                   xt=c( 1,2,8,240,245),                                   minxt=c(0,0,0,240,240),                                   maxxt=c(10,10,10,248,248),                                   a=cbind(c(20,40),c(24,24)),                                   bUseGrouped_xt=1,                                   maxa=c(200,24),                                   mina=c(0,24))  ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>             [,1]        [,2]         [,3]       [,4]       [,5]        [,6] #> [1,]  0.05336692   -8.683963  -0.05863412   0.000000   0.000000    0.000000 #> [2,] -8.68396266 2999.851007 -14.43058560   0.000000   0.000000    0.000000 #> [3,] -0.05863412  -14.430586  37.15243290   0.000000   0.000000    0.000000 #> [4,]  0.00000000    0.000000   0.00000000 999.953587 312.240246    3.202847 #> [5,]  0.00000000    0.000000   0.00000000 312.240246 439.412556    2.287838 #> [6,]  0.00000000    0.000000   0.00000000   3.202847   2.287838 3412.005199 det(FIM) #> [1] 3.627987e+12 get_rse(FIM,poped.db) #>         V        KA        CL       d_V      d_KA      d_CL  #>  8.215338 10.090955  4.400304 39.833230 60.089601 27.391518"},{"path":"https://andrewhooker.github.io/PopED/reference/feps.prop.html","id":null,"dir":"Reference","previous_headings":"","what":"RUV model: Proportional. — feps.prop","title":"RUV model: Proportional. — feps.prop","text":"residual unexplained variability (RUV) model function encodes model described . function suitable input create.poped.database function using  fError_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RUV model: Proportional. — feps.prop","text":"","code":"feps.prop(model_switch, xt, parameters, epsi, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/feps.prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RUV model: Proportional. — feps.prop","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. epsi matrix number rows xt vector, columns match numbers defined function. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feps.prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RUV model: Proportional. — feps.prop","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/feps.prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RUV model: Proportional. — feps.prop","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################   ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    521.54030 #> [5,]  11214.21071 #> [6,]     71.08764 #> [7,] 806176.95068 det(FIM) #> [1] 5.996147e+22 get_rse(FIM,poped.db) #>        CL         V        KA      d_CL       d_V      d_KA  sig_prop  #>  4.738266  2.756206 13.925829 25.627205 30.344316 25.777327 11.170784"},{"path":"https://andrewhooker.github.io/PopED/reference/feval.html","id":null,"dir":"Reference","previous_headings":"","what":"MATLAB feval function — feval","title":"MATLAB feval function — feval","text":"just wrapper .call function behave like feval function MATLAB.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MATLAB feval function — feval","text":"","code":"feval(file.name, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/feval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MATLAB feval function — feval","text":"file.name function string name function. ... Arguments function.  Multiple arguments separated comma.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/feval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MATLAB feval function — feval","text":"Output defined function.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/feval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MATLAB feval function — feval","text":"","code":"feval(\"sin\",pi/2) #> [1] 1"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.CL.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL. — ff.PK.1.comp.oral.md.CL","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL. — ff.PK.1.comp.oral.md.CL","text":"structural model function encodes  model one-compartment, oral absorption, multiple bolus dose, parameterized using CL. function suitable input create.poped.database function using  ff_fun ff_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.CL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL. — ff.PK.1.comp.oral.md.CL","text":"","code":"ff.PK.1.comp.oral.md.CL(model_switch, xt, parameters, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.CL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL. — ff.PK.1.comp.oral.md.CL","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.CL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL. — ff.PK.1.comp.oral.md.CL","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.CL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL. — ff.PK.1.comp.oral.md.CL","text":"","code":"library(PopED)  ## find the parameters that are needed to define in the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                 CL=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU=a[2])   return( parameters )  }  ## -- Define design and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.md.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   groupsize=20,                                   m=2,                                   sigma=c(0.04,5e-6),                                   bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9),                                    d=c(V=0.09,KA=0.09,CL=0.25^2),                                    notfixed_bpop=c(1,1,1,0),                                   notfixed_sigma=c(0,0),                                   xt=c( 1,2,8,240,245),                                   minxt=c(0,0,0,240,240),                                   maxxt=c(10,10,10,248,248),                                   a=cbind(c(20,40),c(24,24)),                                   bUseGrouped_xt=1,                                   maxa=c(200,24),                                   mina=c(0,24))  ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>             [,1]        [,2]         [,3]       [,4]       [,5]        [,6] #> [1,]  0.05336692   -8.683963  -0.05863412   0.000000   0.000000    0.000000 #> [2,] -8.68396266 2999.851007 -14.43058560   0.000000   0.000000    0.000000 #> [3,] -0.05863412  -14.430586  37.15243290   0.000000   0.000000    0.000000 #> [4,]  0.00000000    0.000000   0.00000000 999.953587 312.240246    3.202847 #> [5,]  0.00000000    0.000000   0.00000000 312.240246 439.412556    2.287838 #> [6,]  0.00000000    0.000000   0.00000000   3.202847   2.287838 3412.005199 det(FIM) #> [1] 3.627987e+12 get_rse(FIM,poped.db) #>         V        KA        CL       d_V      d_KA      d_CL  #>  8.215338 10.090955  4.400304 39.833230 60.089601 27.391518"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.KE.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using KE. — ff.PK.1.comp.oral.md.KE","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using KE. — ff.PK.1.comp.oral.md.KE","text":"structural model function encodes  model one-compartment, oral absorption, multiple bolus dose, parameterized using KE. function suitable input create.poped.database function using  ff_fun ff_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.KE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using KE. — ff.PK.1.comp.oral.md.KE","text":"","code":"ff.PK.1.comp.oral.md.KE(model_switch, xt, parameters, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.KE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using KE. — ff.PK.1.comp.oral.md.KE","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.KE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using KE. — ff.PK.1.comp.oral.md.KE","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.md.KE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using KE. — ff.PK.1.comp.oral.md.KE","text":"","code":"library(PopED)  ## find the parameters that are needed to define in the structural model ff.PK.1.comp.oral.md.KE #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - KE)) * (exp(-KE * (xt -  #>             (N - 1) * TAU)) * (1 - exp(-N * KE * TAU))/(1 - exp(-KE *  #>             TAU)) - exp(-KA * (xt - (N - 1) * TAU)) * (1 - exp(-N *  #>             KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05e014cb8> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   ## -- parameter definition function    parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                  KE=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU=a[2])   return( parameters )  }  ## -- Define design and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.md.KE,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   groupsize=20,                                   m=2,                                   sigma=c(0.04,5e-6),                                   bpop=c(V=72.8,KA=0.25,KE=3.75/72.8,Favail=0.9),                                    d=c(V=0.09,KA=0.09,KE=0.25^2),                                    notfixed_bpop=c(1,1,1,0),                                   notfixed_sigma=c(0,0),                                   xt=c( 1,2,8,240,245),                                   minxt=c(0,0,0,240,240),                                   maxxt=c(10,10,10,248,248),                                   a=cbind(c(20,40),c(24,24)),                                   bUseGrouped_xt=1,                                   maxa=c(200,40),                                   mina=c(0,2))  ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>             [,1]        [,2]         [,3]      [,4]     [,5]      [,6] #> [1,]  0.06138421   -6.369454     34.30738    0.0000   0.0000    0.0000 #> [2,] -6.36945403 3667.860710   9887.52379    0.0000   0.0000    0.0000 #> [3,] 34.30737724 9887.523789 145132.13111    0.0000   0.0000    0.0000 #> [4,]  0.00000000    0.000000      0.00000 1322.9667 167.9800  206.8939 #> [5,]  0.00000000    0.000000      0.00000  167.9800 656.8986  202.6588 #> [6,]  0.00000000    0.000000      0.00000  206.8939 202.6588 1853.6889 det(FIM) #> [1] 1.810534e+16 get_rse(FIM,poped.db) #>         V        KA        KE       d_V      d_KA      d_KE  #>  8.215338 10.090955  7.566975 31.220520 44.677836 38.005067"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.CL.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using CL. — ff.PK.1.comp.oral.sd.CL","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using CL. — ff.PK.1.comp.oral.sd.CL","text":"structural model function encodes  model one-compartment, oral absorption, single bolus dose, parameterized using CL. function suitable input create.poped.database function using  ff_fun ff_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.CL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using CL. — ff.PK.1.comp.oral.sd.CL","text":"","code":"ff.PK.1.comp.oral.sd.CL(model_switch, xt, parameters, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.CL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using CL. — ff.PK.1.comp.oral.sd.CL","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.CL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using CL. — ff.PK.1.comp.oral.sd.CL","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.CL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using CL. — ff.PK.1.comp.oral.sd.CL","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################   ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    521.54030 #> [5,]  11214.21071 #> [6,]     71.08764 #> [7,] 806176.95068 det(FIM) #> [1] 5.996147e+22 get_rse(FIM,poped.db) #>        CL         V        KA      d_CL       d_V      d_KA  sig_prop  #>  4.738266  2.756206 13.925829 25.627205 30.344316 25.777327 11.170784"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.KE.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using KE. — ff.PK.1.comp.oral.sd.KE","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using KE. — ff.PK.1.comp.oral.sd.KE","text":"structural model function encodes  model one-compartment, oral absorption, single bolus dose, parameterized using KE. function suitable input create.poped.database function using  ff_fun ff_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.KE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using KE. — ff.PK.1.comp.oral.sd.KE","text":"","code":"ff.PK.1.comp.oral.sd.KE(model_switch, xt, parameters, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.KE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using KE. — ff.PK.1.comp.oral.sd.KE","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.KE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using KE. — ff.PK.1.comp.oral.sd.KE","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PK.1.comp.oral.sd.KE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural model: one-compartment, oral absorption, single bolus dose, parameterized using KE. — ff.PK.1.comp.oral.sd.KE","text":"","code":"library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.KE #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - KE))) * (exp(-KE *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05b02da60> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(KE=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.KE,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(KE=0.15/8, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(KE=0.07, V=0.02, KA=0.6),                                    sigma=0.01,                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70)  ##  create plot of model without variability  plot_model_prediction(poped.db)   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>              [,1]       [,2]       [,3]         [,4]         [,5]       [,6] #> [1,] 1248651.3457 339.370439 144.758375    0.0000000     0.000000  0.0000000 #> [2,]     339.3704  20.724252  -1.777254    0.0000000     0.000000  0.0000000 #> [3,]     144.7584  -1.777254  51.742071    0.0000000     0.000000  0.0000000 #> [4,]       0.0000   0.000000   0.000000 3010.9773834    40.490260  0.1151092 #> [5,]       0.0000   0.000000   0.000000   40.4902598 27487.656006  3.1586320 #> [6,]       0.0000   0.000000   0.000000    0.1151092     3.158632 41.8319046 #> [7,]       0.0000   0.000000   0.000000  784.2206814 10869.344969 70.0662365 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    784.22068 #> [5,]  10869.34497 #> [6,]     70.06624 #> [7,] 807063.71904 det(FIM) #> [1] 3.690649e+24 get_rse(FIM,poped.db) #>         KE          V         KA       d_KE        d_V       d_KA SIGMA[1,1]  #>   4.784638   2.756206  13.925829  26.037875  30.238758  25.770773  11.163214"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.oral.md.CL.imax.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL driving an inhibitory IMAX model with a direct effect. — ff.PKPD.1.comp.oral.md.CL.imax","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL driving an inhibitory IMAX model with a direct effect. — ff.PKPD.1.comp.oral.md.CL.imax","text":"structural model function encodes model described . function suitable input create.poped.database function using  ff_fun ff_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.oral.md.CL.imax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL driving an inhibitory IMAX model with a direct effect. — ff.PKPD.1.comp.oral.md.CL.imax","text":"","code":"ff.PKPD.1.comp.oral.md.CL.imax(model_switch, xt, parameters, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.oral.md.CL.imax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL driving an inhibitory IMAX model with a direct effect. — ff.PKPD.1.comp.oral.md.CL.imax","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.oral.md.CL.imax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL driving an inhibitory IMAX model with a direct effect. — ff.PKPD.1.comp.oral.md.CL.imax","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.oral.md.CL.imax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural model: one-compartment, oral absorption, multiple bolus dose, parameterized using CL driving an inhibitory IMAX model with a direct effect. — ff.PKPD.1.comp.oral.md.CL.imax","text":"","code":"library(PopED)  ## find the parameters that are needed to define from the structural model ff.PKPD.1.comp.oral.md.CL.imax #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         MS <- model_switch #>         returnArgs = ff.PK.1.comp.oral.md.CL(model_switch, xt,  #>             parameters, poped.db) #>         CONC = returnArgs$y #>         EFF = E0 * (1 - CONC * IMAX/(IC50 + CONC)) #>         y[MS == 1] = CONC[MS == 1] #>         y[MS == 2] = EFF[MS == 2] #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c0551fb198> #> <environment: namespace:PopED> ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   ## -- parameter definition function    parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                 CL=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU = a[2],                 E0=bpop[5]*exp(b[4]),                 IMAX=bpop[6],                 IC50=bpop[7])   return( parameters )  }    feps <- function(model_switch,xt,parameters,epsi,poped.db){   ## -- Residual Error function   returnArgs <- do.call(poped.db$model$ff_pointer,list(model_switch,xt,parameters,poped.db))    y <- returnArgs[[1]]   poped.db <- returnArgs[[2]]      MS <- model_switch      pk.dv <- y*(1+epsi[,1])+epsi[,2]   pd.dv <-  y*(1+epsi[,3])+epsi[,4]      y[MS==1] = pk.dv[MS==1]   y[MS==2] = pd.dv[MS==2]      return(list( y= y,poped.db =poped.db ))  }   ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PKPD.1.comp.oral.md.CL.imax,                                   fError_fun=feps,                                   fg_fun=sfg,                                   groupsize=20,                                   m=3,                                   bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9,                                          E0=1120,IMAX=0.807,IC50=0.0993),                                     notfixed_bpop=c(1,1,1,0,1,1,1),                                   d=c(V=0.09,KA=0.09,CL=0.25^2,E0=0.09),                                    sigma=c(0.04,5e-6,0.09,100),                                   notfixed_sigma=c(0,0,0,0),                                   xt=c( 1,2,8,240,240,1,2,8,240,240),                                   minxt=c(0,0,0,240,240,0,0,0,240,240),                                   maxxt=c(10,10,10,248,248,10,10,10,248,248),                                   G_xt=c(1,2,3,4,5,1,2,3,4,5),                                   model_switch=c(1,1,1,1,1,2,2,2,2,2),                                   a=cbind(c(20,40,0),c(24,24,24)),                                   bUseGrouped_xt=1,                                   ourzero=0,                                   maxa=c(200,40),                                   mina=c(0,2))   ##  create plot of model without variability  plot_model_prediction(poped.db,facet_scales=\"free\")   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>                [,1]          [,2]          [,3]          [,4]          [,5] #>  [1,]  5.382083e-02   -8.55463620  -0.115087642  8.293963e-05    -0.2103527 #>  [2,] -8.554636e+00 3038.24916173 -14.769854387 -1.351406e-02   -69.0609684 #>  [3,] -1.150876e-01  -14.76985439  39.394916550  3.372827e-03    -7.0857453 #>  [4,]  8.293963e-05   -0.01351406   0.003372827  4.403253e-04    -0.4017382 #>  [5,] -2.103527e-01  -69.06096842  -7.085745293 -4.017382e-01   821.9499022 #>  [6,]  3.704090e-01    5.89767799  16.302391418  1.181080e+00 -1818.6277909 #>  [7,]  0.000000e+00    0.00000000   0.000000000  0.000000e+00     0.0000000 #>  [8,]  0.000000e+00    0.00000000   0.000000000  0.000000e+00     0.0000000 #>  [9,]  0.000000e+00    0.00000000   0.000000000  0.000000e+00     0.0000000 #> [10,]  0.000000e+00    0.00000000   0.000000000  0.000000e+00     0.0000000 #>               [,6]         [,7]       [,8]        [,9]        [,10] #>  [1,]     0.370409    0.0000000   0.000000    0.000000    0.0000000 #>  [2,]     5.897678    0.0000000   0.000000    0.000000    0.0000000 #>  [3,]    16.302391    0.0000000   0.000000    0.000000    0.0000000 #>  [4,]     1.181080    0.0000000   0.000000    0.000000    0.0000000 #>  [5,] -1818.627791    0.0000000   0.000000    0.000000    0.0000000 #>  [6,]  5030.928571    0.0000000   0.000000    0.000000    0.0000000 #>  [7,]     0.000000 1017.0362159 303.009671   12.339375    0.5721641 #>  [8,]     0.000000  303.0096709 450.738936    2.396824    0.1852950 #>  [9,]     0.000000   12.3393753   2.396824 3836.326713    2.5117794 #> [10,]     0.000000    0.5721641   0.185295    2.511779 2542.4091838 det(FIM) #> [1] 1.593643e+18 get_rse(FIM,poped.db) #>         V        KA        CL        E0      IMAX      IC50       d_V      d_KA  #>  8.119842  9.968612  4.304635  7.076883  9.895340 39.478269 38.960998 58.523188  #>      d_CL      d_E0  #> 25.832775 22.036110"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.sd.CL.emax.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural model: one-compartment, single bolus IV dose, parameterized using CL driving an EMAX model with a direct effect. — ff.PKPD.1.comp.sd.CL.emax","title":"Structural model: one-compartment, single bolus IV dose, parameterized using CL driving an EMAX model with a direct effect. — ff.PKPD.1.comp.sd.CL.emax","text":"structural model function encodes model described . function suitable input create.poped.database function using  ff_fun ff_file argument.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.sd.CL.emax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural model: one-compartment, single bolus IV dose, parameterized using CL driving an EMAX model with a direct effect. — ff.PKPD.1.comp.sd.CL.emax","text":"","code":"ff.PKPD.1.comp.sd.CL.emax(model_switch, xt, parameters, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.sd.CL.emax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural model: one-compartment, single bolus IV dose, parameterized using CL driving an EMAX model with a direct effect. — ff.PKPD.1.comp.sd.CL.emax","text":"model_switch vector values, size xt, identifying model response computed corresponding xt value.  Used multiple response models. xt vector independent variable values (often time). parameters named list parameter values. poped.db poped database.  can used extract information may needed model file.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.sd.CL.emax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural model: one-compartment, single bolus IV dose, parameterized using CL driving an EMAX model with a direct effect. — ff.PKPD.1.comp.sd.CL.emax","text":"list consisting : y values model specified points. poped.db (potentially modified) poped database.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ff.PKPD.1.comp.sd.CL.emax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural model: one-compartment, single bolus IV dose, parameterized using CL driving an EMAX model with a direct effect. — ff.PKPD.1.comp.sd.CL.emax","text":"","code":"library(PopED)  ## find the parameters that are needed to define from the structural model ff.PKPD.1.comp.sd.CL.emax #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         MS <- model_switch #>         CONC = DOSE/V * exp(-CL/V * xt) #>         EFF = E0 + CONC * EMAX/(EC50 + CONC) #>         y[MS == 1] = CONC[MS == 1] #>         y[MS == 2] = EFF[MS == 2] #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c0561cbdb0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   ## -- parameter definition function   parameters=c(      CL=bpop[1]*exp(b[1])  ,     V=bpop[2]*exp(b[2])  ,     E0=bpop[3]*exp(b[3])  ,     EMAX=bpop[4]*exp(b[4])  ,     EC50=bpop[5]*exp(b[5])  ,     DOSE=a[1]   )   return( parameters )  }  feps <- function(model_switch,xt,parameters,epsi,poped.db){   ## -- Residual Error function   ## -- Proportional PK + additive PD   returnArgs <- do.call(poped.db$model$ff_pointer,list(model_switch,xt,parameters,poped.db))    y <- returnArgs[[1]]   poped.db <- returnArgs[[2]]      MS <- model_switch      prop.err <- y*(1+epsi[,1])   add.err <- y+epsi[,2]      y[MS==1] = prop.err[MS==1]   y[MS==2] = add.err[MS==2]      return(list( y= y,poped.db =poped.db ))  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PKPD.1.comp.sd.CL.emax,                                   fError_fun=feps,                                   fg_fun=sfg,                                   groupsize=20,                                   m=3,                                   sigma=diag(c(0.15,0.15)),                                   bpop=c(CL=0.5,V=0.2,E0=1,EMAX=1,EC50=1),                                     d=c(CL=0.01,V=0.01,E0=0.01,EMAX=0.01,EC50=0.01),                                    xt=c( 0.33,0.66,0.9,5,0.1,1,2,5),                                   model_switch=c( 1,1,1,1,2,2,2,2),                                   minxt=0,                                   maxxt=5,                                   a=rbind(2.75,5,10),                                   bUseGrouped_xt=1,                                   maxa=10,                                   mina=0.1)   ##  create plot of model without variability  plot_model_prediction(poped.db,facet_scales=\"free\")   ## evaluate initial design FIM <- evaluate.fim(poped.db)  FIM #>               [,1]         [,2]      [,3]       [,4]       [,5]         [,6] #>  [1,]  13423.83149 -26148.43438 -104.9746  -55.87794   20.58619 0.000000e+00 #>  [2,] -26148.43438  70314.08833 -137.2793 -103.59890   26.32348 0.000000e+00 #>  [3,]   -104.97460   -137.27932 1209.7986  516.06655 -116.00915 0.000000e+00 #>  [4,]    -55.87794   -103.59890  516.0666  449.35861  -62.47406 0.000000e+00 #>  [5,]     20.58619     26.32348 -116.0092  -62.47406   22.73598 0.000000e+00 #>  [6,]      0.00000      0.00000    0.0000    0.00000    0.00000 9.385378e+04 #>  [7,]      0.00000      0.00000    0.0000    0.00000    0.00000 5.697839e+04 #>  [8,]      0.00000      0.00000    0.0000    0.00000    0.00000 2.298710e+01 #>  [9,]      0.00000      0.00000    0.0000    0.00000    0.00000 6.524561e+00 #> [10,]      0.00000      0.00000    0.0000    0.00000    0.00000 8.880407e-01 #> [11,]      0.00000      0.00000    0.0000    0.00000    0.00000 1.115568e+03 #> [12,]      0.00000      0.00000    0.0000    0.00000    0.00000 1.345372e+01 #>               [,7]         [,8]         [,9]       [,10]        [,11] #>  [1,] 0.000000e+00     0.000000    0.0000000   0.0000000    0.0000000 #>  [2,] 0.000000e+00     0.000000    0.0000000   0.0000000    0.0000000 #>  [3,] 0.000000e+00     0.000000    0.0000000   0.0000000    0.0000000 #>  [4,] 0.000000e+00     0.000000    0.0000000   0.0000000    0.0000000 #>  [5,] 0.000000e+00     0.000000    0.0000000   0.0000000    0.0000000 #>  [6,] 5.697839e+04    22.987097    6.5245606   0.8880407 1115.5680152 #>  [7,] 6.592095e+04     6.586597    3.6779636   0.2558559 1176.6041001 #>  [8,] 6.586597e+00 12197.738218 2243.7358555 112.3394149    4.8902658 #>  [9,] 3.677964e+00  2243.735855 1714.4795989  32.6395909    0.5891989 #> [10,] 2.558559e-01   112.339415   32.6395909   4.3373414    0.1964359 #> [11,] 1.176604e+03     4.890266    0.5891989   0.1964359 3811.1481605 #> [12,] 4.616968e+00  3055.546022 1230.5356715  65.5594938    3.8335502 #>             [,12] #>  [1,]    0.000000 #>  [2,]    0.000000 #>  [3,]    0.000000 #>  [4,]    0.000000 #>  [5,]    0.000000 #>  [6,]   13.453723 #>  [7,]    4.616968 #>  [8,] 3055.546022 #>  [9,] 1230.535671 #> [10,]   65.559494 #> [11,]    3.833550 #> [12,] 4658.810828 det(FIM) #> [1] 1.421054e+39 get_rse(FIM,poped.db) #>          CL           V          E0        EMAX        EC50        d_CL  #>    3.306524    3.610227    4.575451    6.825531   30.397923   47.350220  #>         d_V        d_E0      d_EMAX      d_EC50  SIGMA[1,1]  SIGMA[2,2]  #>   56.556024  113.036005  291.542904 5854.936456   10.829134   11.705173"},{"path":"https://andrewhooker.github.io/PopED/reference/fileparts.html","id":null,"dir":"Reference","previous_headings":"","what":"MATLAB fileparts function — fileparts","title":"MATLAB fileparts function — fileparts","text":"Get various parts file path string.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/fileparts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MATLAB fileparts function — fileparts","text":"","code":"fileparts(filename.with.path)"},{"path":"https://andrewhooker.github.io/PopED/reference/fileparts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MATLAB fileparts function — fileparts","text":"filename..path string filename path","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/fileparts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MATLAB fileparts function — fileparts","text":"list following components: pathname path name filename file name fileext file extension","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/fileparts.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"MATLAB fileparts function — fileparts","text":"modified version function matlab R-package.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/fileparts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MATLAB fileparts function — fileparts","text":"","code":"fileparts(\"ggg/ttt/lll.R\") #> $pathname #> [1] \"ggg/ttt\" #>  #> $filename #> [1] \"lll\" #>  #> $fileext #> [1] \".R\" #>"},{"path":"https://andrewhooker.github.io/PopED/reference/getTruncatedNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random sample from a truncated normal distribution. — getTruncatedNormal","title":"Generate a random sample from a truncated normal distribution. — getTruncatedNormal","text":"Generate random sample truncated normal distribution.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getTruncatedNormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random sample from a truncated normal distribution. — getTruncatedNormal","text":"","code":"getTruncatedNormal(mean, variance)"},{"path":"https://andrewhooker.github.io/PopED/reference/getTruncatedNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random sample from a truncated normal distribution. — getTruncatedNormal","text":"mean mean normal distribution variance variance normal distribution","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getTruncatedNormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random sample from a truncated normal distribution. — getTruncatedNormal","text":"random sample specified truncated normal distribution","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getTruncatedNormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a random sample from a truncated normal distribution. — getTruncatedNormal","text":"","code":"getTruncatedNormal(mean=3,variance=100) #>          [,1] #> [1,] 7.909153"},{"path":"https://andrewhooker.github.io/PopED/reference/get_all_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all model parameters from the PopED database. — get_all_params","title":"Extract all model parameters from the PopED database. — get_all_params","text":"Extract model parameters PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_all_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all model parameters from the PopED database. — get_all_params","text":"","code":"get_all_params(poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/get_all_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all model parameters from the PopED database. — get_all_params","text":"poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_all_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all model parameters from the PopED database. — get_all_params","text":"list containing: bpop vector fixed effect parameter values. d vector subject variability parameters covd vector covariances subject variability parameters.  Row major format lower triangular portion D (OMEGA) matrix docc vector occasion variability (BOV) terms model covdocc vector covariances BOV terms.  Row major lower triangular portion BOV matrix. sigma vector residual unexplained variances (RUV) covsigma vector covariances RUV terms vector , order list.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_all_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all model parameters from the PopED database. — get_all_params","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################   get_all_params(poped.db) #> $bpop #>        [,1] #> CL     0.15 #> V      8.00 #> KA     1.00 #> Favail 1.00 #>  #> $d #>    [,1] #> CL 0.07 #> V  0.02 #> KA 0.60 #>  #> $covd #>      [,1] [,2] [,3] #> [1,]    0    0    0 #>  #> $docc #>      [,1] #>  #> $covdocc #>      #> [1,] #>  #> $sigma #> [1] 0.01 #>  #> $covsigma #>      #> [1,] #>  #> $all #>       [,1] #>  [1,] 0.15 #>  [2,] 8.00 #>  [3,] 1.00 #>  [4,] 1.00 #>  [5,] 0.07 #>  [6,] 0.02 #>  [7,] 0.60 #>  [8,] 0.00 #>  [9,] 0.00 #> [10,] 0.00 #> [11,] 0.01 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/get_rse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the expected parameter relative standard errors — get_rse","title":"Compute the expected parameter relative standard errors — get_rse","text":"function  computes expected relative standard errors model given design previously computed FIM.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_rse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the expected parameter relative standard errors — get_rse","text":"","code":"get_rse(   fim,   poped.db,   bpop = poped.db$parameters$bpop[, 2],   d = poped.db$parameters$d[, 2],   docc = poped.db$parameters$docc,   sigma = poped.db$parameters$sigma,   use_percent = TRUE,   fim.calc.type = poped.db$settings$iFIMCalculationType,   prior_fim = poped.db$settings$prior_fim,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/get_rse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the expected parameter relative standard errors — get_rse","text":"fim Fisher Information Matrix (FIM). poped.db PopED database. bpop vector containing values fixed effects used compute fim. d vector containing values diagonals subject variability matrix. docc Matrix defining IOV, IOV variances IOV distribution d bpop. sigma Matrix defining variances can covariances residual variability terms model. can also just supply diagonal parameter values (variances) c(). use_percent RSE reported percent? fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. prior_fim prior FIM added fim. size fim. ... Additional arguments passed inv.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_rse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the expected parameter relative standard errors — get_rse","text":"named list RSE values.  estimated parameter assumed zero   parameter standard error returned.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/get_rse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the expected parameter relative standard errors — get_rse","text":"","code":"## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])     return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun = ff.PK.1.comp.oral.sd.CL,                                   fg_fun = sfg,                                   fError_fun = feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    # notfixed_bpop=c(1,1,1,0),                                   notfixed_bpop=c(CL=1,V=1,KA=1,Favail=0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=0.01,                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70)   ## evaluate initial design with the reduced FIM FIM.1 <- evaluate.fim(poped.db)  FIM.1 #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    521.54030 #> [5,]  11214.21071 #> [6,]     71.08764 #> [7,] 806176.95068 det(FIM.1) #> [1] 5.996147e+22 det(FIM.1)^(1/7) #> [1] 1794.658 get_rse(FIM.1,poped.db) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327  11.170784   ## evaluate initial design with the full FIM FIM.0 <- evaluate.fim(poped.db,fim.calc.type=0)  FIM.0 #>               [,1]         [,2]        [,3]          [,4]         [,5] #> [1,]  47625.234145  -341.996566   35.504624 -2.073844e+03 -5899.486674 #> [2,]   -341.996566    30.887205  -12.589615 -1.686280e+01   -54.629529 #> [3,]     35.504624   -12.589615  452.758773 -8.336530e-01   -43.619195 #> [4,]  -2073.844369   -16.862802   -0.833653  3.107768e+03    10.728786 #> [5,]  -5899.486674   -54.629529  -43.619195  1.072879e+01 27307.089308 #> [6,]      4.490538    -6.550313   18.653863  2.613561e-02     3.265608 #> [7,] -54419.723543 -1070.933661 2955.924225  5.215403e+02 11214.210707 #>             [,6]         [,7] #> [1,]  4.49053810 -54419.72354 #> [2,] -6.55031322  -1070.93366 #> [3,] 18.65386273   2955.92422 #> [4,]  0.02613561    521.54030 #> [5,]  3.26560786  11214.21071 #> [6,] 41.81083599     71.08764 #> [7,] 71.08763902 806176.95068 det(FIM.0) #> [1] 1.220371e+24 det(FIM.0)^(1/7) #> [1] 2760.117 get_rse(FIM.0,poped.db) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   3.560994   2.560413   4.811952  26.270324  30.901555  26.503936  12.409516   ## evaluate initial design with the reduced FIM  ## computing all derivatives with respect to the  ## standard deviation of the residual unexplained variation  FIM.4 <- evaluate.fim(poped.db,fim.calc.type=4)  FIM.4 #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 1.043081e+02  2242.842141 14.21752780 #>             [,7] #> [1,]     0.00000 #> [2,]     0.00000 #> [3,]     0.00000 #> [4,]   104.30806 #> [5,]  2242.84214 #> [6,]    14.21753 #> [7,] 32247.07803 det(FIM.4) #> [1] 2.398459e+21 get_rse(FIM.4,poped.db,fim.calc.type=4) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327   5.585392   ## evaluate initial design with the full FIM with A,B,C matricies ## should give same answer as fim.calc.type=0 FIM.5 <- evaluate.fim(poped.db,fim.calc.type=5)  FIM.5 #>               [,1]         [,2]        [,3]          [,4]         [,5] #> [1,]  47625.234145  -341.996566   35.504624 -2.073844e+03 -5899.486674 #> [2,]   -341.996566    30.887205  -12.589615 -1.686280e+01   -54.629529 #> [3,]     35.504624   -12.589615  452.758773 -8.336530e-01   -43.619195 #> [4,]  -2073.844369   -16.862802   -0.833653  3.107768e+03    10.728786 #> [5,]  -5899.486674   -54.629529  -43.619195  1.072879e+01 27307.089308 #> [6,]      4.490538    -6.550313   18.653863  2.613561e-02     3.265608 #> [7,] -54419.723543 -1070.933661 2955.924225  5.215403e+02 11214.210707 #>             [,6]         [,7] #> [1,]  4.49053810 -54419.72354 #> [2,] -6.55031322  -1070.93366 #> [3,] 18.65386273   2955.92422 #> [4,]  0.02613561    521.54030 #> [5,]  3.26560786  11214.21071 #> [6,] 41.81083599     71.08764 #> [7,] 71.08763902 806176.95068 det(FIM.5) #> [1] 1.220371e+24 get_rse(FIM.5,poped.db,fim.calc.type=5) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   3.560994   2.560413   4.811952  26.270324  30.901555  26.503936  12.409516   ## evaluate initial design with the reduced FIM with  ## A,B,C matricies and derivative of variance ## should give same answer as fim.calc.type=1 (default) FIM.7 <- evaluate.fim(poped.db,fim.calc.type=7)  FIM.7 #>             [,1]       [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 19821.28445 -21.836551 -8.622140 0.000000e+00     0.000000  0.00000000 #> [2,]   -21.83655  20.656071 -1.807099 0.000000e+00     0.000000  0.00000000 #> [3,]    -8.62214  -1.807099 51.729039 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000   0.000000  0.000000 3.107768e+03    10.728786  0.02613561 #> [5,]     0.00000   0.000000  0.000000 1.072879e+01 27307.089308  3.26560786 #> [6,]     0.00000   0.000000  0.000000 2.613561e-02     3.265608 41.81083599 #> [7,]     0.00000   0.000000  0.000000 5.215403e+02 11214.210707 71.08763902 #>              [,7] #> [1,]      0.00000 #> [2,]      0.00000 #> [3,]      0.00000 #> [4,]    521.54030 #> [5,]  11214.21071 #> [6,]     71.08764 #> [7,] 806176.95068 det(FIM.7) #> [1] 5.996147e+22 get_rse(FIM.7,poped.db,fim.calc.type=7) #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.738266   2.756206  13.925829  25.627205  30.344316  25.777327  11.170784   ## evaluate FIM and rse with prior FIM.1 poped.db.prior = create.poped.database(poped.db, prior_fim = FIM.1) FIM.1.prior <- evaluate.fim(poped.db.prior) all.equal(FIM.1.prior,FIM.1) # the FIM is only computed from the design in the poped.db #> [1] TRUE get_rse(FIM.1.prior,poped.db.prior) # the RSE is computed with the prior information #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   3.350460   1.948932   9.847048  18.121170  21.456671  18.227322   7.898937"},{"path":"https://andrewhooker.github.io/PopED/reference/get_unfixed_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all the unfixed parameters — get_unfixed_params","title":"Return all the unfixed parameters — get_unfixed_params","text":"= vector unfixed params var derivative vector 1 0, 1 means derivative parameter taken w.r.t. variance otherwise w.r.t. sd params supplied parameter taken vector instead poped.db","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_unfixed_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all the unfixed parameters — get_unfixed_params","text":"","code":"get_unfixed_params(poped.db, params = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/get_unfixed_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all the unfixed parameters — get_unfixed_params","text":"poped.db PopED database. params params supplied parameters taken vector.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/get_unfixed_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all the unfixed parameters — get_unfixed_params","text":"list  parameters.  unfixed parameters also   returned \"output specified order   (bpop,d,covd,docc,covdocc,sigma,covsigma). var_derivative    vector 1's 0's, 1 means derivative parameter taken respect   variance otherwise respect standard deviation.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getfulld.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a full D (between subject variability) matrix given a vector of variances and covariances. Note, this does not test matching vector lengths. — getfulld","title":"Create a full D (between subject variability) matrix given a vector of variances and covariances. Note, this does not test matching vector lengths. — getfulld","text":"Create full D (subject variability) matrix given vector variances covariances. Note, test matching vector lengths.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getfulld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a full D (between subject variability) matrix given a vector of variances and covariances. Note, this does not test matching vector lengths. — getfulld","text":"","code":"getfulld(variance_vector, covariance_vector = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/getfulld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a full D (between subject variability) matrix given a vector of variances and covariances. Note, this does not test matching vector lengths. — getfulld","text":"variance_vector vector variances. covariance_vector vector covariances. Written column major order lower triangular matrix.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getfulld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a full D (between subject variability) matrix given a vector of variances and covariances. Note, this does not test matching vector lengths. — getfulld","text":"full matrix variances subject variances","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/getfulld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a full D (between subject variability) matrix given a vector of variances and covariances. Note, this does not test matching vector lengths. — getfulld","text":"","code":"getfulld(c(1,2,3)) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    2    0 #> [3,]    0    0    3  getfulld(c(1,2,3),c(7,6,5)) #>      [,1] [,2] [,3] #> [1,]    1    7    6 #> [2,]    7    2    5 #> [3,]    6    5    3"},{"path":"https://andrewhooker.github.io/PopED/reference/gradf_eps.html","id":null,"dir":"Reference","previous_headings":"","what":"Model linearization with respect to epsilon. — gradf_eps","title":"Model linearization with respect to epsilon. — gradf_eps","text":"function performs linearization model respect residual variability. Derivative model w.r.t. eps evaluated eps=0 b=b_ind.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/gradf_eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model linearization with respect to epsilon. — gradf_eps","text":"","code":"gradf_eps(model_switch, xt_ind, x, a, bpop, b_ind, bocc_ind, num_eps, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/gradf_eps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model linearization with respect to epsilon. — gradf_eps","text":"model_switch matrix size xt, specifying model sample belongs . xt_ind vector individual/group sample times x matrix discrete design variables.  row group. matrix covariates.  row group. bpop fixed effects parameter values.  Supplied vector. b_ind vector individual realization BSV terms b bocc_ind Vector individual realizations BOV terms bocc num_eps number eps() model. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/gradf_eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model linearization with respect to epsilon. — gradf_eps","text":"matrix size (samples per individual x number epsilons)","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/gradf_eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model linearization with respect to epsilon. — gradf_eps","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   #for the FO approximation ind=1 gradf_eps(model_switch=t(poped.db$design$model_switch[ind,,drop=FALSE]),           xt_ind=t(poped.db$design$xt[ind,,drop=FALSE]),           x=zeros(0,1),           a=t(poped.db$design$a[ind,,drop=FALSE]),           bpop=poped.db$parameters$bpop[,2,drop=FALSE],           b_ind=zeros(poped.db$parameters$NumRanEff,1),           bocc_ind=zeros(poped.db$parameters$NumDocc,1),           num_eps=size(poped.db$parameters$sigma,1),           poped.db)[\"dfeps_de0\"] #> $dfeps_de0 #>           [,1] [,2] #> [1,] 3.4254357    1 #> [2,] 5.4711041    1 #> [3,] 7.3821834    1 #> [4,] 7.9462805    1 #> [5,] 5.6858561    1 #> [6,] 4.5402483    1 #> [7,] 2.3116966    1 #> [8,] 0.9398657    1 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/inv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inverse of a matrix — inv","title":"Compute the inverse of a matrix — inv","text":"Function computes inverse matrix.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/inv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inverse of a matrix — inv","text":"","code":"inv(mat, method = 1, tol = .Machine$double.eps, pseudo_on_fail = TRUE, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/inv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inverse of a matrix — inv","text":"mat matrix method method use. 1 Cholesky chol2inv(chol(mat), 2 using solve(mat) 3 Moore-Penrose generalized inverse (pseudoinverse). tol tolerance identify singular value zero (used pseudoinverse calculation). pseudo_on_fail another method fails Moore-Penrose generalized inverse (pseudoinverse) used? ... used.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/inv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inverse of a matrix — inv","text":"inverse matrix","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/isempty.html","id":null,"dir":"Reference","previous_headings":"","what":"Function written to match MATLAB's isempty function — isempty","title":"Function written to match MATLAB's isempty function — isempty","text":"Function written match MATLAB's isempty function","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/isempty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function written to match MATLAB's isempty function — isempty","text":"","code":"isempty(...)"},{"path":"https://andrewhooker.github.io/PopED/reference/isempty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function written to match MATLAB's isempty function — isempty","text":"... arguments pass function. Typically matrix.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/isempty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function written to match MATLAB's isempty function — isempty","text":"Logical. True passed object dimension zero.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/isempty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function written to match MATLAB's isempty function — isempty","text":"","code":"isempty(zeros(2,3)) #> [1] FALSE  isempty(zeros(2,0)) #> [1] TRUE  isempty(c(1,2,3)) #> [1] FALSE"},{"path":"https://andrewhooker.github.io/PopED/reference/log_prior_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the natural log of the PDF for the parameters in an E-family design — log_prior_pdf","title":"Compute the natural log of the PDF for the parameters in an E-family design — log_prior_pdf","text":"Compute natural log PDF parameters E-family design","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/log_prior_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the natural log of the PDF for the parameters in an E-family design — log_prior_pdf","text":"","code":"log_prior_pdf(   alpha,   bpopdescr,   ddescr,   return_gradient = F,   return_hessian = F )"},{"path":"https://andrewhooker.github.io/PopED/reference/log_prior_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the natural log of the PDF for the parameters in an E-family design — log_prior_pdf","text":"alpha parameter vector. bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). return_gradient gradient returned. return_hessian hessian returned?","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mc_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the monte-carlo mean of a function — mc_mean","title":"Compute the monte-carlo mean of a function — mc_mean","text":"Function computes monte-carlo mean function varying parameter inputs function","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mc_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the monte-carlo mean of a function — mc_mean","text":"","code":"mc_mean(   ofv_fcn,   poped.db,   bpopdescr = poped.db$parameters$bpop,   ddescr = poped.db$parameters$d,   doccdescr = poped.db$parameters$d,   user_distribution_pointer = poped.db$model$user_distribution_pointer,   ED_samp_size = poped.db$settings$ED_samp_size,   bLHS = poped.db$settings$bLHS,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/mc_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the monte-carlo mean of a function — mc_mean","text":"ofv_fcn function poped.db first input poped.db PopED database. bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). doccdescr Matrix defining IOV. per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean variance. column 3 defines variance distribution (length uniform distribution). user_distribution_pointer Function name user defined distributions E-family designs ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – ... arguments passed function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mc_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the monte-carlo mean of a function — mc_mean","text":"mean function evaluated different parameter values.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/median_hilow_poped.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap summary functions from Hmisc and ggplot to work with stat_summary in ggplot — median_hilow_poped","title":"Wrap summary functions from Hmisc and ggplot to work with stat_summary in ggplot — median_hilow_poped","text":"Created back compatibility older versions ggplot, PopED load ggplot started.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/median_hilow_poped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap summary functions from Hmisc and ggplot to work with stat_summary in ggplot — median_hilow_poped","text":"","code":"median_hilow_poped(x, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/median_hilow_poped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap summary functions from Hmisc and ggplot to work with stat_summary in ggplot — median_hilow_poped","text":"x numeric vector ... Additional arguments passed Hmisc's smedian.hilow function ggplot2's median_hilow function, depending version ggplot.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mf3.html","id":null,"dir":"Reference","previous_headings":"","what":"The Fisher Information Matrix (FIM) for one individual — mf3","title":"The Fisher Information Matrix (FIM) for one individual — mf3","text":"Compute FIM one individual given specific model(s), parameters, design methods.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mf3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Fisher Information Matrix (FIM) for one individual — mf3","text":"","code":"mf3(model_switch, xt, x, a, bpop, d, sigma, docc, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/mf3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Fisher Information Matrix (FIM) for one individual — mf3","text":"model_switch vector size xt, specifying model sample belongs . xt vector sample times. x vector discrete design variables. vector covariates. bpop fixed effects parameter values.  Supplied vector. d subject variability matrix (OMEGA NONMEM). sigma residual unexplained variability matrix (SIGMA NONMEM). docc occasion variability matrix. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mf3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Fisher Information Matrix (FIM) for one individual — mf3","text":"list: ret FIM one individual poped.db PopED database","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/mf7.html","id":null,"dir":"Reference","previous_headings":"","what":"The full Fisher Information Matrix (FIM) for one individual Calculating one model switch at a time, good for large matrices. — mf7","title":"The full Fisher Information Matrix (FIM) for one individual Calculating one model switch at a time, good for large matrices. — mf7","text":"Compute full FIM one individual given specific model(s), parameters, design methods. computation calculates FIM model switch separately.  Correlations models parameters assumed zero.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mf7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The full Fisher Information Matrix (FIM) for one individual Calculating one model switch at a time, good for large matrices. — mf7","text":"","code":"mf7(model_switch, xt_ind, x, a, bpop, d, sigma, docc, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/mf7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The full Fisher Information Matrix (FIM) for one individual Calculating one model switch at a time, good for large matrices. — mf7","text":"model_switch vector size xt, specifying model sample belongs . x vector discrete design variables. vector covariates. bpop fixed effects parameter values.  Supplied vector. d subject variability matrix (OMEGA NONMEM). sigma residual unexplained variability matrix (SIGMA NONMEM). docc occasion variability matrix. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mf7.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The full Fisher Information Matrix (FIM) for one individual Calculating one model switch at a time, good for large matrices. — mf7","text":"list: ret FIM one individual poped.db PopED database","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/mfea.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified Fedorov Exchange Algorithm — mfea","title":"Modified Fedorov Exchange Algorithm — mfea","text":"Optimize objective function using modified Fedorov exchange algorithm. function works continuous discrete optimization variables. function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mfea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified Fedorov Exchange Algorithm — mfea","text":"","code":"mfea(   poped.db,   model_switch,   ni,   xt,   x,   a,   bpopdescr,   ddescr,   maxxt,   minxt,   maxa,   mina,   fmf,   dmf,   EAStepSize = poped.db$settings$EAStepSize,   ourzero = poped.db$settings$ourzero,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   trflag = T,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/mfea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified Fedorov Exchange Algorithm — mfea","text":"poped.db PopED database. model_switch matrix size xt, specifying model sample belongs . ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. bpopdescr Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform, 3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). ddescr Matrix defining diagonals IIV (logic bpopdescr). maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value fmf initial value FIM. set zero computed. dmf initial OFV. set zero computed. EAStepSize Exchange Algorithm StepSize ourzero Value interpret zero design opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? trflag optimization output screen file? ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mfea.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modified Fedorov Exchange Algorithm — mfea","text":"J. Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C. Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models optimal design tool\", Computer Methods Programs Biomedicine, 108, 2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/mfea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified Fedorov Exchange Algorithm — mfea","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################  ############## # typically one will use poped_optimize  # This then calls mfea  ##############  # optimization of covariate, with coarse grid out_1 <- poped_optimize(poped.db,opt_a=1,                               bUseExchangeAlgorithm=1,                               EAStepSize=25,out_file = \"\") #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 55.3964 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Covariates #>  #> MFEA - It. : 1 #> MFEA - It. : 1 #> Exchanged covariate 1 in group/ind 1 from 70 to 100 #> Exchanged covariate 1 in group/ind 1 from 70 to 100 #> Delta : 0.0114735   OFV. : 56.032 #> Delta : 0.0114735   OFV. : 56.032 #> MFEA - It. : 2 #> MFEA - It. : 2 #> Delta : 0   OFV. : 56.032 #> Delta : 0   OFV. : 56.032 #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 100 #>  #> OFV = 56.032 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.0827 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07       0     0 #>          d_V     0.02      37    34 #>         d_KA      0.6       0     0 #>     sig_prop     0.01      32    23 #>      sig_add     0.25      26    30 #>  #> Total running time: 0.037 seconds   if (FALSE) { # \\dontrun{            # MFEA optimization with only integer times allowed   out_2 <- poped_optimize(poped.db,opt_xt=1,                                 bUseExchangeAlgorithm=1,                                 EAStepSize=1)   get_rse(out_2$fmf,out_2$poped.db)   plot_model_prediction(out_2$poped.db)         ##############   # If you really want to you can use mfea dirtectly   ##############   dsl <- downsizing_general_design(poped.db)      output <- mfea(poped.db,                  model_switch=dsl$model_switch,                  ni=dsl$ni,                  xt=dsl$xt,                  x=dsl$x,                  a=dsl$a,                  bpopdescr=dsl$bpop,                  ddescr=dsl$d,                  maxxt=dsl$maxxt,                  minxt=dsl$minxt,                  maxa=dsl$maxa,                  mina=dsl$mina,                  fmf=0,dmf=0,                  EAStepSize=1,                  opt_xt=1)       } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/mftot.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the Fisher Information Matrix (FIM) — mftot","title":"Evaluate the Fisher Information Matrix (FIM) — mftot","text":"Compute FIM given specific model(s), parameters, design methods.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mftot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the Fisher Information Matrix (FIM) — mftot","text":"","code":"mftot(   model_switch,   groupsize,   ni,   xt,   x,   a,   bpop,   d,   sigma,   docc,   poped.db,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/mftot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the Fisher Information Matrix (FIM) — mftot","text":"model_switch matrix size xt, specifying model sample belongs . groupsize vector number individuals group. ni vector number samples group. xt matrix sample times.  row vector sample times group. x matrix discrete design variables.  row group. matrix covariates.  row group. bpop fixed effects parameter values.  Supplied vector. d subject variability matrix (OMEGA NONMEM). sigma residual unexplained variability matrix (SIGMA NONMEM). docc occasion variability matrix. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/mftot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the Fisher Information Matrix (FIM) — mftot","text":"list: ret FIM poped.db PopED database","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/mftot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the Fisher Information Matrix (FIM) — mftot","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   mftot(model_switch=poped.db$design$model_switch,       groupsize=poped.db$design$groupsize,       ni=poped.db$design$ni,       xt=poped.db$design$xt,       x=poped.db$design$x,       a=poped.db$design$a,       bpop=poped.db$parameters$param.pt.val$bpop,       d=poped.db$parameters$param.pt.val$d,       sigma=poped.db$parameters$sigma,       docc=poped.db$parameters$param.pt.val$docc,       poped.db)[\"ret\"] #> $ret #>             [,1]      [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 17141.83891 20.838375 10.011000 0.000000e+00     0.000000  0.00000000 #> [2,]    20.83837 17.268051 -3.423641 0.000000e+00     0.000000  0.00000000 #> [3,]    10.01100 -3.423641 49.864697 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000  0.000000  0.000000 2.324341e+03     9.770352  0.03523364 #> [5,]     0.00000  0.000000  0.000000 9.770352e+00 19083.877564 11.72131703 #> [6,]     0.00000  0.000000  0.000000 3.523364e-02    11.721317 38.85137516 #> [7,]     0.00000  0.000000  0.000000 7.268410e+02  9656.158553 64.78095548 #> [8,]     0.00000  0.000000  0.000000 9.062739e+01   266.487127  2.94728469 #>              [,7]        [,8] #> [1,]      0.00000    0.000000 #> [2,]      0.00000    0.000000 #> [3,]      0.00000    0.000000 #> [4,]    726.84097   90.627386 #> [5,]   9656.15855  266.487127 #> [6,]     64.78096    2.947285 #> [7,] 192840.20092 6659.569867 #> [8,]   6659.56987  475.500111 #>"},{"path":"https://andrewhooker.github.io/PopED/reference/model_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions — model_prediction","title":"Model predictions — model_prediction","text":"Function generates data frame model predictions typical value population, individual predictions data predictions.  function can also used generate datasets without predictions using design specified arguments.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/model_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions — model_prediction","text":"","code":"model_prediction(   poped.db = NULL,   design = list(xt = poped.db$design[[\"xt\"]], groupsize = poped.db$design$groupsize, m =     poped.db$design[[\"m\"]], x = poped.db$design[[\"x\"]], a = poped.db$design[[\"a\"]], ni =     poped.db$design$ni, model_switch = poped.db$design$model_switch),   model = list(fg_pointer = poped.db$model$fg_pointer, ff_pointer =     poped.db$model$ff_pointer, ferror_pointer = poped.db$model$ferror_pointer),   parameters = list(docc = poped.db$parameters$docc, d = poped.db$parameters$d, bpop =     poped.db$parameters$bpop, covd = poped.db$parameters$covd, covdocc =     poped.db$parameters$covdocc, sigma = poped.db$parameters$sigma),   IPRED = FALSE,   DV = FALSE,   dosing = NULL,   predictions = NULL,   filename = NULL,   models_to_use = \"all\",   model_num_points = NULL,   model_minxt = NULL,   model_maxxt = NULL,   include_sample_times = T,   groups_to_use = \"all\",   include_a = TRUE,   include_x = TRUE,   manipulation = NULL,   PI = FALSE,   PI_conf_level = 0.95,   PI_ln_dist = TRUE )"},{"path":"https://andrewhooker.github.io/PopED/reference/model_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions — model_prediction","text":"poped.db PopED database created create.poped.database. design list passed arguments function create_design create design object. model list containing model elements use predictions parameters list parameters use model predictions. IPRED simulate individual predictions? DV simulate observations? dosing list lists adds dosing records data frame (inner list corresponding group design). predictions resulting data frame predictions?  Either TRUE FALSE NULL case function decides based arguments. filename filename data frame written comma separate value (csv) format. models_to_use model numbers use? Model numbers defined design using model_switch. explanation see create_design. model_num_points many extra observation rows created data frame group individual per model.  used points placed evenly model_minxt model_maxxt. option used plot_model_prediction simulate response model finer grid defined design. NULL input design used.  Can single value vector length number models. model_minxt minimum time value extra observation rows indicated model_num_points. vector length number models model_maxxt minimum time value extra observation rows indicated model_num_points. vector length number models include_sample_times observations rows output data frame include times indicated input design? groups_to_use groups include output data frame?Allowed values \"\" vector numbers indicating groups include, e.g. c(1,3,6). include_a include continuous design variables output? include_x include discrete design variables output? manipulation list one expression arguments.  expression evaluated using code (1:length(manipulation)){df <- within(df,{eval(manipulation[[]])})}. Can used transform create new columns resulting data frame. Note transformations created model predictions occur, transformations columns input model predictions  affect predictions. PI Compute prediction intervals data given model.  Predictions based first-order approximations model variance log-normality assumption variance (default), predictions positive, otherwise normal distribution assumed. PI_conf_level confidence level prediction interval computed. PI_ln_dist PI calculation done assuming log-normal normal distribution. TRUE default indicates log-normal distribution. PRED values model negative normal distribution assumed.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/model_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions — model_prediction","text":"dataframe containing design (potentially) simulated data dense grid samples /based input design.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/model_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions — model_prediction","text":"","code":"## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])     return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=0.01,                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0,                                   maxxt=120,                                   a=70)  ## data frame with model predictions df_1 <- model_prediction(poped.db) head(df_1,n=20) #>    Time      PRED Group Model a_i #> 1   0.5 3.4254357     1     1  70 #> 2   1.0 5.4711041     1     1  70 #> 3   2.0 7.3821834     1     1  70 #> 4   6.0 7.9462805     1     1  70 #> 5  24.0 5.6858561     1     1  70 #> 6  36.0 4.5402483     1     1  70 #> 7  72.0 2.3116966     1     1  70 #> 8 120.0 0.9398657     1     1  70  ##  data frame with variability  df_2 <- model_prediction(poped.db,DV=TRUE) head(df_2,n=20) #>    ID  Time         DV    IPRED      PRED Group Model a_i #> 1   1   0.5  2.3800236 2.352885 3.4254357     1     1  70 #> 2   1   1.0  4.2029869 4.167358 5.4711041     1     1  70 #> 3   1   2.0  6.0250484 6.628460 7.3821834     1     1  70 #> 4   1   6.0 10.6003247 9.428073 7.9462805     1     1  70 #> 5   1  24.0  7.3829039 7.111946 5.6858561     1     1  70 #> 6   1  36.0  5.1180355 5.665993 4.5402483     1     1  70 #> 7   1  72.0  2.6919875 2.865000 2.3116966     1     1  70 #> 8   1 120.0  1.1947993 1.154134 0.9398657     1     1  70 #> 9   2   0.5  2.5705709 2.416020 3.4254357     1     1  70 #> 10  2   1.0  4.7509404 4.166896 5.4711041     1     1  70 #> 11  2   2.0  5.7171194 6.334689 7.3821834     1     1  70 #> 12  2   6.0  7.6625930 8.183819 7.9462805     1     1  70 #> 13  2  24.0  6.5161958 6.013418 5.6858561     1     1  70 #> 14  2  36.0  4.9060740 4.806975 4.5402483     1     1  70 #> 15  2  72.0  2.4332146 2.455401 2.3116966     1     1  70 #> 16  2 120.0  0.9933456 1.002590 0.9398657     1     1  70 #> 17  3   0.5  5.4419156 5.831451 3.4254357     1     1  70 #> 18  3   1.0  8.0770953 8.064518 5.4711041     1     1  70 #> 19  3   2.0 10.1800510 9.125600 7.3821834     1     1  70 #> 20  3   6.0  8.6966384 8.472325 7.9462805     1     1  70  ## data frame with variability (only IPRED, no DV) df_3 <- model_prediction(poped.db,IPRED=TRUE) head(df_3,n=20) #>    ID  Time    IPRED      PRED Group Model a_i #> 1   1   0.5 1.331747 3.4254357     1     1  70 #> 2   1   1.0 2.425106 5.4711041     1     1  70 #> 3   1   2.0 4.053278 7.3821834     1     1  70 #> 4   1   6.0 6.564106 7.9462805     1     1  70 #> 5   1  24.0 5.606070 5.6858561     1     1  70 #> 6   1  36.0 4.652204 4.5402483     1     1  70 #> 7   1  72.0 2.657258 2.3116966     1     1  70 #> 8   1 120.0 1.259309 0.9398657     1     1  70 #> 9   2   0.5 5.041980 3.4254357     1     1  70 #> 10  2   1.0 7.300742 5.4711041     1     1  70 #> 11  2   2.0 8.723086 7.3821834     1     1  70 #> 12  2   6.0 8.731333 7.9462805     1     1  70 #> 13  2  24.0 7.192552 5.6858561     1     1  70 #> 14  2  36.0 6.320159 4.5402483     1     1  70 #> 15  2  72.0 4.288082 2.3116966     1     1  70 #> 16  2 120.0 2.556484 0.9398657     1     1  70 #> 17  3   0.5 1.373968 3.4254357     1     1  70 #> 18  3   1.0 2.497014 5.4711041     1     1  70 #> 19  3   2.0 4.156027 7.3821834     1     1  70 #> 20  3   6.0 6.602481 7.9462805     1     1  70  ## data frame with model predictions, no continuous design variables in data frame df_4 <- model_prediction(poped.db,include_a = FALSE) head(df_4,n=20) #>    Time      PRED Group Model #> 1   0.5 3.4254357     1     1 #> 2   1.0 5.4711041     1     1 #> 3   2.0 7.3821834     1     1 #> 4   6.0 7.9462805     1     1 #> 5  24.0 5.6858561     1     1 #> 6  36.0 4.5402483     1     1 #> 7  72.0 2.3116966     1     1 #> 8 120.0 0.9398657     1     1  ## -- 2 groups poped.db.2 <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                     fg_fun=sfg,                                     fError_fun=feps.prop,                                     bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                      notfixed_bpop=c(1,1,1,0),                                     d=c(CL=0.07, V=0.02, KA=0.6),                                      sigma=0.01,                                     groupsize=rbind(3,3),                                     m=2,                                     xt=c( 0.5,1,2,6,24,36,72,120),                                     minxt=0,                                     maxxt=120,                                     a=rbind(70,50))  df_5 <- model_prediction(poped.db.2,DV=TRUE) head(df_5,n=20) #>    ID  Time        DV     IPRED      PRED Group Model a_i #> 1   1   0.5 1.8824573 2.6986425 3.4254357     1     1  70 #> 2   1   1.0 4.4606407 4.5224462 5.4711041     1     1  70 #> 3   1   2.0 6.1021726 6.5605583 7.3821834     1     1  70 #> 4   1   6.0 8.0079320 7.7839864 7.9462805     1     1  70 #> 5   1  24.0 5.9242971 5.5574735 5.6858561     1     1  70 #> 6   1  36.0 4.1273096 4.4035807 4.5402483     1     1  70 #> 7   1  72.0 2.2569618 2.1907440 2.3116966     1     1  70 #> 8   1 120.0 0.7775830 0.8635865 0.9398657     1     1  70 #> 9   2   0.5 1.3147314 1.2950745 3.4254357     1     1  70 #> 10  2   1.0 2.3422395 2.3370827 5.4711041     1     1  70 #> 11  2   2.0 3.9529858 3.8424651 7.3821834     1     1  70 #> 12  2   6.0 6.6757835 5.9423279 7.9462805     1     1  70 #> 13  2  24.0 6.2962206 4.7862925 5.6858561     1     1  70 #> 14  2  36.0 3.9901656 3.8830024 4.5402483     1     1  70 #> 15  2  72.0 1.9881554 2.0728924 2.3116966     1     1  70 #> 16  2 120.0 0.8062582 0.8976806 0.9398657     1     1  70 #> 17  3   0.5 2.6556066 2.6104406 3.4254357     1     1  70 #> 18  3   1.0 4.9511436 4.5376033 5.4711041     1     1  70 #> 19  3   2.0 5.9386580 6.9882512 7.3821834     1     1  70 #> 20  3   6.0 9.0706361 9.2475260 7.9462805     1     1  70  ## without a poped database, just describing the design ## Useful for creating datasets for use in other software (like NONMEM) design_1 <- list(   xt=c( 0.5,1,2,6,24,36,72,120),   m=2,   groupsize=3)  design_2 <- list(   xt=c( 0.5,1,2,6,24,36,72,120),   m=2,   groupsize=3,   a=c(WT=70,AGE=50))  design_3 <- list(   xt=c( 0.5,1,2,6,24,36,72,120),   m=2,   groupsize=3,   a=list(c(WT=70,AGE=50),c(AGE=45,WT=60)))  (df_6 <- model_prediction(design=design_1)) #>     Time PRED Group Model #> 1    0.5   NA     1     1 #> 2    1.0   NA     1     1 #> 3    2.0   NA     1     1 #> 4    6.0   NA     1     1 #> 5   24.0   NA     1     1 #> 6   36.0   NA     1     1 #> 7   72.0   NA     1     1 #> 8  120.0   NA     1     1 #> 9    0.5   NA     2     1 #> 10   1.0   NA     2     1 #> 11   2.0   NA     2     1 #> 12   6.0   NA     2     1 #> 13  24.0   NA     2     1 #> 14  36.0   NA     2     1 #> 15  72.0   NA     2     1 #> 16 120.0   NA     2     1 (df_7 <- model_prediction(design=design_2)) #>     Time PRED Group Model WT AGE #> 1    0.5   NA     1     1 70  50 #> 2    1.0   NA     1     1 70  50 #> 3    2.0   NA     1     1 70  50 #> 4    6.0   NA     1     1 70  50 #> 5   24.0   NA     1     1 70  50 #> 6   36.0   NA     1     1 70  50 #> 7   72.0   NA     1     1 70  50 #> 8  120.0   NA     1     1 70  50 #> 9    0.5   NA     2     1 70  50 #> 10   1.0   NA     2     1 70  50 #> 11   2.0   NA     2     1 70  50 #> 12   6.0   NA     2     1 70  50 #> 13  24.0   NA     2     1 70  50 #> 14  36.0   NA     2     1 70  50 #> 15  72.0   NA     2     1 70  50 #> 16 120.0   NA     2     1 70  50 (df_8 <- model_prediction(design=design_3)) #>     Time PRED Group Model WT AGE #> 1    0.5   NA     1     1 70  50 #> 2    1.0   NA     1     1 70  50 #> 3    2.0   NA     1     1 70  50 #> 4    6.0   NA     1     1 70  50 #> 5   24.0   NA     1     1 70  50 #> 6   36.0   NA     1     1 70  50 #> 7   72.0   NA     1     1 70  50 #> 8  120.0   NA     1     1 70  50 #> 9    0.5   NA     2     1 60  45 #> 10   1.0   NA     2     1 60  45 #> 11   2.0   NA     2     1 60  45 #> 12   6.0   NA     2     1 60  45 #> 13  24.0   NA     2     1 60  45 #> 14  36.0   NA     2     1 60  45 #> 15  72.0   NA     2     1 60  45 #> 16 120.0   NA     2     1 60  45 (df_9 <- model_prediction(design=design_3,DV=TRUE)) #>    ID  Time DV IPRED PRED Group Model WT AGE #> 1   1   0.5 NA    NA   NA     1     1 70  50 #> 2   1   1.0 NA    NA   NA     1     1 70  50 #> 3   1   2.0 NA    NA   NA     1     1 70  50 #> 4   1   6.0 NA    NA   NA     1     1 70  50 #> 5   1  24.0 NA    NA   NA     1     1 70  50 #> 6   1  36.0 NA    NA   NA     1     1 70  50 #> 7   1  72.0 NA    NA   NA     1     1 70  50 #> 8   1 120.0 NA    NA   NA     1     1 70  50 #> 9   2   0.5 NA    NA   NA     1     1 70  50 #> 10  2   1.0 NA    NA   NA     1     1 70  50 #> 11  2   2.0 NA    NA   NA     1     1 70  50 #> 12  2   6.0 NA    NA   NA     1     1 70  50 #> 13  2  24.0 NA    NA   NA     1     1 70  50 #> 14  2  36.0 NA    NA   NA     1     1 70  50 #> 15  2  72.0 NA    NA   NA     1     1 70  50 #> 16  2 120.0 NA    NA   NA     1     1 70  50 #> 17  3   0.5 NA    NA   NA     1     1 70  50 #> 18  3   1.0 NA    NA   NA     1     1 70  50 #> 19  3   2.0 NA    NA   NA     1     1 70  50 #> 20  3   6.0 NA    NA   NA     1     1 70  50 #> 21  3  24.0 NA    NA   NA     1     1 70  50 #> 22  3  36.0 NA    NA   NA     1     1 70  50 #> 23  3  72.0 NA    NA   NA     1     1 70  50 #> 24  3 120.0 NA    NA   NA     1     1 70  50 #> 25  4   0.5 NA    NA   NA     2     1 60  45 #> 26  4   1.0 NA    NA   NA     2     1 60  45 #> 27  4   2.0 NA    NA   NA     2     1 60  45 #> 28  4   6.0 NA    NA   NA     2     1 60  45 #> 29  4  24.0 NA    NA   NA     2     1 60  45 #> 30  4  36.0 NA    NA   NA     2     1 60  45 #> 31  4  72.0 NA    NA   NA     2     1 60  45 #> 32  4 120.0 NA    NA   NA     2     1 60  45 #> 33  5   0.5 NA    NA   NA     2     1 60  45 #> 34  5   1.0 NA    NA   NA     2     1 60  45 #> 35  5   2.0 NA    NA   NA     2     1 60  45 #> 36  5   6.0 NA    NA   NA     2     1 60  45 #> 37  5  24.0 NA    NA   NA     2     1 60  45 #> 38  5  36.0 NA    NA   NA     2     1 60  45 #> 39  5  72.0 NA    NA   NA     2     1 60  45 #> 40  5 120.0 NA    NA   NA     2     1 60  45 #> 41  6   0.5 NA    NA   NA     2     1 60  45 #> 42  6   1.0 NA    NA   NA     2     1 60  45 #> 43  6   2.0 NA    NA   NA     2     1 60  45 #> 44  6   6.0 NA    NA   NA     2     1 60  45 #> 45  6  24.0 NA    NA   NA     2     1 60  45 #> 46  6  36.0 NA    NA   NA     2     1 60  45 #> 47  6  72.0 NA    NA   NA     2     1 60  45 #> 48  6 120.0 NA    NA   NA     2     1 60  45  # generate random deviations in WT for each individual df_10 <- model_prediction(design=design_3,DV=TRUE,                           manipulation=expression({for(id in unique(ID))                                WT[ID==id] = rnorm(1,WT[ID==id],WT[ID==id]*0.1);id <- NULL})) head(df_10,n=20) #>    ID  Time DV IPRED PRED Group Model       WT AGE #> 1   1   0.5 NA    NA   NA     1     1 69.30103  50 #> 2   1   1.0 NA    NA   NA     1     1 69.30103  50 #> 3   1   2.0 NA    NA   NA     1     1 69.30103  50 #> 4   1   6.0 NA    NA   NA     1     1 69.30103  50 #> 5   1  24.0 NA    NA   NA     1     1 69.30103  50 #> 6   1  36.0 NA    NA   NA     1     1 69.30103  50 #> 7   1  72.0 NA    NA   NA     1     1 69.30103  50 #> 8   1 120.0 NA    NA   NA     1     1 69.30103  50 #> 9   2   0.5 NA    NA   NA     1     1 70.32465  50 #> 10  2   1.0 NA    NA   NA     1     1 70.32465  50 #> 11  2   2.0 NA    NA   NA     1     1 70.32465  50 #> 12  2   6.0 NA    NA   NA     1     1 70.32465  50 #> 13  2  24.0 NA    NA   NA     1     1 70.32465  50 #> 14  2  36.0 NA    NA   NA     1     1 70.32465  50 #> 15  2  72.0 NA    NA   NA     1     1 70.32465  50 #> 16  2 120.0 NA    NA   NA     1     1 70.32465  50 #> 17  3   0.5 NA    NA   NA     1     1 77.19992  50 #> 18  3   1.0 NA    NA   NA     1     1 77.19992  50 #> 19  3   2.0 NA    NA   NA     1     1 77.19992  50 #> 20  3   6.0 NA    NA   NA     1     1 77.19992  50  # generate random deviations in WT and AGE for each individual df_11 <- model_prediction(design=design_3,DV=TRUE,                           manipulation=list(                             expression(for(id in unique(ID))                                WT[ID==id] = rnorm(1,WT[ID==id],WT[ID==id]*0.1)),                             expression(for(id in unique(ID))                                AGE[ID==id] = rnorm(1,AGE[ID==id],AGE[ID==id]*0.2)),                             expression(id <- NULL)                           )) head(df_10,n=20) #>    ID  Time DV IPRED PRED Group Model       WT AGE #> 1   1   0.5 NA    NA   NA     1     1 69.30103  50 #> 2   1   1.0 NA    NA   NA     1     1 69.30103  50 #> 3   1   2.0 NA    NA   NA     1     1 69.30103  50 #> 4   1   6.0 NA    NA   NA     1     1 69.30103  50 #> 5   1  24.0 NA    NA   NA     1     1 69.30103  50 #> 6   1  36.0 NA    NA   NA     1     1 69.30103  50 #> 7   1  72.0 NA    NA   NA     1     1 69.30103  50 #> 8   1 120.0 NA    NA   NA     1     1 69.30103  50 #> 9   2   0.5 NA    NA   NA     1     1 70.32465  50 #> 10  2   1.0 NA    NA   NA     1     1 70.32465  50 #> 11  2   2.0 NA    NA   NA     1     1 70.32465  50 #> 12  2   6.0 NA    NA   NA     1     1 70.32465  50 #> 13  2  24.0 NA    NA   NA     1     1 70.32465  50 #> 14  2  36.0 NA    NA   NA     1     1 70.32465  50 #> 15  2  72.0 NA    NA   NA     1     1 70.32465  50 #> 16  2 120.0 NA    NA   NA     1     1 70.32465  50 #> 17  3   0.5 NA    NA   NA     1     1 77.19992  50 #> 18  3   1.0 NA    NA   NA     1     1 77.19992  50 #> 19  3   2.0 NA    NA   NA     1     1 77.19992  50 #> 20  3   6.0 NA    NA   NA     1     1 77.19992  50  ## create dosing rows  dosing_1 <- list(list(AMT=1000,RATE=NA,Time=0.5),list(AMT=3000,RATE=NA,Time=0.5)) dosing_2 <- list(list(AMT=1000,RATE=NA,Time=0.5)) dosing_3 <- list(list(AMT=1000,Time=0.5)) dosing_4 <- list(list(AMT=c(1000,20),Time=c(0.5,10))) # multiple dosing   (df_12 <- model_prediction(design=design_3,DV=TRUE,dosing=dosing_1)) #>    ID  Time DV IPRED PRED  AMT RATE Group Model WT AGE #> 1   1   0.5 NA    NA   NA 1000   NA     1     1 70  50 #> 2   1   0.5 NA    NA   NA   NA   NA     1     1 70  50 #> 3   1   1.0 NA    NA   NA   NA   NA     1     1 70  50 #> 4   1   2.0 NA    NA   NA   NA   NA     1     1 70  50 #> 5   1   6.0 NA    NA   NA   NA   NA     1     1 70  50 #> 6   1  24.0 NA    NA   NA   NA   NA     1     1 70  50 #> 7   1  36.0 NA    NA   NA   NA   NA     1     1 70  50 #> 8   1  72.0 NA    NA   NA   NA   NA     1     1 70  50 #> 9   1 120.0 NA    NA   NA   NA   NA     1     1 70  50 #> 10  2   0.5 NA    NA   NA 1000   NA     1     1 70  50 #> 11  2   0.5 NA    NA   NA   NA   NA     1     1 70  50 #> 12  2   1.0 NA    NA   NA   NA   NA     1     1 70  50 #> 13  2   2.0 NA    NA   NA   NA   NA     1     1 70  50 #> 14  2   6.0 NA    NA   NA   NA   NA     1     1 70  50 #> 15  2  24.0 NA    NA   NA   NA   NA     1     1 70  50 #> 16  2  36.0 NA    NA   NA   NA   NA     1     1 70  50 #> 17  2  72.0 NA    NA   NA   NA   NA     1     1 70  50 #> 18  2 120.0 NA    NA   NA   NA   NA     1     1 70  50 #> 19  3   0.5 NA    NA   NA 1000   NA     1     1 70  50 #> 20  3   0.5 NA    NA   NA   NA   NA     1     1 70  50 #> 21  3   1.0 NA    NA   NA   NA   NA     1     1 70  50 #> 22  3   2.0 NA    NA   NA   NA   NA     1     1 70  50 #> 23  3   6.0 NA    NA   NA   NA   NA     1     1 70  50 #> 24  3  24.0 NA    NA   NA   NA   NA     1     1 70  50 #> 25  3  36.0 NA    NA   NA   NA   NA     1     1 70  50 #> 26  3  72.0 NA    NA   NA   NA   NA     1     1 70  50 #> 27  3 120.0 NA    NA   NA   NA   NA     1     1 70  50 #> 28  4   0.5 NA    NA   NA 3000   NA     2     1 60  45 #> 29  4   0.5 NA    NA   NA   NA   NA     2     1 60  45 #> 30  4   1.0 NA    NA   NA   NA   NA     2     1 60  45 #> 31  4   2.0 NA    NA   NA   NA   NA     2     1 60  45 #> 32  4   6.0 NA    NA   NA   NA   NA     2     1 60  45 #> 33  4  24.0 NA    NA   NA   NA   NA     2     1 60  45 #> 34  4  36.0 NA    NA   NA   NA   NA     2     1 60  45 #> 35  4  72.0 NA    NA   NA   NA   NA     2     1 60  45 #> 36  4 120.0 NA    NA   NA   NA   NA     2     1 60  45 #> 37  5   0.5 NA    NA   NA 3000   NA     2     1 60  45 #> 38  5   0.5 NA    NA   NA   NA   NA     2     1 60  45 #> 39  5   1.0 NA    NA   NA   NA   NA     2     1 60  45 #> 40  5   2.0 NA    NA   NA   NA   NA     2     1 60  45 #> 41  5   6.0 NA    NA   NA   NA   NA     2     1 60  45 #> 42  5  24.0 NA    NA   NA   NA   NA     2     1 60  45 #> 43  5  36.0 NA    NA   NA   NA   NA     2     1 60  45 #> 44  5  72.0 NA    NA   NA   NA   NA     2     1 60  45 #> 45  5 120.0 NA    NA   NA   NA   NA     2     1 60  45 #> 46  6   0.5 NA    NA   NA 3000   NA     2     1 60  45 #> 47  6   0.5 NA    NA   NA   NA   NA     2     1 60  45 #> 48  6   1.0 NA    NA   NA   NA   NA     2     1 60  45 #> 49  6   2.0 NA    NA   NA   NA   NA     2     1 60  45 #> 50  6   6.0 NA    NA   NA   NA   NA     2     1 60  45 #> 51  6  24.0 NA    NA   NA   NA   NA     2     1 60  45 #> 52  6  36.0 NA    NA   NA   NA   NA     2     1 60  45 #> 53  6  72.0 NA    NA   NA   NA   NA     2     1 60  45 #> 54  6 120.0 NA    NA   NA   NA   NA     2     1 60  45 (df_13 <- model_prediction(design=design_3,DV=TRUE,dosing=dosing_2)) #>    ID  Time DV IPRED PRED  AMT RATE Group Model WT AGE #> 1   1   0.5 NA    NA   NA 1000   NA     1     1 70  50 #> 2   1   0.5 NA    NA   NA   NA   NA     1     1 70  50 #> 3   1   1.0 NA    NA   NA   NA   NA     1     1 70  50 #> 4   1   2.0 NA    NA   NA   NA   NA     1     1 70  50 #> 5   1   6.0 NA    NA   NA   NA   NA     1     1 70  50 #> 6   1  24.0 NA    NA   NA   NA   NA     1     1 70  50 #> 7   1  36.0 NA    NA   NA   NA   NA     1     1 70  50 #> 8   1  72.0 NA    NA   NA   NA   NA     1     1 70  50 #> 9   1 120.0 NA    NA   NA   NA   NA     1     1 70  50 #> 10  2   0.5 NA    NA   NA 1000   NA     1     1 70  50 #> 11  2   0.5 NA    NA   NA   NA   NA     1     1 70  50 #> 12  2   1.0 NA    NA   NA   NA   NA     1     1 70  50 #> 13  2   2.0 NA    NA   NA   NA   NA     1     1 70  50 #> 14  2   6.0 NA    NA   NA   NA   NA     1     1 70  50 #> 15  2  24.0 NA    NA   NA   NA   NA     1     1 70  50 #> 16  2  36.0 NA    NA   NA   NA   NA     1     1 70  50 #> 17  2  72.0 NA    NA   NA   NA   NA     1     1 70  50 #> 18  2 120.0 NA    NA   NA   NA   NA     1     1 70  50 #> 19  3   0.5 NA    NA   NA 1000   NA     1     1 70  50 #> 20  3   0.5 NA    NA   NA   NA   NA     1     1 70  50 #> 21  3   1.0 NA    NA   NA   NA   NA     1     1 70  50 #> 22  3   2.0 NA    NA   NA   NA   NA     1     1 70  50 #> 23  3   6.0 NA    NA   NA   NA   NA     1     1 70  50 #> 24  3  24.0 NA    NA   NA   NA   NA     1     1 70  50 #> 25  3  36.0 NA    NA   NA   NA   NA     1     1 70  50 #> 26  3  72.0 NA    NA   NA   NA   NA     1     1 70  50 #> 27  3 120.0 NA    NA   NA   NA   NA     1     1 70  50 #> 28  4   0.5 NA    NA   NA 1000   NA     2     1 60  45 #> 29  4   0.5 NA    NA   NA   NA   NA     2     1 60  45 #> 30  4   1.0 NA    NA   NA   NA   NA     2     1 60  45 #> 31  4   2.0 NA    NA   NA   NA   NA     2     1 60  45 #> 32  4   6.0 NA    NA   NA   NA   NA     2     1 60  45 #> 33  4  24.0 NA    NA   NA   NA   NA     2     1 60  45 #> 34  4  36.0 NA    NA   NA   NA   NA     2     1 60  45 #> 35  4  72.0 NA    NA   NA   NA   NA     2     1 60  45 #> 36  4 120.0 NA    NA   NA   NA   NA     2     1 60  45 #> 37  5   0.5 NA    NA   NA 1000   NA     2     1 60  45 #> 38  5   0.5 NA    NA   NA   NA   NA     2     1 60  45 #> 39  5   1.0 NA    NA   NA   NA   NA     2     1 60  45 #> 40  5   2.0 NA    NA   NA   NA   NA     2     1 60  45 #> 41  5   6.0 NA    NA   NA   NA   NA     2     1 60  45 #> 42  5  24.0 NA    NA   NA   NA   NA     2     1 60  45 #> 43  5  36.0 NA    NA   NA   NA   NA     2     1 60  45 #> 44  5  72.0 NA    NA   NA   NA   NA     2     1 60  45 #> 45  5 120.0 NA    NA   NA   NA   NA     2     1 60  45 #> 46  6   0.5 NA    NA   NA 1000   NA     2     1 60  45 #> 47  6   0.5 NA    NA   NA   NA   NA     2     1 60  45 #> 48  6   1.0 NA    NA   NA   NA   NA     2     1 60  45 #> 49  6   2.0 NA    NA   NA   NA   NA     2     1 60  45 #> 50  6   6.0 NA    NA   NA   NA   NA     2     1 60  45 #> 51  6  24.0 NA    NA   NA   NA   NA     2     1 60  45 #> 52  6  36.0 NA    NA   NA   NA   NA     2     1 60  45 #> 53  6  72.0 NA    NA   NA   NA   NA     2     1 60  45 #> 54  6 120.0 NA    NA   NA   NA   NA     2     1 60  45 (df_14 <- model_prediction(design=design_3,DV=TRUE,dosing=dosing_3)) #>    ID  Time DV IPRED PRED  AMT Group Model WT AGE #> 1   1   0.5 NA    NA   NA 1000     1     1 70  50 #> 2   1   0.5 NA    NA   NA   NA     1     1 70  50 #> 3   1   1.0 NA    NA   NA   NA     1     1 70  50 #> 4   1   2.0 NA    NA   NA   NA     1     1 70  50 #> 5   1   6.0 NA    NA   NA   NA     1     1 70  50 #> 6   1  24.0 NA    NA   NA   NA     1     1 70  50 #> 7   1  36.0 NA    NA   NA   NA     1     1 70  50 #> 8   1  72.0 NA    NA   NA   NA     1     1 70  50 #> 9   1 120.0 NA    NA   NA   NA     1     1 70  50 #> 10  2   0.5 NA    NA   NA 1000     1     1 70  50 #> 11  2   0.5 NA    NA   NA   NA     1     1 70  50 #> 12  2   1.0 NA    NA   NA   NA     1     1 70  50 #> 13  2   2.0 NA    NA   NA   NA     1     1 70  50 #> 14  2   6.0 NA    NA   NA   NA     1     1 70  50 #> 15  2  24.0 NA    NA   NA   NA     1     1 70  50 #> 16  2  36.0 NA    NA   NA   NA     1     1 70  50 #> 17  2  72.0 NA    NA   NA   NA     1     1 70  50 #> 18  2 120.0 NA    NA   NA   NA     1     1 70  50 #> 19  3   0.5 NA    NA   NA 1000     1     1 70  50 #> 20  3   0.5 NA    NA   NA   NA     1     1 70  50 #> 21  3   1.0 NA    NA   NA   NA     1     1 70  50 #> 22  3   2.0 NA    NA   NA   NA     1     1 70  50 #> 23  3   6.0 NA    NA   NA   NA     1     1 70  50 #> 24  3  24.0 NA    NA   NA   NA     1     1 70  50 #> 25  3  36.0 NA    NA   NA   NA     1     1 70  50 #> 26  3  72.0 NA    NA   NA   NA     1     1 70  50 #> 27  3 120.0 NA    NA   NA   NA     1     1 70  50 #> 28  4   0.5 NA    NA   NA 1000     2     1 60  45 #> 29  4   0.5 NA    NA   NA   NA     2     1 60  45 #> 30  4   1.0 NA    NA   NA   NA     2     1 60  45 #> 31  4   2.0 NA    NA   NA   NA     2     1 60  45 #> 32  4   6.0 NA    NA   NA   NA     2     1 60  45 #> 33  4  24.0 NA    NA   NA   NA     2     1 60  45 #> 34  4  36.0 NA    NA   NA   NA     2     1 60  45 #> 35  4  72.0 NA    NA   NA   NA     2     1 60  45 #> 36  4 120.0 NA    NA   NA   NA     2     1 60  45 #> 37  5   0.5 NA    NA   NA 1000     2     1 60  45 #> 38  5   0.5 NA    NA   NA   NA     2     1 60  45 #> 39  5   1.0 NA    NA   NA   NA     2     1 60  45 #> 40  5   2.0 NA    NA   NA   NA     2     1 60  45 #> 41  5   6.0 NA    NA   NA   NA     2     1 60  45 #> 42  5  24.0 NA    NA   NA   NA     2     1 60  45 #> 43  5  36.0 NA    NA   NA   NA     2     1 60  45 #> 44  5  72.0 NA    NA   NA   NA     2     1 60  45 #> 45  5 120.0 NA    NA   NA   NA     2     1 60  45 #> 46  6   0.5 NA    NA   NA 1000     2     1 60  45 #> 47  6   0.5 NA    NA   NA   NA     2     1 60  45 #> 48  6   1.0 NA    NA   NA   NA     2     1 60  45 #> 49  6   2.0 NA    NA   NA   NA     2     1 60  45 #> 50  6   6.0 NA    NA   NA   NA     2     1 60  45 #> 51  6  24.0 NA    NA   NA   NA     2     1 60  45 #> 52  6  36.0 NA    NA   NA   NA     2     1 60  45 #> 53  6  72.0 NA    NA   NA   NA     2     1 60  45 #> 54  6 120.0 NA    NA   NA   NA     2     1 60  45 (df_15 <- model_prediction(design=design_3,DV=TRUE,dosing=dosing_4)) #>    ID  Time DV IPRED PRED  AMT Group Model WT AGE #> 1   1   0.5 NA    NA   NA 1000     1     1 70  50 #> 2   1   0.5 NA    NA   NA   NA     1     1 70  50 #> 3   1   1.0 NA    NA   NA   NA     1     1 70  50 #> 4   1   2.0 NA    NA   NA   NA     1     1 70  50 #> 5   1   6.0 NA    NA   NA   NA     1     1 70  50 #> 6   1  10.0 NA    NA   NA   20     1     1 70  50 #> 7   1  24.0 NA    NA   NA   NA     1     1 70  50 #> 8   1  36.0 NA    NA   NA   NA     1     1 70  50 #> 9   1  72.0 NA    NA   NA   NA     1     1 70  50 #> 10  1 120.0 NA    NA   NA   NA     1     1 70  50 #> 11  2   0.5 NA    NA   NA 1000     1     1 70  50 #> 12  2   0.5 NA    NA   NA   NA     1     1 70  50 #> 13  2   1.0 NA    NA   NA   NA     1     1 70  50 #> 14  2   2.0 NA    NA   NA   NA     1     1 70  50 #> 15  2   6.0 NA    NA   NA   NA     1     1 70  50 #> 16  2  10.0 NA    NA   NA   20     1     1 70  50 #> 17  2  24.0 NA    NA   NA   NA     1     1 70  50 #> 18  2  36.0 NA    NA   NA   NA     1     1 70  50 #> 19  2  72.0 NA    NA   NA   NA     1     1 70  50 #> 20  2 120.0 NA    NA   NA   NA     1     1 70  50 #> 21  3   0.5 NA    NA   NA 1000     1     1 70  50 #> 22  3   0.5 NA    NA   NA   NA     1     1 70  50 #> 23  3   1.0 NA    NA   NA   NA     1     1 70  50 #> 24  3   2.0 NA    NA   NA   NA     1     1 70  50 #> 25  3   6.0 NA    NA   NA   NA     1     1 70  50 #> 26  3  10.0 NA    NA   NA   20     1     1 70  50 #> 27  3  24.0 NA    NA   NA   NA     1     1 70  50 #> 28  3  36.0 NA    NA   NA   NA     1     1 70  50 #> 29  3  72.0 NA    NA   NA   NA     1     1 70  50 #> 30  3 120.0 NA    NA   NA   NA     1     1 70  50 #> 31  4   0.5 NA    NA   NA 1000     2     1 60  45 #> 32  4   0.5 NA    NA   NA   NA     2     1 60  45 #> 33  4   1.0 NA    NA   NA   NA     2     1 60  45 #> 34  4   2.0 NA    NA   NA   NA     2     1 60  45 #> 35  4   6.0 NA    NA   NA   NA     2     1 60  45 #> 36  4  10.0 NA    NA   NA   20     2     1 60  45 #> 37  4  24.0 NA    NA   NA   NA     2     1 60  45 #> 38  4  36.0 NA    NA   NA   NA     2     1 60  45 #> 39  4  72.0 NA    NA   NA   NA     2     1 60  45 #> 40  4 120.0 NA    NA   NA   NA     2     1 60  45 #> 41  5   0.5 NA    NA   NA 1000     2     1 60  45 #> 42  5   0.5 NA    NA   NA   NA     2     1 60  45 #> 43  5   1.0 NA    NA   NA   NA     2     1 60  45 #> 44  5   2.0 NA    NA   NA   NA     2     1 60  45 #> 45  5   6.0 NA    NA   NA   NA     2     1 60  45 #> 46  5  10.0 NA    NA   NA   20     2     1 60  45 #> 47  5  24.0 NA    NA   NA   NA     2     1 60  45 #> 48  5  36.0 NA    NA   NA   NA     2     1 60  45 #> 49  5  72.0 NA    NA   NA   NA     2     1 60  45 #> 50  5 120.0 NA    NA   NA   NA     2     1 60  45 #> 51  6   0.5 NA    NA   NA 1000     2     1 60  45 #> 52  6   0.5 NA    NA   NA   NA     2     1 60  45 #> 53  6   1.0 NA    NA   NA   NA     2     1 60  45 #> 54  6   2.0 NA    NA   NA   NA     2     1 60  45 #> 55  6   6.0 NA    NA   NA   NA     2     1 60  45 #> 56  6  10.0 NA    NA   NA   20     2     1 60  45 #> 57  6  24.0 NA    NA   NA   NA     2     1 60  45 #> 58  6  36.0 NA    NA   NA   NA     2     1 60  45 #> 59  6  72.0 NA    NA   NA   NA     2     1 60  45 #> 60  6 120.0 NA    NA   NA   NA     2     1 60  45   model_prediction(design=design_3,DV=TRUE,dosing=dosing_4,model_num_points = 10) #>     ID      Time DV IPRED PRED  AMT Group Model WT AGE #> 1    1   0.50000 NA    NA   NA 1000     1     1 70  50 #> 2    1   0.50000 NA    NA   NA   NA     1     1 70  50 #> 3    1   1.00000 NA    NA   NA   NA     1     1 70  50 #> 4    1   2.00000 NA    NA   NA   NA     1     1 70  50 #> 5    1   6.00000 NA    NA   NA   NA     1     1 70  50 #> 6    1  10.00000 NA    NA   NA   20     1     1 70  50 #> 7    1  13.77778 NA    NA   NA   NA     1     1 70  50 #> 8    1  24.00000 NA    NA   NA   NA     1     1 70  50 #> 9    1  27.05556 NA    NA   NA   NA     1     1 70  50 #> 10   1  36.00000 NA    NA   NA   NA     1     1 70  50 #> 11   1  40.33333 NA    NA   NA   NA     1     1 70  50 #> 12   1  53.61111 NA    NA   NA   NA     1     1 70  50 #> 13   1  66.88889 NA    NA   NA   NA     1     1 70  50 #> 14   1  72.00000 NA    NA   NA   NA     1     1 70  50 #> 15   1  80.16667 NA    NA   NA   NA     1     1 70  50 #> 16   1  93.44444 NA    NA   NA   NA     1     1 70  50 #> 17   1 106.72222 NA    NA   NA   NA     1     1 70  50 #> 18   1 120.00000 NA    NA   NA   NA     1     1 70  50 #> 19   2   0.50000 NA    NA   NA 1000     1     1 70  50 #> 20   2   0.50000 NA    NA   NA   NA     1     1 70  50 #> 21   2   1.00000 NA    NA   NA   NA     1     1 70  50 #> 22   2   2.00000 NA    NA   NA   NA     1     1 70  50 #> 23   2   6.00000 NA    NA   NA   NA     1     1 70  50 #> 24   2  10.00000 NA    NA   NA   20     1     1 70  50 #> 25   2  13.77778 NA    NA   NA   NA     1     1 70  50 #> 26   2  24.00000 NA    NA   NA   NA     1     1 70  50 #> 27   2  27.05556 NA    NA   NA   NA     1     1 70  50 #> 28   2  36.00000 NA    NA   NA   NA     1     1 70  50 #> 29   2  40.33333 NA    NA   NA   NA     1     1 70  50 #> 30   2  53.61111 NA    NA   NA   NA     1     1 70  50 #> 31   2  66.88889 NA    NA   NA   NA     1     1 70  50 #> 32   2  72.00000 NA    NA   NA   NA     1     1 70  50 #> 33   2  80.16667 NA    NA   NA   NA     1     1 70  50 #> 34   2  93.44444 NA    NA   NA   NA     1     1 70  50 #> 35   2 106.72222 NA    NA   NA   NA     1     1 70  50 #> 36   2 120.00000 NA    NA   NA   NA     1     1 70  50 #> 37   3   0.50000 NA    NA   NA 1000     1     1 70  50 #> 38   3   0.50000 NA    NA   NA   NA     1     1 70  50 #> 39   3   1.00000 NA    NA   NA   NA     1     1 70  50 #> 40   3   2.00000 NA    NA   NA   NA     1     1 70  50 #> 41   3   6.00000 NA    NA   NA   NA     1     1 70  50 #> 42   3  10.00000 NA    NA   NA   20     1     1 70  50 #> 43   3  13.77778 NA    NA   NA   NA     1     1 70  50 #> 44   3  24.00000 NA    NA   NA   NA     1     1 70  50 #> 45   3  27.05556 NA    NA   NA   NA     1     1 70  50 #> 46   3  36.00000 NA    NA   NA   NA     1     1 70  50 #> 47   3  40.33333 NA    NA   NA   NA     1     1 70  50 #> 48   3  53.61111 NA    NA   NA   NA     1     1 70  50 #> 49   3  66.88889 NA    NA   NA   NA     1     1 70  50 #> 50   3  72.00000 NA    NA   NA   NA     1     1 70  50 #> 51   3  80.16667 NA    NA   NA   NA     1     1 70  50 #> 52   3  93.44444 NA    NA   NA   NA     1     1 70  50 #> 53   3 106.72222 NA    NA   NA   NA     1     1 70  50 #> 54   3 120.00000 NA    NA   NA   NA     1     1 70  50 #> 55   4   0.50000 NA    NA   NA 1000     2     1 60  45 #> 56   4   0.50000 NA    NA   NA   NA     2     1 60  45 #> 57   4   1.00000 NA    NA   NA   NA     2     1 60  45 #> 58   4   2.00000 NA    NA   NA   NA     2     1 60  45 #> 59   4   6.00000 NA    NA   NA   NA     2     1 60  45 #> 60   4  10.00000 NA    NA   NA   20     2     1 60  45 #> 61   4  13.77778 NA    NA   NA   NA     2     1 60  45 #> 62   4  24.00000 NA    NA   NA   NA     2     1 60  45 #> 63   4  27.05556 NA    NA   NA   NA     2     1 60  45 #> 64   4  36.00000 NA    NA   NA   NA     2     1 60  45 #> 65   4  40.33333 NA    NA   NA   NA     2     1 60  45 #> 66   4  53.61111 NA    NA   NA   NA     2     1 60  45 #> 67   4  66.88889 NA    NA   NA   NA     2     1 60  45 #> 68   4  72.00000 NA    NA   NA   NA     2     1 60  45 #> 69   4  80.16667 NA    NA   NA   NA     2     1 60  45 #> 70   4  93.44444 NA    NA   NA   NA     2     1 60  45 #> 71   4 106.72222 NA    NA   NA   NA     2     1 60  45 #> 72   4 120.00000 NA    NA   NA   NA     2     1 60  45 #> 73   5   0.50000 NA    NA   NA 1000     2     1 60  45 #> 74   5   0.50000 NA    NA   NA   NA     2     1 60  45 #> 75   5   1.00000 NA    NA   NA   NA     2     1 60  45 #> 76   5   2.00000 NA    NA   NA   NA     2     1 60  45 #> 77   5   6.00000 NA    NA   NA   NA     2     1 60  45 #> 78   5  10.00000 NA    NA   NA   20     2     1 60  45 #> 79   5  13.77778 NA    NA   NA   NA     2     1 60  45 #> 80   5  24.00000 NA    NA   NA   NA     2     1 60  45 #> 81   5  27.05556 NA    NA   NA   NA     2     1 60  45 #> 82   5  36.00000 NA    NA   NA   NA     2     1 60  45 #> 83   5  40.33333 NA    NA   NA   NA     2     1 60  45 #> 84   5  53.61111 NA    NA   NA   NA     2     1 60  45 #> 85   5  66.88889 NA    NA   NA   NA     2     1 60  45 #> 86   5  72.00000 NA    NA   NA   NA     2     1 60  45 #> 87   5  80.16667 NA    NA   NA   NA     2     1 60  45 #> 88   5  93.44444 NA    NA   NA   NA     2     1 60  45 #> 89   5 106.72222 NA    NA   NA   NA     2     1 60  45 #> 90   5 120.00000 NA    NA   NA   NA     2     1 60  45 #> 91   6   0.50000 NA    NA   NA 1000     2     1 60  45 #> 92   6   0.50000 NA    NA   NA   NA     2     1 60  45 #> 93   6   1.00000 NA    NA   NA   NA     2     1 60  45 #> 94   6   2.00000 NA    NA   NA   NA     2     1 60  45 #> 95   6   6.00000 NA    NA   NA   NA     2     1 60  45 #> 96   6  10.00000 NA    NA   NA   20     2     1 60  45 #> 97   6  13.77778 NA    NA   NA   NA     2     1 60  45 #> 98   6  24.00000 NA    NA   NA   NA     2     1 60  45 #> 99   6  27.05556 NA    NA   NA   NA     2     1 60  45 #> 100  6  36.00000 NA    NA   NA   NA     2     1 60  45 #> 101  6  40.33333 NA    NA   NA   NA     2     1 60  45 #> 102  6  53.61111 NA    NA   NA   NA     2     1 60  45 #> 103  6  66.88889 NA    NA   NA   NA     2     1 60  45 #> 104  6  72.00000 NA    NA   NA   NA     2     1 60  45 #> 105  6  80.16667 NA    NA   NA   NA     2     1 60  45 #> 106  6  93.44444 NA    NA   NA   NA     2     1 60  45 #> 107  6 106.72222 NA    NA   NA   NA     2     1 60  45 #> 108  6 120.00000 NA    NA   NA   NA     2     1 60  45 model_prediction(design=design_3,DV=TRUE,dosing=dosing_4,model_num_points = 10,model_minxt=20) #>     ID      Time DV IPRED PRED  AMT Group Model WT AGE #> 1    1   0.50000 NA    NA   NA 1000     1     1 70  50 #> 2    1   0.50000 NA    NA   NA   NA     1     1 70  50 #> 3    1   1.00000 NA    NA   NA   NA     1     1 70  50 #> 4    1   2.00000 NA    NA   NA   NA     1     1 70  50 #> 5    1   6.00000 NA    NA   NA   NA     1     1 70  50 #> 6    1  10.00000 NA    NA   NA   20     1     1 70  50 #> 7    1  20.00000 NA    NA   NA   NA     1     1 70  50 #> 8    1  24.00000 NA    NA   NA   NA     1     1 70  50 #> 9    1  31.11111 NA    NA   NA   NA     1     1 70  50 #> 10   1  36.00000 NA    NA   NA   NA     1     1 70  50 #> 11   1  42.22222 NA    NA   NA   NA     1     1 70  50 #> 12   1  53.33333 NA    NA   NA   NA     1     1 70  50 #> 13   1  64.44444 NA    NA   NA   NA     1     1 70  50 #> 14   1  72.00000 NA    NA   NA   NA     1     1 70  50 #> 15   1  75.55556 NA    NA   NA   NA     1     1 70  50 #> 16   1  86.66667 NA    NA   NA   NA     1     1 70  50 #> 17   1  97.77778 NA    NA   NA   NA     1     1 70  50 #> 18   1 108.88889 NA    NA   NA   NA     1     1 70  50 #> 19   1 120.00000 NA    NA   NA   NA     1     1 70  50 #> 20   2   0.50000 NA    NA   NA 1000     1     1 70  50 #> 21   2   0.50000 NA    NA   NA   NA     1     1 70  50 #> 22   2   1.00000 NA    NA   NA   NA     1     1 70  50 #> 23   2   2.00000 NA    NA   NA   NA     1     1 70  50 #> 24   2   6.00000 NA    NA   NA   NA     1     1 70  50 #> 25   2  10.00000 NA    NA   NA   20     1     1 70  50 #> 26   2  20.00000 NA    NA   NA   NA     1     1 70  50 #> 27   2  24.00000 NA    NA   NA   NA     1     1 70  50 #> 28   2  31.11111 NA    NA   NA   NA     1     1 70  50 #> 29   2  36.00000 NA    NA   NA   NA     1     1 70  50 #> 30   2  42.22222 NA    NA   NA   NA     1     1 70  50 #> 31   2  53.33333 NA    NA   NA   NA     1     1 70  50 #> 32   2  64.44444 NA    NA   NA   NA     1     1 70  50 #> 33   2  72.00000 NA    NA   NA   NA     1     1 70  50 #> 34   2  75.55556 NA    NA   NA   NA     1     1 70  50 #> 35   2  86.66667 NA    NA   NA   NA     1     1 70  50 #> 36   2  97.77778 NA    NA   NA   NA     1     1 70  50 #> 37   2 108.88889 NA    NA   NA   NA     1     1 70  50 #> 38   2 120.00000 NA    NA   NA   NA     1     1 70  50 #> 39   3   0.50000 NA    NA   NA 1000     1     1 70  50 #> 40   3   0.50000 NA    NA   NA   NA     1     1 70  50 #> 41   3   1.00000 NA    NA   NA   NA     1     1 70  50 #> 42   3   2.00000 NA    NA   NA   NA     1     1 70  50 #> 43   3   6.00000 NA    NA   NA   NA     1     1 70  50 #> 44   3  10.00000 NA    NA   NA   20     1     1 70  50 #> 45   3  20.00000 NA    NA   NA   NA     1     1 70  50 #> 46   3  24.00000 NA    NA   NA   NA     1     1 70  50 #> 47   3  31.11111 NA    NA   NA   NA     1     1 70  50 #> 48   3  36.00000 NA    NA   NA   NA     1     1 70  50 #> 49   3  42.22222 NA    NA   NA   NA     1     1 70  50 #> 50   3  53.33333 NA    NA   NA   NA     1     1 70  50 #> 51   3  64.44444 NA    NA   NA   NA     1     1 70  50 #> 52   3  72.00000 NA    NA   NA   NA     1     1 70  50 #> 53   3  75.55556 NA    NA   NA   NA     1     1 70  50 #> 54   3  86.66667 NA    NA   NA   NA     1     1 70  50 #> 55   3  97.77778 NA    NA   NA   NA     1     1 70  50 #> 56   3 108.88889 NA    NA   NA   NA     1     1 70  50 #> 57   3 120.00000 NA    NA   NA   NA     1     1 70  50 #> 58   4   0.50000 NA    NA   NA 1000     2     1 60  45 #> 59   4   0.50000 NA    NA   NA   NA     2     1 60  45 #> 60   4   1.00000 NA    NA   NA   NA     2     1 60  45 #> 61   4   2.00000 NA    NA   NA   NA     2     1 60  45 #> 62   4   6.00000 NA    NA   NA   NA     2     1 60  45 #> 63   4  10.00000 NA    NA   NA   20     2     1 60  45 #> 64   4  20.00000 NA    NA   NA   NA     2     1 60  45 #> 65   4  24.00000 NA    NA   NA   NA     2     1 60  45 #> 66   4  31.11111 NA    NA   NA   NA     2     1 60  45 #> 67   4  36.00000 NA    NA   NA   NA     2     1 60  45 #> 68   4  42.22222 NA    NA   NA   NA     2     1 60  45 #> 69   4  53.33333 NA    NA   NA   NA     2     1 60  45 #> 70   4  64.44444 NA    NA   NA   NA     2     1 60  45 #> 71   4  72.00000 NA    NA   NA   NA     2     1 60  45 #> 72   4  75.55556 NA    NA   NA   NA     2     1 60  45 #> 73   4  86.66667 NA    NA   NA   NA     2     1 60  45 #> 74   4  97.77778 NA    NA   NA   NA     2     1 60  45 #> 75   4 108.88889 NA    NA   NA   NA     2     1 60  45 #> 76   4 120.00000 NA    NA   NA   NA     2     1 60  45 #> 77   5   0.50000 NA    NA   NA 1000     2     1 60  45 #> 78   5   0.50000 NA    NA   NA   NA     2     1 60  45 #> 79   5   1.00000 NA    NA   NA   NA     2     1 60  45 #> 80   5   2.00000 NA    NA   NA   NA     2     1 60  45 #> 81   5   6.00000 NA    NA   NA   NA     2     1 60  45 #> 82   5  10.00000 NA    NA   NA   20     2     1 60  45 #> 83   5  20.00000 NA    NA   NA   NA     2     1 60  45 #> 84   5  24.00000 NA    NA   NA   NA     2     1 60  45 #> 85   5  31.11111 NA    NA   NA   NA     2     1 60  45 #> 86   5  36.00000 NA    NA   NA   NA     2     1 60  45 #> 87   5  42.22222 NA    NA   NA   NA     2     1 60  45 #> 88   5  53.33333 NA    NA   NA   NA     2     1 60  45 #> 89   5  64.44444 NA    NA   NA   NA     2     1 60  45 #> 90   5  72.00000 NA    NA   NA   NA     2     1 60  45 #> 91   5  75.55556 NA    NA   NA   NA     2     1 60  45 #> 92   5  86.66667 NA    NA   NA   NA     2     1 60  45 #> 93   5  97.77778 NA    NA   NA   NA     2     1 60  45 #> 94   5 108.88889 NA    NA   NA   NA     2     1 60  45 #> 95   5 120.00000 NA    NA   NA   NA     2     1 60  45 #> 96   6   0.50000 NA    NA   NA 1000     2     1 60  45 #> 97   6   0.50000 NA    NA   NA   NA     2     1 60  45 #> 98   6   1.00000 NA    NA   NA   NA     2     1 60  45 #> 99   6   2.00000 NA    NA   NA   NA     2     1 60  45 #> 100  6   6.00000 NA    NA   NA   NA     2     1 60  45 #> 101  6  10.00000 NA    NA   NA   20     2     1 60  45 #> 102  6  20.00000 NA    NA   NA   NA     2     1 60  45 #> 103  6  24.00000 NA    NA   NA   NA     2     1 60  45 #> 104  6  31.11111 NA    NA   NA   NA     2     1 60  45 #> 105  6  36.00000 NA    NA   NA   NA     2     1 60  45 #> 106  6  42.22222 NA    NA   NA   NA     2     1 60  45 #> 107  6  53.33333 NA    NA   NA   NA     2     1 60  45 #> 108  6  64.44444 NA    NA   NA   NA     2     1 60  45 #> 109  6  72.00000 NA    NA   NA   NA     2     1 60  45 #> 110  6  75.55556 NA    NA   NA   NA     2     1 60  45 #> 111  6  86.66667 NA    NA   NA   NA     2     1 60  45 #> 112  6  97.77778 NA    NA   NA   NA     2     1 60  45 #> 113  6 108.88889 NA    NA   NA   NA     2     1 60  45 #> 114  6 120.00000 NA    NA   NA   NA     2     1 60  45  design_4 <- list(   xt=c( 0.5,1,2,6,24,36,72,120),   model_switch=c(1,1,1,1,2,2,2,2),   m=2,   groupsize=3,   a=list(c(WT=70,AGE=50),c(AGE=45,WT=60)))  model_prediction(design=design_4,DV=TRUE,dosing=dosing_4) #>    ID  Time DV IPRED PRED  AMT Group Model WT AGE #> 1   1   0.5 NA    NA   NA 1000     1     1 70  50 #> 2   1   0.5 NA    NA   NA   NA     1     1 70  50 #> 3   1   1.0 NA    NA   NA   NA     1     1 70  50 #> 4   1   2.0 NA    NA   NA   NA     1     1 70  50 #> 5   1   6.0 NA    NA   NA   NA     1     1 70  50 #> 6   1  10.0 NA    NA   NA   20     1     1 70  50 #> 7   1  24.0 NA    NA   NA   NA     1     2 70  50 #> 8   1  36.0 NA    NA   NA   NA     1     2 70  50 #> 9   1  72.0 NA    NA   NA   NA     1     2 70  50 #> 10  1 120.0 NA    NA   NA   NA     1     2 70  50 #> 11  2   0.5 NA    NA   NA 1000     1     1 70  50 #> 12  2   0.5 NA    NA   NA   NA     1     1 70  50 #> 13  2   1.0 NA    NA   NA   NA     1     1 70  50 #> 14  2   2.0 NA    NA   NA   NA     1     1 70  50 #> 15  2   6.0 NA    NA   NA   NA     1     1 70  50 #> 16  2  10.0 NA    NA   NA   20     1     1 70  50 #> 17  2  24.0 NA    NA   NA   NA     1     2 70  50 #> 18  2  36.0 NA    NA   NA   NA     1     2 70  50 #> 19  2  72.0 NA    NA   NA   NA     1     2 70  50 #> 20  2 120.0 NA    NA   NA   NA     1     2 70  50 #> 21  3   0.5 NA    NA   NA 1000     1     1 70  50 #> 22  3   0.5 NA    NA   NA   NA     1     1 70  50 #> 23  3   1.0 NA    NA   NA   NA     1     1 70  50 #> 24  3   2.0 NA    NA   NA   NA     1     1 70  50 #> 25  3   6.0 NA    NA   NA   NA     1     1 70  50 #> 26  3  10.0 NA    NA   NA   20     1     1 70  50 #> 27  3  24.0 NA    NA   NA   NA     1     2 70  50 #> 28  3  36.0 NA    NA   NA   NA     1     2 70  50 #> 29  3  72.0 NA    NA   NA   NA     1     2 70  50 #> 30  3 120.0 NA    NA   NA   NA     1     2 70  50 #> 31  4   0.5 NA    NA   NA 1000     2     1 60  45 #> 32  4   0.5 NA    NA   NA   NA     2     1 60  45 #> 33  4   1.0 NA    NA   NA   NA     2     1 60  45 #> 34  4   2.0 NA    NA   NA   NA     2     1 60  45 #> 35  4   6.0 NA    NA   NA   NA     2     1 60  45 #> 36  4  10.0 NA    NA   NA   20     2     1 60  45 #> 37  4  24.0 NA    NA   NA   NA     2     2 60  45 #> 38  4  36.0 NA    NA   NA   NA     2     2 60  45 #> 39  4  72.0 NA    NA   NA   NA     2     2 60  45 #> 40  4 120.0 NA    NA   NA   NA     2     2 60  45 #> 41  5   0.5 NA    NA   NA 1000     2     1 60  45 #> 42  5   0.5 NA    NA   NA   NA     2     1 60  45 #> 43  5   1.0 NA    NA   NA   NA     2     1 60  45 #> 44  5   2.0 NA    NA   NA   NA     2     1 60  45 #> 45  5   6.0 NA    NA   NA   NA     2     1 60  45 #> 46  5  10.0 NA    NA   NA   20     2     1 60  45 #> 47  5  24.0 NA    NA   NA   NA     2     2 60  45 #> 48  5  36.0 NA    NA   NA   NA     2     2 60  45 #> 49  5  72.0 NA    NA   NA   NA     2     2 60  45 #> 50  5 120.0 NA    NA   NA   NA     2     2 60  45 #> 51  6   0.5 NA    NA   NA 1000     2     1 60  45 #> 52  6   0.5 NA    NA   NA   NA     2     1 60  45 #> 53  6   1.0 NA    NA   NA   NA     2     1 60  45 #> 54  6   2.0 NA    NA   NA   NA     2     1 60  45 #> 55  6   6.0 NA    NA   NA   NA     2     1 60  45 #> 56  6  10.0 NA    NA   NA   20     2     1 60  45 #> 57  6  24.0 NA    NA   NA   NA     2     2 60  45 #> 58  6  36.0 NA    NA   NA   NA     2     2 60  45 #> 59  6  72.0 NA    NA   NA   NA     2     2 60  45 #> 60  6 120.0 NA    NA   NA   NA     2     2 60  45 model_prediction(design=design_4,DV=TRUE,dosing=dosing_4,model_num_points = 10) #>     ID       Time DV IPRED PRED  AMT Group Model WT AGE #> 1    1   0.500000 NA    NA   NA 1000     1     1 70  50 #> 2    1   0.500000 NA    NA   NA   NA     1     1 70  50 #> 3    1   1.000000 NA    NA   NA   NA     1     1 70  50 #> 4    1   1.111111 NA    NA   NA   NA     1     1 70  50 #> 5    1   1.722222 NA    NA   NA   NA     1     1 70  50 #> 6    1   2.000000 NA    NA   NA   NA     1     1 70  50 #> 7    1   2.333333 NA    NA   NA   NA     1     1 70  50 #> 8    1   2.944444 NA    NA   NA   NA     1     1 70  50 #> 9    1   3.555556 NA    NA   NA   NA     1     1 70  50 #> 10   1   4.166667 NA    NA   NA   NA     1     1 70  50 #> 11   1   4.777778 NA    NA   NA   NA     1     1 70  50 #> 12   1   5.388889 NA    NA   NA   NA     1     1 70  50 #> 13   1   6.000000 NA    NA   NA   NA     1     1 70  50 #> 14   1  10.000000 NA    NA   NA   20     1     1 70  50 #> 15   1  24.000000 NA    NA   NA   NA     1     2 70  50 #> 16   1  34.666667 NA    NA   NA   NA     1     2 70  50 #> 17   1  36.000000 NA    NA   NA   NA     1     2 70  50 #> 18   1  45.333333 NA    NA   NA   NA     1     2 70  50 #> 19   1  56.000000 NA    NA   NA   NA     1     2 70  50 #> 20   1  66.666667 NA    NA   NA   NA     1     2 70  50 #> 21   1  72.000000 NA    NA   NA   NA     1     2 70  50 #> 22   1  77.333333 NA    NA   NA   NA     1     2 70  50 #> 23   1  88.000000 NA    NA   NA   NA     1     2 70  50 #> 24   1  98.666667 NA    NA   NA   NA     1     2 70  50 #> 25   1 109.333333 NA    NA   NA   NA     1     2 70  50 #> 26   1 120.000000 NA    NA   NA   NA     1     2 70  50 #> 27   2   0.500000 NA    NA   NA 1000     1     1 70  50 #> 28   2   0.500000 NA    NA   NA   NA     1     1 70  50 #> 29   2   1.000000 NA    NA   NA   NA     1     1 70  50 #> 30   2   1.111111 NA    NA   NA   NA     1     1 70  50 #> 31   2   1.722222 NA    NA   NA   NA     1     1 70  50 #> 32   2   2.000000 NA    NA   NA   NA     1     1 70  50 #> 33   2   2.333333 NA    NA   NA   NA     1     1 70  50 #> 34   2   2.944444 NA    NA   NA   NA     1     1 70  50 #> 35   2   3.555556 NA    NA   NA   NA     1     1 70  50 #> 36   2   4.166667 NA    NA   NA   NA     1     1 70  50 #> 37   2   4.777778 NA    NA   NA   NA     1     1 70  50 #> 38   2   5.388889 NA    NA   NA   NA     1     1 70  50 #> 39   2   6.000000 NA    NA   NA   NA     1     1 70  50 #> 40   2  10.000000 NA    NA   NA   20     1     1 70  50 #> 41   2  24.000000 NA    NA   NA   NA     1     2 70  50 #> 42   2  34.666667 NA    NA   NA   NA     1     2 70  50 #> 43   2  36.000000 NA    NA   NA   NA     1     2 70  50 #> 44   2  45.333333 NA    NA   NA   NA     1     2 70  50 #> 45   2  56.000000 NA    NA   NA   NA     1     2 70  50 #> 46   2  66.666667 NA    NA   NA   NA     1     2 70  50 #> 47   2  72.000000 NA    NA   NA   NA     1     2 70  50 #> 48   2  77.333333 NA    NA   NA   NA     1     2 70  50 #> 49   2  88.000000 NA    NA   NA   NA     1     2 70  50 #> 50   2  98.666667 NA    NA   NA   NA     1     2 70  50 #> 51   2 109.333333 NA    NA   NA   NA     1     2 70  50 #> 52   2 120.000000 NA    NA   NA   NA     1     2 70  50 #> 53   3   0.500000 NA    NA   NA 1000     1     1 70  50 #> 54   3   0.500000 NA    NA   NA   NA     1     1 70  50 #> 55   3   1.000000 NA    NA   NA   NA     1     1 70  50 #> 56   3   1.111111 NA    NA   NA   NA     1     1 70  50 #> 57   3   1.722222 NA    NA   NA   NA     1     1 70  50 #> 58   3   2.000000 NA    NA   NA   NA     1     1 70  50 #> 59   3   2.333333 NA    NA   NA   NA     1     1 70  50 #> 60   3   2.944444 NA    NA   NA   NA     1     1 70  50 #> 61   3   3.555556 NA    NA   NA   NA     1     1 70  50 #> 62   3   4.166667 NA    NA   NA   NA     1     1 70  50 #> 63   3   4.777778 NA    NA   NA   NA     1     1 70  50 #> 64   3   5.388889 NA    NA   NA   NA     1     1 70  50 #> 65   3   6.000000 NA    NA   NA   NA     1     1 70  50 #> 66   3  10.000000 NA    NA   NA   20     1     1 70  50 #> 67   3  24.000000 NA    NA   NA   NA     1     2 70  50 #> 68   3  34.666667 NA    NA   NA   NA     1     2 70  50 #> 69   3  36.000000 NA    NA   NA   NA     1     2 70  50 #> 70   3  45.333333 NA    NA   NA   NA     1     2 70  50 #> 71   3  56.000000 NA    NA   NA   NA     1     2 70  50 #> 72   3  66.666667 NA    NA   NA   NA     1     2 70  50 #> 73   3  72.000000 NA    NA   NA   NA     1     2 70  50 #> 74   3  77.333333 NA    NA   NA   NA     1     2 70  50 #> 75   3  88.000000 NA    NA   NA   NA     1     2 70  50 #> 76   3  98.666667 NA    NA   NA   NA     1     2 70  50 #> 77   3 109.333333 NA    NA   NA   NA     1     2 70  50 #> 78   3 120.000000 NA    NA   NA   NA     1     2 70  50 #> 79   4   0.500000 NA    NA   NA 1000     2     1 60  45 #> 80   4   0.500000 NA    NA   NA   NA     2     1 60  45 #> 81   4   1.000000 NA    NA   NA   NA     2     1 60  45 #> 82   4   1.111111 NA    NA   NA   NA     2     1 60  45 #> 83   4   1.722222 NA    NA   NA   NA     2     1 60  45 #> 84   4   2.000000 NA    NA   NA   NA     2     1 60  45 #> 85   4   2.333333 NA    NA   NA   NA     2     1 60  45 #> 86   4   2.944444 NA    NA   NA   NA     2     1 60  45 #> 87   4   3.555556 NA    NA   NA   NA     2     1 60  45 #> 88   4   4.166667 NA    NA   NA   NA     2     1 60  45 #> 89   4   4.777778 NA    NA   NA   NA     2     1 60  45 #> 90   4   5.388889 NA    NA   NA   NA     2     1 60  45 #> 91   4   6.000000 NA    NA   NA   NA     2     1 60  45 #> 92   4  10.000000 NA    NA   NA   20     2     1 60  45 #> 93   4  24.000000 NA    NA   NA   NA     2     2 60  45 #> 94   4  34.666667 NA    NA   NA   NA     2     2 60  45 #> 95   4  36.000000 NA    NA   NA   NA     2     2 60  45 #> 96   4  45.333333 NA    NA   NA   NA     2     2 60  45 #> 97   4  56.000000 NA    NA   NA   NA     2     2 60  45 #> 98   4  66.666667 NA    NA   NA   NA     2     2 60  45 #> 99   4  72.000000 NA    NA   NA   NA     2     2 60  45 #> 100  4  77.333333 NA    NA   NA   NA     2     2 60  45 #> 101  4  88.000000 NA    NA   NA   NA     2     2 60  45 #> 102  4  98.666667 NA    NA   NA   NA     2     2 60  45 #> 103  4 109.333333 NA    NA   NA   NA     2     2 60  45 #> 104  4 120.000000 NA    NA   NA   NA     2     2 60  45 #> 105  5   0.500000 NA    NA   NA 1000     2     1 60  45 #> 106  5   0.500000 NA    NA   NA   NA     2     1 60  45 #> 107  5   1.000000 NA    NA   NA   NA     2     1 60  45 #> 108  5   1.111111 NA    NA   NA   NA     2     1 60  45 #> 109  5   1.722222 NA    NA   NA   NA     2     1 60  45 #> 110  5   2.000000 NA    NA   NA   NA     2     1 60  45 #> 111  5   2.333333 NA    NA   NA   NA     2     1 60  45 #> 112  5   2.944444 NA    NA   NA   NA     2     1 60  45 #> 113  5   3.555556 NA    NA   NA   NA     2     1 60  45 #> 114  5   4.166667 NA    NA   NA   NA     2     1 60  45 #> 115  5   4.777778 NA    NA   NA   NA     2     1 60  45 #> 116  5   5.388889 NA    NA   NA   NA     2     1 60  45 #> 117  5   6.000000 NA    NA   NA   NA     2     1 60  45 #> 118  5  10.000000 NA    NA   NA   20     2     1 60  45 #> 119  5  24.000000 NA    NA   NA   NA     2     2 60  45 #> 120  5  34.666667 NA    NA   NA   NA     2     2 60  45 #> 121  5  36.000000 NA    NA   NA   NA     2     2 60  45 #> 122  5  45.333333 NA    NA   NA   NA     2     2 60  45 #> 123  5  56.000000 NA    NA   NA   NA     2     2 60  45 #> 124  5  66.666667 NA    NA   NA   NA     2     2 60  45 #> 125  5  72.000000 NA    NA   NA   NA     2     2 60  45 #> 126  5  77.333333 NA    NA   NA   NA     2     2 60  45 #> 127  5  88.000000 NA    NA   NA   NA     2     2 60  45 #> 128  5  98.666667 NA    NA   NA   NA     2     2 60  45 #> 129  5 109.333333 NA    NA   NA   NA     2     2 60  45 #> 130  5 120.000000 NA    NA   NA   NA     2     2 60  45 #> 131  6   0.500000 NA    NA   NA 1000     2     1 60  45 #> 132  6   0.500000 NA    NA   NA   NA     2     1 60  45 #> 133  6   1.000000 NA    NA   NA   NA     2     1 60  45 #> 134  6   1.111111 NA    NA   NA   NA     2     1 60  45 #> 135  6   1.722222 NA    NA   NA   NA     2     1 60  45 #> 136  6   2.000000 NA    NA   NA   NA     2     1 60  45 #> 137  6   2.333333 NA    NA   NA   NA     2     1 60  45 #> 138  6   2.944444 NA    NA   NA   NA     2     1 60  45 #> 139  6   3.555556 NA    NA   NA   NA     2     1 60  45 #> 140  6   4.166667 NA    NA   NA   NA     2     1 60  45 #> 141  6   4.777778 NA    NA   NA   NA     2     1 60  45 #> 142  6   5.388889 NA    NA   NA   NA     2     1 60  45 #> 143  6   6.000000 NA    NA   NA   NA     2     1 60  45 #> 144  6  10.000000 NA    NA   NA   20     2     1 60  45 #> 145  6  24.000000 NA    NA   NA   NA     2     2 60  45 #> 146  6  34.666667 NA    NA   NA   NA     2     2 60  45 #> 147  6  36.000000 NA    NA   NA   NA     2     2 60  45 #> 148  6  45.333333 NA    NA   NA   NA     2     2 60  45 #> 149  6  56.000000 NA    NA   NA   NA     2     2 60  45 #> 150  6  66.666667 NA    NA   NA   NA     2     2 60  45 #> 151  6  72.000000 NA    NA   NA   NA     2     2 60  45 #> 152  6  77.333333 NA    NA   NA   NA     2     2 60  45 #> 153  6  88.000000 NA    NA   NA   NA     2     2 60  45 #> 154  6  98.666667 NA    NA   NA   NA     2     2 60  45 #> 155  6 109.333333 NA    NA   NA   NA     2     2 60  45 #> 156  6 120.000000 NA    NA   NA   NA     2     2 60  45 model_prediction(design=design_4,DV=TRUE,dosing=dosing_4,model_num_points = 10,                  model_minxt=10,model_maxxt=100) #>     ID  Time DV IPRED PRED  AMT Group Model WT AGE #> 1    1   0.5 NA    NA   NA 1000     1     1 70  50 #> 2    1   0.5 NA    NA   NA   NA     1     1 70  50 #> 3    1   1.0 NA    NA   NA   NA     1     1 70  50 #> 4    1   2.0 NA    NA   NA   NA     1     1 70  50 #> 5    1   6.0 NA    NA   NA   NA     1     1 70  50 #> 6    1  10.0 NA    NA   NA   20     1     1 70  50 #> 7    1  10.0 NA    NA   NA   NA     1     1 70  50 #> 8    1  10.0 NA    NA   NA   NA     1     2 70  50 #> 9    1  20.0 NA    NA   NA   NA     1     1 70  50 #> 10   1  20.0 NA    NA   NA   NA     1     2 70  50 #> 11   1  24.0 NA    NA   NA   NA     1     2 70  50 #> 12   1  30.0 NA    NA   NA   NA     1     1 70  50 #> 13   1  30.0 NA    NA   NA   NA     1     2 70  50 #> 14   1  36.0 NA    NA   NA   NA     1     2 70  50 #> 15   1  40.0 NA    NA   NA   NA     1     1 70  50 #> 16   1  40.0 NA    NA   NA   NA     1     2 70  50 #> 17   1  50.0 NA    NA   NA   NA     1     1 70  50 #> 18   1  50.0 NA    NA   NA   NA     1     2 70  50 #> 19   1  60.0 NA    NA   NA   NA     1     1 70  50 #> 20   1  60.0 NA    NA   NA   NA     1     2 70  50 #> 21   1  70.0 NA    NA   NA   NA     1     1 70  50 #> 22   1  70.0 NA    NA   NA   NA     1     2 70  50 #> 23   1  72.0 NA    NA   NA   NA     1     2 70  50 #> 24   1  80.0 NA    NA   NA   NA     1     1 70  50 #> 25   1  80.0 NA    NA   NA   NA     1     2 70  50 #> 26   1  90.0 NA    NA   NA   NA     1     1 70  50 #> 27   1  90.0 NA    NA   NA   NA     1     2 70  50 #> 28   1 100.0 NA    NA   NA   NA     1     1 70  50 #> 29   1 100.0 NA    NA   NA   NA     1     2 70  50 #> 30   1 120.0 NA    NA   NA   NA     1     2 70  50 #> 31   2   0.5 NA    NA   NA 1000     1     1 70  50 #> 32   2   0.5 NA    NA   NA   NA     1     1 70  50 #> 33   2   1.0 NA    NA   NA   NA     1     1 70  50 #> 34   2   2.0 NA    NA   NA   NA     1     1 70  50 #> 35   2   6.0 NA    NA   NA   NA     1     1 70  50 #> 36   2  10.0 NA    NA   NA   20     1     1 70  50 #> 37   2  10.0 NA    NA   NA   NA     1     1 70  50 #> 38   2  10.0 NA    NA   NA   NA     1     2 70  50 #> 39   2  20.0 NA    NA   NA   NA     1     1 70  50 #> 40   2  20.0 NA    NA   NA   NA     1     2 70  50 #> 41   2  24.0 NA    NA   NA   NA     1     2 70  50 #> 42   2  30.0 NA    NA   NA   NA     1     1 70  50 #> 43   2  30.0 NA    NA   NA   NA     1     2 70  50 #> 44   2  36.0 NA    NA   NA   NA     1     2 70  50 #> 45   2  40.0 NA    NA   NA   NA     1     1 70  50 #> 46   2  40.0 NA    NA   NA   NA     1     2 70  50 #> 47   2  50.0 NA    NA   NA   NA     1     1 70  50 #> 48   2  50.0 NA    NA   NA   NA     1     2 70  50 #> 49   2  60.0 NA    NA   NA   NA     1     1 70  50 #> 50   2  60.0 NA    NA   NA   NA     1     2 70  50 #> 51   2  70.0 NA    NA   NA   NA     1     1 70  50 #> 52   2  70.0 NA    NA   NA   NA     1     2 70  50 #> 53   2  72.0 NA    NA   NA   NA     1     2 70  50 #> 54   2  80.0 NA    NA   NA   NA     1     1 70  50 #> 55   2  80.0 NA    NA   NA   NA     1     2 70  50 #> 56   2  90.0 NA    NA   NA   NA     1     1 70  50 #> 57   2  90.0 NA    NA   NA   NA     1     2 70  50 #> 58   2 100.0 NA    NA   NA   NA     1     1 70  50 #> 59   2 100.0 NA    NA   NA   NA     1     2 70  50 #> 60   2 120.0 NA    NA   NA   NA     1     2 70  50 #> 61   3   0.5 NA    NA   NA 1000     1     1 70  50 #> 62   3   0.5 NA    NA   NA   NA     1     1 70  50 #> 63   3   1.0 NA    NA   NA   NA     1     1 70  50 #> 64   3   2.0 NA    NA   NA   NA     1     1 70  50 #> 65   3   6.0 NA    NA   NA   NA     1     1 70  50 #> 66   3  10.0 NA    NA   NA   20     1     1 70  50 #> 67   3  10.0 NA    NA   NA   NA     1     1 70  50 #> 68   3  10.0 NA    NA   NA   NA     1     2 70  50 #> 69   3  20.0 NA    NA   NA   NA     1     1 70  50 #> 70   3  20.0 NA    NA   NA   NA     1     2 70  50 #> 71   3  24.0 NA    NA   NA   NA     1     2 70  50 #> 72   3  30.0 NA    NA   NA   NA     1     1 70  50 #> 73   3  30.0 NA    NA   NA   NA     1     2 70  50 #> 74   3  36.0 NA    NA   NA   NA     1     2 70  50 #> 75   3  40.0 NA    NA   NA   NA     1     1 70  50 #> 76   3  40.0 NA    NA   NA   NA     1     2 70  50 #> 77   3  50.0 NA    NA   NA   NA     1     1 70  50 #> 78   3  50.0 NA    NA   NA   NA     1     2 70  50 #> 79   3  60.0 NA    NA   NA   NA     1     1 70  50 #> 80   3  60.0 NA    NA   NA   NA     1     2 70  50 #> 81   3  70.0 NA    NA   NA   NA     1     1 70  50 #> 82   3  70.0 NA    NA   NA   NA     1     2 70  50 #> 83   3  72.0 NA    NA   NA   NA     1     2 70  50 #> 84   3  80.0 NA    NA   NA   NA     1     1 70  50 #> 85   3  80.0 NA    NA   NA   NA     1     2 70  50 #> 86   3  90.0 NA    NA   NA   NA     1     1 70  50 #> 87   3  90.0 NA    NA   NA   NA     1     2 70  50 #> 88   3 100.0 NA    NA   NA   NA     1     1 70  50 #> 89   3 100.0 NA    NA   NA   NA     1     2 70  50 #> 90   3 120.0 NA    NA   NA   NA     1     2 70  50 #> 91   4   0.5 NA    NA   NA 1000     2     1 60  45 #> 92   4   0.5 NA    NA   NA   NA     2     1 60  45 #> 93   4   1.0 NA    NA   NA   NA     2     1 60  45 #> 94   4   2.0 NA    NA   NA   NA     2     1 60  45 #> 95   4   6.0 NA    NA   NA   NA     2     1 60  45 #> 96   4  10.0 NA    NA   NA   20     2     1 60  45 #> 97   4  10.0 NA    NA   NA   NA     2     1 60  45 #> 98   4  10.0 NA    NA   NA   NA     2     2 60  45 #> 99   4  20.0 NA    NA   NA   NA     2     1 60  45 #> 100  4  20.0 NA    NA   NA   NA     2     2 60  45 #> 101  4  24.0 NA    NA   NA   NA     2     2 60  45 #> 102  4  30.0 NA    NA   NA   NA     2     1 60  45 #> 103  4  30.0 NA    NA   NA   NA     2     2 60  45 #> 104  4  36.0 NA    NA   NA   NA     2     2 60  45 #> 105  4  40.0 NA    NA   NA   NA     2     1 60  45 #> 106  4  40.0 NA    NA   NA   NA     2     2 60  45 #> 107  4  50.0 NA    NA   NA   NA     2     1 60  45 #> 108  4  50.0 NA    NA   NA   NA     2     2 60  45 #> 109  4  60.0 NA    NA   NA   NA     2     1 60  45 #> 110  4  60.0 NA    NA   NA   NA     2     2 60  45 #> 111  4  70.0 NA    NA   NA   NA     2     1 60  45 #> 112  4  70.0 NA    NA   NA   NA     2     2 60  45 #> 113  4  72.0 NA    NA   NA   NA     2     2 60  45 #> 114  4  80.0 NA    NA   NA   NA     2     1 60  45 #> 115  4  80.0 NA    NA   NA   NA     2     2 60  45 #> 116  4  90.0 NA    NA   NA   NA     2     1 60  45 #> 117  4  90.0 NA    NA   NA   NA     2     2 60  45 #> 118  4 100.0 NA    NA   NA   NA     2     1 60  45 #> 119  4 100.0 NA    NA   NA   NA     2     2 60  45 #> 120  4 120.0 NA    NA   NA   NA     2     2 60  45 #> 121  5   0.5 NA    NA   NA 1000     2     1 60  45 #> 122  5   0.5 NA    NA   NA   NA     2     1 60  45 #> 123  5   1.0 NA    NA   NA   NA     2     1 60  45 #> 124  5   2.0 NA    NA   NA   NA     2     1 60  45 #> 125  5   6.0 NA    NA   NA   NA     2     1 60  45 #> 126  5  10.0 NA    NA   NA   20     2     1 60  45 #> 127  5  10.0 NA    NA   NA   NA     2     1 60  45 #> 128  5  10.0 NA    NA   NA   NA     2     2 60  45 #> 129  5  20.0 NA    NA   NA   NA     2     1 60  45 #> 130  5  20.0 NA    NA   NA   NA     2     2 60  45 #> 131  5  24.0 NA    NA   NA   NA     2     2 60  45 #> 132  5  30.0 NA    NA   NA   NA     2     1 60  45 #> 133  5  30.0 NA    NA   NA   NA     2     2 60  45 #> 134  5  36.0 NA    NA   NA   NA     2     2 60  45 #> 135  5  40.0 NA    NA   NA   NA     2     1 60  45 #> 136  5  40.0 NA    NA   NA   NA     2     2 60  45 #> 137  5  50.0 NA    NA   NA   NA     2     1 60  45 #> 138  5  50.0 NA    NA   NA   NA     2     2 60  45 #> 139  5  60.0 NA    NA   NA   NA     2     1 60  45 #> 140  5  60.0 NA    NA   NA   NA     2     2 60  45 #> 141  5  70.0 NA    NA   NA   NA     2     1 60  45 #> 142  5  70.0 NA    NA   NA   NA     2     2 60  45 #> 143  5  72.0 NA    NA   NA   NA     2     2 60  45 #> 144  5  80.0 NA    NA   NA   NA     2     1 60  45 #> 145  5  80.0 NA    NA   NA   NA     2     2 60  45 #> 146  5  90.0 NA    NA   NA   NA     2     1 60  45 #> 147  5  90.0 NA    NA   NA   NA     2     2 60  45 #> 148  5 100.0 NA    NA   NA   NA     2     1 60  45 #> 149  5 100.0 NA    NA   NA   NA     2     2 60  45 #> 150  5 120.0 NA    NA   NA   NA     2     2 60  45 #> 151  6   0.5 NA    NA   NA 1000     2     1 60  45 #> 152  6   0.5 NA    NA   NA   NA     2     1 60  45 #> 153  6   1.0 NA    NA   NA   NA     2     1 60  45 #> 154  6   2.0 NA    NA   NA   NA     2     1 60  45 #> 155  6   6.0 NA    NA   NA   NA     2     1 60  45 #> 156  6  10.0 NA    NA   NA   20     2     1 60  45 #> 157  6  10.0 NA    NA   NA   NA     2     1 60  45 #> 158  6  10.0 NA    NA   NA   NA     2     2 60  45 #> 159  6  20.0 NA    NA   NA   NA     2     1 60  45 #> 160  6  20.0 NA    NA   NA   NA     2     2 60  45 #> 161  6  24.0 NA    NA   NA   NA     2     2 60  45 #> 162  6  30.0 NA    NA   NA   NA     2     1 60  45 #> 163  6  30.0 NA    NA   NA   NA     2     2 60  45 #> 164  6  36.0 NA    NA   NA   NA     2     2 60  45 #> 165  6  40.0 NA    NA   NA   NA     2     1 60  45 #> 166  6  40.0 NA    NA   NA   NA     2     2 60  45 #> 167  6  50.0 NA    NA   NA   NA     2     1 60  45 #> 168  6  50.0 NA    NA   NA   NA     2     2 60  45 #> 169  6  60.0 NA    NA   NA   NA     2     1 60  45 #> 170  6  60.0 NA    NA   NA   NA     2     2 60  45 #> 171  6  70.0 NA    NA   NA   NA     2     1 60  45 #> 172  6  70.0 NA    NA   NA   NA     2     2 60  45 #> 173  6  72.0 NA    NA   NA   NA     2     2 60  45 #> 174  6  80.0 NA    NA   NA   NA     2     1 60  45 #> 175  6  80.0 NA    NA   NA   NA     2     2 60  45 #> 176  6  90.0 NA    NA   NA   NA     2     1 60  45 #> 177  6  90.0 NA    NA   NA   NA     2     2 60  45 #> 178  6 100.0 NA    NA   NA   NA     2     1 60  45 #> 179  6 100.0 NA    NA   NA   NA     2     2 60  45 #> 180  6 120.0 NA    NA   NA   NA     2     2 60  45 model_prediction(design=design_4,DV=TRUE,dosing=dosing_4,model_num_points = 10,                  model_minxt=c(20,20),model_maxxt=c(100,100)) #>     ID      Time DV IPRED PRED  AMT Group Model WT AGE #> 1    1   0.50000 NA    NA   NA 1000     1     1 70  50 #> 2    1   0.50000 NA    NA   NA   NA     1     1 70  50 #> 3    1   1.00000 NA    NA   NA   NA     1     1 70  50 #> 4    1   2.00000 NA    NA   NA   NA     1     1 70  50 #> 5    1   6.00000 NA    NA   NA   NA     1     1 70  50 #> 6    1  10.00000 NA    NA   NA   20     1     1 70  50 #> 7    1  20.00000 NA    NA   NA   NA     1     1 70  50 #> 8    1  20.00000 NA    NA   NA   NA     1     2 70  50 #> 9    1  24.00000 NA    NA   NA   NA     1     2 70  50 #> 10   1  28.88889 NA    NA   NA   NA     1     1 70  50 #> 11   1  28.88889 NA    NA   NA   NA     1     2 70  50 #> 12   1  36.00000 NA    NA   NA   NA     1     2 70  50 #> 13   1  37.77778 NA    NA   NA   NA     1     1 70  50 #> 14   1  37.77778 NA    NA   NA   NA     1     2 70  50 #> 15   1  46.66667 NA    NA   NA   NA     1     1 70  50 #> 16   1  46.66667 NA    NA   NA   NA     1     2 70  50 #> 17   1  55.55556 NA    NA   NA   NA     1     1 70  50 #> 18   1  55.55556 NA    NA   NA   NA     1     2 70  50 #> 19   1  64.44444 NA    NA   NA   NA     1     1 70  50 #> 20   1  64.44444 NA    NA   NA   NA     1     2 70  50 #> 21   1  72.00000 NA    NA   NA   NA     1     2 70  50 #> 22   1  73.33333 NA    NA   NA   NA     1     1 70  50 #> 23   1  73.33333 NA    NA   NA   NA     1     2 70  50 #> 24   1  82.22222 NA    NA   NA   NA     1     1 70  50 #> 25   1  82.22222 NA    NA   NA   NA     1     2 70  50 #> 26   1  91.11111 NA    NA   NA   NA     1     1 70  50 #> 27   1  91.11111 NA    NA   NA   NA     1     2 70  50 #> 28   1 100.00000 NA    NA   NA   NA     1     1 70  50 #> 29   1 100.00000 NA    NA   NA   NA     1     2 70  50 #> 30   1 120.00000 NA    NA   NA   NA     1     2 70  50 #> 31   2   0.50000 NA    NA   NA 1000     1     1 70  50 #> 32   2   0.50000 NA    NA   NA   NA     1     1 70  50 #> 33   2   1.00000 NA    NA   NA   NA     1     1 70  50 #> 34   2   2.00000 NA    NA   NA   NA     1     1 70  50 #> 35   2   6.00000 NA    NA   NA   NA     1     1 70  50 #> 36   2  10.00000 NA    NA   NA   20     1     1 70  50 #> 37   2  20.00000 NA    NA   NA   NA     1     1 70  50 #> 38   2  20.00000 NA    NA   NA   NA     1     2 70  50 #> 39   2  24.00000 NA    NA   NA   NA     1     2 70  50 #> 40   2  28.88889 NA    NA   NA   NA     1     1 70  50 #> 41   2  28.88889 NA    NA   NA   NA     1     2 70  50 #> 42   2  36.00000 NA    NA   NA   NA     1     2 70  50 #> 43   2  37.77778 NA    NA   NA   NA     1     1 70  50 #> 44   2  37.77778 NA    NA   NA   NA     1     2 70  50 #> 45   2  46.66667 NA    NA   NA   NA     1     1 70  50 #> 46   2  46.66667 NA    NA   NA   NA     1     2 70  50 #> 47   2  55.55556 NA    NA   NA   NA     1     1 70  50 #> 48   2  55.55556 NA    NA   NA   NA     1     2 70  50 #> 49   2  64.44444 NA    NA   NA   NA     1     1 70  50 #> 50   2  64.44444 NA    NA   NA   NA     1     2 70  50 #> 51   2  72.00000 NA    NA   NA   NA     1     2 70  50 #> 52   2  73.33333 NA    NA   NA   NA     1     1 70  50 #> 53   2  73.33333 NA    NA   NA   NA     1     2 70  50 #> 54   2  82.22222 NA    NA   NA   NA     1     1 70  50 #> 55   2  82.22222 NA    NA   NA   NA     1     2 70  50 #> 56   2  91.11111 NA    NA   NA   NA     1     1 70  50 #> 57   2  91.11111 NA    NA   NA   NA     1     2 70  50 #> 58   2 100.00000 NA    NA   NA   NA     1     1 70  50 #> 59   2 100.00000 NA    NA   NA   NA     1     2 70  50 #> 60   2 120.00000 NA    NA   NA   NA     1     2 70  50 #> 61   3   0.50000 NA    NA   NA 1000     1     1 70  50 #> 62   3   0.50000 NA    NA   NA   NA     1     1 70  50 #> 63   3   1.00000 NA    NA   NA   NA     1     1 70  50 #> 64   3   2.00000 NA    NA   NA   NA     1     1 70  50 #> 65   3   6.00000 NA    NA   NA   NA     1     1 70  50 #> 66   3  10.00000 NA    NA   NA   20     1     1 70  50 #> 67   3  20.00000 NA    NA   NA   NA     1     1 70  50 #> 68   3  20.00000 NA    NA   NA   NA     1     2 70  50 #> 69   3  24.00000 NA    NA   NA   NA     1     2 70  50 #> 70   3  28.88889 NA    NA   NA   NA     1     1 70  50 #> 71   3  28.88889 NA    NA   NA   NA     1     2 70  50 #> 72   3  36.00000 NA    NA   NA   NA     1     2 70  50 #> 73   3  37.77778 NA    NA   NA   NA     1     1 70  50 #> 74   3  37.77778 NA    NA   NA   NA     1     2 70  50 #> 75   3  46.66667 NA    NA   NA   NA     1     1 70  50 #> 76   3  46.66667 NA    NA   NA   NA     1     2 70  50 #> 77   3  55.55556 NA    NA   NA   NA     1     1 70  50 #> 78   3  55.55556 NA    NA   NA   NA     1     2 70  50 #> 79   3  64.44444 NA    NA   NA   NA     1     1 70  50 #> 80   3  64.44444 NA    NA   NA   NA     1     2 70  50 #> 81   3  72.00000 NA    NA   NA   NA     1     2 70  50 #> 82   3  73.33333 NA    NA   NA   NA     1     1 70  50 #> 83   3  73.33333 NA    NA   NA   NA     1     2 70  50 #> 84   3  82.22222 NA    NA   NA   NA     1     1 70  50 #> 85   3  82.22222 NA    NA   NA   NA     1     2 70  50 #> 86   3  91.11111 NA    NA   NA   NA     1     1 70  50 #> 87   3  91.11111 NA    NA   NA   NA     1     2 70  50 #> 88   3 100.00000 NA    NA   NA   NA     1     1 70  50 #> 89   3 100.00000 NA    NA   NA   NA     1     2 70  50 #> 90   3 120.00000 NA    NA   NA   NA     1     2 70  50 #> 91   4   0.50000 NA    NA   NA 1000     2     1 60  45 #> 92   4   0.50000 NA    NA   NA   NA     2     1 60  45 #> 93   4   1.00000 NA    NA   NA   NA     2     1 60  45 #> 94   4   2.00000 NA    NA   NA   NA     2     1 60  45 #> 95   4   6.00000 NA    NA   NA   NA     2     1 60  45 #> 96   4  10.00000 NA    NA   NA   20     2     1 60  45 #> 97   4  20.00000 NA    NA   NA   NA     2     1 60  45 #> 98   4  20.00000 NA    NA   NA   NA     2     2 60  45 #> 99   4  24.00000 NA    NA   NA   NA     2     2 60  45 #> 100  4  28.88889 NA    NA   NA   NA     2     1 60  45 #> 101  4  28.88889 NA    NA   NA   NA     2     2 60  45 #> 102  4  36.00000 NA    NA   NA   NA     2     2 60  45 #> 103  4  37.77778 NA    NA   NA   NA     2     1 60  45 #> 104  4  37.77778 NA    NA   NA   NA     2     2 60  45 #> 105  4  46.66667 NA    NA   NA   NA     2     1 60  45 #> 106  4  46.66667 NA    NA   NA   NA     2     2 60  45 #> 107  4  55.55556 NA    NA   NA   NA     2     1 60  45 #> 108  4  55.55556 NA    NA   NA   NA     2     2 60  45 #> 109  4  64.44444 NA    NA   NA   NA     2     1 60  45 #> 110  4  64.44444 NA    NA   NA   NA     2     2 60  45 #> 111  4  72.00000 NA    NA   NA   NA     2     2 60  45 #> 112  4  73.33333 NA    NA   NA   NA     2     1 60  45 #> 113  4  73.33333 NA    NA   NA   NA     2     2 60  45 #> 114  4  82.22222 NA    NA   NA   NA     2     1 60  45 #> 115  4  82.22222 NA    NA   NA   NA     2     2 60  45 #> 116  4  91.11111 NA    NA   NA   NA     2     1 60  45 #> 117  4  91.11111 NA    NA   NA   NA     2     2 60  45 #> 118  4 100.00000 NA    NA   NA   NA     2     1 60  45 #> 119  4 100.00000 NA    NA   NA   NA     2     2 60  45 #> 120  4 120.00000 NA    NA   NA   NA     2     2 60  45 #> 121  5   0.50000 NA    NA   NA 1000     2     1 60  45 #> 122  5   0.50000 NA    NA   NA   NA     2     1 60  45 #> 123  5   1.00000 NA    NA   NA   NA     2     1 60  45 #> 124  5   2.00000 NA    NA   NA   NA     2     1 60  45 #> 125  5   6.00000 NA    NA   NA   NA     2     1 60  45 #> 126  5  10.00000 NA    NA   NA   20     2     1 60  45 #> 127  5  20.00000 NA    NA   NA   NA     2     1 60  45 #> 128  5  20.00000 NA    NA   NA   NA     2     2 60  45 #> 129  5  24.00000 NA    NA   NA   NA     2     2 60  45 #> 130  5  28.88889 NA    NA   NA   NA     2     1 60  45 #> 131  5  28.88889 NA    NA   NA   NA     2     2 60  45 #> 132  5  36.00000 NA    NA   NA   NA     2     2 60  45 #> 133  5  37.77778 NA    NA   NA   NA     2     1 60  45 #> 134  5  37.77778 NA    NA   NA   NA     2     2 60  45 #> 135  5  46.66667 NA    NA   NA   NA     2     1 60  45 #> 136  5  46.66667 NA    NA   NA   NA     2     2 60  45 #> 137  5  55.55556 NA    NA   NA   NA     2     1 60  45 #> 138  5  55.55556 NA    NA   NA   NA     2     2 60  45 #> 139  5  64.44444 NA    NA   NA   NA     2     1 60  45 #> 140  5  64.44444 NA    NA   NA   NA     2     2 60  45 #> 141  5  72.00000 NA    NA   NA   NA     2     2 60  45 #> 142  5  73.33333 NA    NA   NA   NA     2     1 60  45 #> 143  5  73.33333 NA    NA   NA   NA     2     2 60  45 #> 144  5  82.22222 NA    NA   NA   NA     2     1 60  45 #> 145  5  82.22222 NA    NA   NA   NA     2     2 60  45 #> 146  5  91.11111 NA    NA   NA   NA     2     1 60  45 #> 147  5  91.11111 NA    NA   NA   NA     2     2 60  45 #> 148  5 100.00000 NA    NA   NA   NA     2     1 60  45 #> 149  5 100.00000 NA    NA   NA   NA     2     2 60  45 #> 150  5 120.00000 NA    NA   NA   NA     2     2 60  45 #> 151  6   0.50000 NA    NA   NA 1000     2     1 60  45 #> 152  6   0.50000 NA    NA   NA   NA     2     1 60  45 #> 153  6   1.00000 NA    NA   NA   NA     2     1 60  45 #> 154  6   2.00000 NA    NA   NA   NA     2     1 60  45 #> 155  6   6.00000 NA    NA   NA   NA     2     1 60  45 #> 156  6  10.00000 NA    NA   NA   20     2     1 60  45 #> 157  6  20.00000 NA    NA   NA   NA     2     1 60  45 #> 158  6  20.00000 NA    NA   NA   NA     2     2 60  45 #> 159  6  24.00000 NA    NA   NA   NA     2     2 60  45 #> 160  6  28.88889 NA    NA   NA   NA     2     1 60  45 #> 161  6  28.88889 NA    NA   NA   NA     2     2 60  45 #> 162  6  36.00000 NA    NA   NA   NA     2     2 60  45 #> 163  6  37.77778 NA    NA   NA   NA     2     1 60  45 #> 164  6  37.77778 NA    NA   NA   NA     2     2 60  45 #> 165  6  46.66667 NA    NA   NA   NA     2     1 60  45 #> 166  6  46.66667 NA    NA   NA   NA     2     2 60  45 #> 167  6  55.55556 NA    NA   NA   NA     2     1 60  45 #> 168  6  55.55556 NA    NA   NA   NA     2     2 60  45 #> 169  6  64.44444 NA    NA   NA   NA     2     1 60  45 #> 170  6  64.44444 NA    NA   NA   NA     2     2 60  45 #> 171  6  72.00000 NA    NA   NA   NA     2     2 60  45 #> 172  6  73.33333 NA    NA   NA   NA     2     1 60  45 #> 173  6  73.33333 NA    NA   NA   NA     2     2 60  45 #> 174  6  82.22222 NA    NA   NA   NA     2     1 60  45 #> 175  6  82.22222 NA    NA   NA   NA     2     2 60  45 #> 176  6  91.11111 NA    NA   NA   NA     2     1 60  45 #> 177  6  91.11111 NA    NA   NA   NA     2     2 60  45 #> 178  6 100.00000 NA    NA   NA   NA     2     1 60  45 #> 179  6 100.00000 NA    NA   NA   NA     2     2 60  45 #> 180  6 120.00000 NA    NA   NA   NA     2     2 60  45 model_prediction(design=design_4,DV=TRUE,dosing=dosing_4,model_num_points = c(10,10),                  model_minxt=c(20,20),model_maxxt=c(100,100)) #>     ID      Time DV IPRED PRED  AMT Group Model WT AGE #> 1    1   0.50000 NA    NA   NA 1000     1     1 70  50 #> 2    1   0.50000 NA    NA   NA   NA     1     1 70  50 #> 3    1   1.00000 NA    NA   NA   NA     1     1 70  50 #> 4    1   2.00000 NA    NA   NA   NA     1     1 70  50 #> 5    1   6.00000 NA    NA   NA   NA     1     1 70  50 #> 6    1  10.00000 NA    NA   NA   20     1     1 70  50 #> 7    1  20.00000 NA    NA   NA   NA     1     1 70  50 #> 8    1  20.00000 NA    NA   NA   NA     1     2 70  50 #> 9    1  24.00000 NA    NA   NA   NA     1     2 70  50 #> 10   1  28.88889 NA    NA   NA   NA     1     1 70  50 #> 11   1  28.88889 NA    NA   NA   NA     1     2 70  50 #> 12   1  36.00000 NA    NA   NA   NA     1     2 70  50 #> 13   1  37.77778 NA    NA   NA   NA     1     1 70  50 #> 14   1  37.77778 NA    NA   NA   NA     1     2 70  50 #> 15   1  46.66667 NA    NA   NA   NA     1     1 70  50 #> 16   1  46.66667 NA    NA   NA   NA     1     2 70  50 #> 17   1  55.55556 NA    NA   NA   NA     1     1 70  50 #> 18   1  55.55556 NA    NA   NA   NA     1     2 70  50 #> 19   1  64.44444 NA    NA   NA   NA     1     1 70  50 #> 20   1  64.44444 NA    NA   NA   NA     1     2 70  50 #> 21   1  72.00000 NA    NA   NA   NA     1     2 70  50 #> 22   1  73.33333 NA    NA   NA   NA     1     1 70  50 #> 23   1  73.33333 NA    NA   NA   NA     1     2 70  50 #> 24   1  82.22222 NA    NA   NA   NA     1     1 70  50 #> 25   1  82.22222 NA    NA   NA   NA     1     2 70  50 #> 26   1  91.11111 NA    NA   NA   NA     1     1 70  50 #> 27   1  91.11111 NA    NA   NA   NA     1     2 70  50 #> 28   1 100.00000 NA    NA   NA   NA     1     1 70  50 #> 29   1 100.00000 NA    NA   NA   NA     1     2 70  50 #> 30   1 120.00000 NA    NA   NA   NA     1     2 70  50 #> 31   2   0.50000 NA    NA   NA 1000     1     1 70  50 #> 32   2   0.50000 NA    NA   NA   NA     1     1 70  50 #> 33   2   1.00000 NA    NA   NA   NA     1     1 70  50 #> 34   2   2.00000 NA    NA   NA   NA     1     1 70  50 #> 35   2   6.00000 NA    NA   NA   NA     1     1 70  50 #> 36   2  10.00000 NA    NA   NA   20     1     1 70  50 #> 37   2  20.00000 NA    NA   NA   NA     1     1 70  50 #> 38   2  20.00000 NA    NA   NA   NA     1     2 70  50 #> 39   2  24.00000 NA    NA   NA   NA     1     2 70  50 #> 40   2  28.88889 NA    NA   NA   NA     1     1 70  50 #> 41   2  28.88889 NA    NA   NA   NA     1     2 70  50 #> 42   2  36.00000 NA    NA   NA   NA     1     2 70  50 #> 43   2  37.77778 NA    NA   NA   NA     1     1 70  50 #> 44   2  37.77778 NA    NA   NA   NA     1     2 70  50 #> 45   2  46.66667 NA    NA   NA   NA     1     1 70  50 #> 46   2  46.66667 NA    NA   NA   NA     1     2 70  50 #> 47   2  55.55556 NA    NA   NA   NA     1     1 70  50 #> 48   2  55.55556 NA    NA   NA   NA     1     2 70  50 #> 49   2  64.44444 NA    NA   NA   NA     1     1 70  50 #> 50   2  64.44444 NA    NA   NA   NA     1     2 70  50 #> 51   2  72.00000 NA    NA   NA   NA     1     2 70  50 #> 52   2  73.33333 NA    NA   NA   NA     1     1 70  50 #> 53   2  73.33333 NA    NA   NA   NA     1     2 70  50 #> 54   2  82.22222 NA    NA   NA   NA     1     1 70  50 #> 55   2  82.22222 NA    NA   NA   NA     1     2 70  50 #> 56   2  91.11111 NA    NA   NA   NA     1     1 70  50 #> 57   2  91.11111 NA    NA   NA   NA     1     2 70  50 #> 58   2 100.00000 NA    NA   NA   NA     1     1 70  50 #> 59   2 100.00000 NA    NA   NA   NA     1     2 70  50 #> 60   2 120.00000 NA    NA   NA   NA     1     2 70  50 #> 61   3   0.50000 NA    NA   NA 1000     1     1 70  50 #> 62   3   0.50000 NA    NA   NA   NA     1     1 70  50 #> 63   3   1.00000 NA    NA   NA   NA     1     1 70  50 #> 64   3   2.00000 NA    NA   NA   NA     1     1 70  50 #> 65   3   6.00000 NA    NA   NA   NA     1     1 70  50 #> 66   3  10.00000 NA    NA   NA   20     1     1 70  50 #> 67   3  20.00000 NA    NA   NA   NA     1     1 70  50 #> 68   3  20.00000 NA    NA   NA   NA     1     2 70  50 #> 69   3  24.00000 NA    NA   NA   NA     1     2 70  50 #> 70   3  28.88889 NA    NA   NA   NA     1     1 70  50 #> 71   3  28.88889 NA    NA   NA   NA     1     2 70  50 #> 72   3  36.00000 NA    NA   NA   NA     1     2 70  50 #> 73   3  37.77778 NA    NA   NA   NA     1     1 70  50 #> 74   3  37.77778 NA    NA   NA   NA     1     2 70  50 #> 75   3  46.66667 NA    NA   NA   NA     1     1 70  50 #> 76   3  46.66667 NA    NA   NA   NA     1     2 70  50 #> 77   3  55.55556 NA    NA   NA   NA     1     1 70  50 #> 78   3  55.55556 NA    NA   NA   NA     1     2 70  50 #> 79   3  64.44444 NA    NA   NA   NA     1     1 70  50 #> 80   3  64.44444 NA    NA   NA   NA     1     2 70  50 #> 81   3  72.00000 NA    NA   NA   NA     1     2 70  50 #> 82   3  73.33333 NA    NA   NA   NA     1     1 70  50 #> 83   3  73.33333 NA    NA   NA   NA     1     2 70  50 #> 84   3  82.22222 NA    NA   NA   NA     1     1 70  50 #> 85   3  82.22222 NA    NA   NA   NA     1     2 70  50 #> 86   3  91.11111 NA    NA   NA   NA     1     1 70  50 #> 87   3  91.11111 NA    NA   NA   NA     1     2 70  50 #> 88   3 100.00000 NA    NA   NA   NA     1     1 70  50 #> 89   3 100.00000 NA    NA   NA   NA     1     2 70  50 #> 90   3 120.00000 NA    NA   NA   NA     1     2 70  50 #> 91   4   0.50000 NA    NA   NA 1000     2     1 60  45 #> 92   4   0.50000 NA    NA   NA   NA     2     1 60  45 #> 93   4   1.00000 NA    NA   NA   NA     2     1 60  45 #> 94   4   2.00000 NA    NA   NA   NA     2     1 60  45 #> 95   4   6.00000 NA    NA   NA   NA     2     1 60  45 #> 96   4  10.00000 NA    NA   NA   20     2     1 60  45 #> 97   4  20.00000 NA    NA   NA   NA     2     1 60  45 #> 98   4  20.00000 NA    NA   NA   NA     2     2 60  45 #> 99   4  24.00000 NA    NA   NA   NA     2     2 60  45 #> 100  4  28.88889 NA    NA   NA   NA     2     1 60  45 #> 101  4  28.88889 NA    NA   NA   NA     2     2 60  45 #> 102  4  36.00000 NA    NA   NA   NA     2     2 60  45 #> 103  4  37.77778 NA    NA   NA   NA     2     1 60  45 #> 104  4  37.77778 NA    NA   NA   NA     2     2 60  45 #> 105  4  46.66667 NA    NA   NA   NA     2     1 60  45 #> 106  4  46.66667 NA    NA   NA   NA     2     2 60  45 #> 107  4  55.55556 NA    NA   NA   NA     2     1 60  45 #> 108  4  55.55556 NA    NA   NA   NA     2     2 60  45 #> 109  4  64.44444 NA    NA   NA   NA     2     1 60  45 #> 110  4  64.44444 NA    NA   NA   NA     2     2 60  45 #> 111  4  72.00000 NA    NA   NA   NA     2     2 60  45 #> 112  4  73.33333 NA    NA   NA   NA     2     1 60  45 #> 113  4  73.33333 NA    NA   NA   NA     2     2 60  45 #> 114  4  82.22222 NA    NA   NA   NA     2     1 60  45 #> 115  4  82.22222 NA    NA   NA   NA     2     2 60  45 #> 116  4  91.11111 NA    NA   NA   NA     2     1 60  45 #> 117  4  91.11111 NA    NA   NA   NA     2     2 60  45 #> 118  4 100.00000 NA    NA   NA   NA     2     1 60  45 #> 119  4 100.00000 NA    NA   NA   NA     2     2 60  45 #> 120  4 120.00000 NA    NA   NA   NA     2     2 60  45 #> 121  5   0.50000 NA    NA   NA 1000     2     1 60  45 #> 122  5   0.50000 NA    NA   NA   NA     2     1 60  45 #> 123  5   1.00000 NA    NA   NA   NA     2     1 60  45 #> 124  5   2.00000 NA    NA   NA   NA     2     1 60  45 #> 125  5   6.00000 NA    NA   NA   NA     2     1 60  45 #> 126  5  10.00000 NA    NA   NA   20     2     1 60  45 #> 127  5  20.00000 NA    NA   NA   NA     2     1 60  45 #> 128  5  20.00000 NA    NA   NA   NA     2     2 60  45 #> 129  5  24.00000 NA    NA   NA   NA     2     2 60  45 #> 130  5  28.88889 NA    NA   NA   NA     2     1 60  45 #> 131  5  28.88889 NA    NA   NA   NA     2     2 60  45 #> 132  5  36.00000 NA    NA   NA   NA     2     2 60  45 #> 133  5  37.77778 NA    NA   NA   NA     2     1 60  45 #> 134  5  37.77778 NA    NA   NA   NA     2     2 60  45 #> 135  5  46.66667 NA    NA   NA   NA     2     1 60  45 #> 136  5  46.66667 NA    NA   NA   NA     2     2 60  45 #> 137  5  55.55556 NA    NA   NA   NA     2     1 60  45 #> 138  5  55.55556 NA    NA   NA   NA     2     2 60  45 #> 139  5  64.44444 NA    NA   NA   NA     2     1 60  45 #> 140  5  64.44444 NA    NA   NA   NA     2     2 60  45 #> 141  5  72.00000 NA    NA   NA   NA     2     2 60  45 #> 142  5  73.33333 NA    NA   NA   NA     2     1 60  45 #> 143  5  73.33333 NA    NA   NA   NA     2     2 60  45 #> 144  5  82.22222 NA    NA   NA   NA     2     1 60  45 #> 145  5  82.22222 NA    NA   NA   NA     2     2 60  45 #> 146  5  91.11111 NA    NA   NA   NA     2     1 60  45 #> 147  5  91.11111 NA    NA   NA   NA     2     2 60  45 #> 148  5 100.00000 NA    NA   NA   NA     2     1 60  45 #> 149  5 100.00000 NA    NA   NA   NA     2     2 60  45 #> 150  5 120.00000 NA    NA   NA   NA     2     2 60  45 #> 151  6   0.50000 NA    NA   NA 1000     2     1 60  45 #> 152  6   0.50000 NA    NA   NA   NA     2     1 60  45 #> 153  6   1.00000 NA    NA   NA   NA     2     1 60  45 #> 154  6   2.00000 NA    NA   NA   NA     2     1 60  45 #> 155  6   6.00000 NA    NA   NA   NA     2     1 60  45 #> 156  6  10.00000 NA    NA   NA   20     2     1 60  45 #> 157  6  20.00000 NA    NA   NA   NA     2     1 60  45 #> 158  6  20.00000 NA    NA   NA   NA     2     2 60  45 #> 159  6  24.00000 NA    NA   NA   NA     2     2 60  45 #> 160  6  28.88889 NA    NA   NA   NA     2     1 60  45 #> 161  6  28.88889 NA    NA   NA   NA     2     2 60  45 #> 162  6  36.00000 NA    NA   NA   NA     2     2 60  45 #> 163  6  37.77778 NA    NA   NA   NA     2     1 60  45 #> 164  6  37.77778 NA    NA   NA   NA     2     2 60  45 #> 165  6  46.66667 NA    NA   NA   NA     2     1 60  45 #> 166  6  46.66667 NA    NA   NA   NA     2     2 60  45 #> 167  6  55.55556 NA    NA   NA   NA     2     1 60  45 #> 168  6  55.55556 NA    NA   NA   NA     2     2 60  45 #> 169  6  64.44444 NA    NA   NA   NA     2     1 60  45 #> 170  6  64.44444 NA    NA   NA   NA     2     2 60  45 #> 171  6  72.00000 NA    NA   NA   NA     2     2 60  45 #> 172  6  73.33333 NA    NA   NA   NA     2     1 60  45 #> 173  6  73.33333 NA    NA   NA   NA     2     2 60  45 #> 174  6  82.22222 NA    NA   NA   NA     2     1 60  45 #> 175  6  82.22222 NA    NA   NA   NA     2     2 60  45 #> 176  6  91.11111 NA    NA   NA   NA     2     1 60  45 #> 177  6  91.11111 NA    NA   NA   NA     2     2 60  45 #> 178  6 100.00000 NA    NA   NA   NA     2     1 60  45 #> 179  6 100.00000 NA    NA   NA   NA     2     2 60  45 #> 180  6 120.00000 NA    NA   NA   NA     2     2 60  45"},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize an objective function by the size of the FIM matrix — ofv_criterion","title":"Normalize an objective function by the size of the FIM matrix — ofv_criterion","text":"Compute normalized OFV based size FIM matrix.  value can used efficiency calculations. OFV used optimization, see ofv_fim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize an objective function by the size of the FIM matrix — ofv_criterion","text":"","code":"ofv_criterion(   ofv_f,   num_parameters,   poped.db,   ofv_calc_type = poped.db$settings$ofv_calc_type )"},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize an objective function by the size of the FIM matrix — ofv_criterion","text":"ofv_f objective function num_parameters number parameters use normalization poped.db poped database ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE))","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize an objective function by the size of the FIM matrix — ofv_criterion","text":"specified criterion value.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize an objective function by the size of the FIM matrix — ofv_criterion","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   ## evaluate initial design  FIM <- evaluate.fim(poped.db) # new name for function needed FIM #>             [,1]      [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 17141.83891 20.838375 10.011000 0.000000e+00     0.000000  0.00000000 #> [2,]    20.83837 17.268051 -3.423641 0.000000e+00     0.000000  0.00000000 #> [3,]    10.01100 -3.423641 49.864697 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000  0.000000  0.000000 2.324341e+03     9.770352  0.03523364 #> [5,]     0.00000  0.000000  0.000000 9.770352e+00 19083.877564 11.72131703 #> [6,]     0.00000  0.000000  0.000000 3.523364e-02    11.721317 38.85137516 #> [7,]     0.00000  0.000000  0.000000 7.268410e+02  9656.158553 64.78095548 #> [8,]     0.00000  0.000000  0.000000 9.062739e+01   266.487127  2.94728469 #>              [,7]        [,8] #> [1,]      0.00000    0.000000 #> [2,]      0.00000    0.000000 #> [3,]      0.00000    0.000000 #> [4,]    726.84097   90.627386 #> [5,]   9656.15855  266.487127 #> [6,]     64.78096    2.947285 #> [7,] 192840.20092 6659.569867 #> [8,]   6659.56987  475.500111 get_rse(FIM,poped.db) #>        CL         V        KA      d_CL       d_V      d_KA  sig_prop   sig_add  #>  5.096246  3.031164 14.260384 29.761226 36.681388 26.748640 32.011719 25.637971   ofv_criterion(ofv_fim(FIM,poped.db,ofv_calc_type=1),               length(get_unfixed_params(poped.db)[[\"all\"]]),               poped.db,               ofv_calc_type=1) # det(FIM) #> [1] 1016.943  ofv_criterion(ofv_fim(FIM,poped.db,ofv_calc_type=2),               length(get_unfixed_params(poped.db)[[\"all\"]]),               poped.db,               ofv_calc_type=2)  #> [1] 1.140916  ofv_criterion(ofv_fim(FIM,poped.db,ofv_calc_type=4),               length(get_unfixed_params(poped.db)[[\"all\"]]),               poped.db,               ofv_calc_type=4) #> [1] 1016.943  ofv_criterion(ofv_fim(FIM,poped.db,ofv_calc_type=6),               length(get_unfixed_params(poped.db)[[\"all\"]]),               poped.db,               ofv_calc_type=6) #> [1] 1.75168  ofv_criterion(ofv_fim(FIM,poped.db,ofv_calc_type=7),               length(get_unfixed_params(poped.db)[[\"all\"]]),               poped.db,               ofv_calc_type=7)  #> [1] 0"},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_fim.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a criterion of the Fisher Information Matrix (FIM) — ofv_fim","title":"Evaluate a criterion of the Fisher Information Matrix (FIM) — ofv_fim","text":"Compute criterion FIM given model, parameters, design methods defined PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_fim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a criterion of the Fisher Information Matrix (FIM) — ofv_fim","text":"","code":"ofv_fim(   fmf,   poped.db,   ofv_calc_type = poped.db$settings$ofv_calc_type,   ds_index = poped.db$parameters$ds_index,   use_log = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_fim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a criterion of the Fisher Information Matrix (FIM) — ofv_fim","text":"fmf FIM poped.db poped database ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) ds_index Ds_index vector set 1 parameter uninteresting, otherwise 0. size=(1,num unfixed parameters). First unfixed bpop, unfixed d, unfixed docc last unfixed sigma. Default fixed effects important, everything else important.  Used conjunction ofv_calc_type=6. use_log criterion log domain? ... arguments passed evaluate.fim ofv_fim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_fim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a criterion of the Fisher Information Matrix (FIM) — ofv_fim","text":"specified criterion value.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ofv_fim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a criterion of the Fisher Information Matrix (FIM) — ofv_fim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   ## evaluate initial design  FIM <- evaluate.fim(poped.db)  FIM #>             [,1]      [,2]      [,3]         [,4]         [,5]        [,6] #> [1,] 17141.83891 20.838375 10.011000 0.000000e+00     0.000000  0.00000000 #> [2,]    20.83837 17.268051 -3.423641 0.000000e+00     0.000000  0.00000000 #> [3,]    10.01100 -3.423641 49.864697 0.000000e+00     0.000000  0.00000000 #> [4,]     0.00000  0.000000  0.000000 2.324341e+03     9.770352  0.03523364 #> [5,]     0.00000  0.000000  0.000000 9.770352e+00 19083.877564 11.72131703 #> [6,]     0.00000  0.000000  0.000000 3.523364e-02    11.721317 38.85137516 #> [7,]     0.00000  0.000000  0.000000 7.268410e+02  9656.158553 64.78095548 #> [8,]     0.00000  0.000000  0.000000 9.062739e+01   266.487127  2.94728469 #>              [,7]        [,8] #> [1,]      0.00000    0.000000 #> [2,]      0.00000    0.000000 #> [3,]      0.00000    0.000000 #> [4,]    726.84097   90.627386 #> [5,]   9656.15855  266.487127 #> [6,]     64.78096    2.947285 #> [7,] 192840.20092 6659.569867 #> [8,]   6659.56987  475.500111 get_rse(FIM,poped.db) #>        CL         V        KA      d_CL       d_V      d_KA  sig_prop   sig_add  #>  5.096246  3.031164 14.260384 29.761226 36.681388 26.748640 32.011719 25.637971   det(FIM) #> [1] 1.143859e+24 ofv_fim(FIM,poped.db,ofv_calc_type=1) # det(FIM) #> [1] 1.143859e+24 ofv_fim(FIM,poped.db,ofv_calc_type=2) # 1/trace_matrix(inv(FIM)) #> [1] 9.127328 ofv_fim(FIM,poped.db,ofv_calc_type=4) # log(det(FIM))  #> [1] 55.39645 ofv_fim(FIM,poped.db,ofv_calc_type=6) # Ds with fixed effects as \"important\" #> [1] 16.49204 ofv_fim(FIM,poped.db,ofv_calc_type=6,         ds_index=c(1,1,1,0,0,0,1,1)) # Ds with random effects as \"important\" #> [1] 21.23143 ofv_fim(FIM,poped.db,ofv_calc_type=7) # 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) #> [1] 0.5772714"},{"path":"https://andrewhooker.github.io/PopED/reference/ones.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of ones — ones","title":"Create a matrix of ones — ones","text":"Create matrix ones size (dim1 x dim2).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of ones — ones","text":"","code":"ones(dim1, dim2 = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/ones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of ones — ones","text":"dim1 dimension matrix (square) number rows. dim2 number columns","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/ones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix of ones — ones","text":"matrix ones","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/ones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of ones — ones","text":"","code":"ones(4) #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    1    1 #> [2,]    1    1    1    1 #> [3,]    1    1    1    1 #> [4,]    1    1    1    1 ones(3,4) #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    1    1 #> [2,]    1    1    1    1 #> [3,]    1    1    1    1"},{"path":"https://andrewhooker.github.io/PopED/reference/optim_ARS.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a function using adaptive random search. — optim_ARS","title":"Optimize a function using adaptive random search. — optim_ARS","text":"Optimize objective function using adaptive random search algorithm. function works discrete continuous optimization parameters allows box-constraints sets allowed values.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optim_ARS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a function using adaptive random search. — optim_ARS","text":"","code":"optim_ARS(   par,   fn,   lower = NULL,   upper = NULL,   allowed_values = NULL,   loc_fac = 4,   no_bounds_sd = par,   iter = 400,   iter_adapt = 50,   adapt_scale = 1,   max_run = 200,   trace = TRUE,   trace_iter = 5,   new_par_max_it = 200,   maximize = F,   parallel = F,   parallel_type = NULL,   num_cores = NULL,   mrgsolve_model = NULL,   seed = round(runif(1, 0, 1e+07)),   allow_replicates = TRUE,   replicates_index = seq(1, length(par)),   generator = NULL,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/optim_ARS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a function using adaptive random search. — optim_ARS","text":"par vector initial values parameters optimized . fn function minimized (maximized), first argument vector parameters minimization take place. return scalar result. lower Lower bounds parameters. vector. upper Upper bounds parameters. vector. allowed_values list containing allowed values parameter list(par1=c(2,3,4,5,6),par2=c(5,6,7,8)). vector containing allowed values parameters also allowed c(2,3,4,5,6). loc_fac Locality factor determining standard deviation sampling distribution around current position parameters. initial standard deviation normally calculated (upper - lower)/loc_fac except cases  upper lower limits (e.g. upper=Inf lower=-Inf). no_bounds_sd standard deviation sampling distribution around current position parameters upper lower limits (e.g. upper=Inf lower=-Inf). iter number iterations algorithm perform (maximum number, less). iter_adapt number iterations adapting (shrinking) parameter search space. adapt_scale scale adapting size sampling distribution.  adaptation standard deviation sampling distribution around current position parameters done iter_adapt iteration change best objective function. adapting,  standard deviation sampling distribution calculated (upper - lower)/(loc_fac*ff*adapt_scale) ff starts 1 increases 1 adaptation. max_run maximum number iterations run without change best parameter estimates. trace algorithm output results intermittently. trace_iter many iterations update screen result search. new_par_max_it algorithm randomly chooses samples based current best set parameters.  drawing samples new parameter set already tested new draw performed. new_par_max_it draws, new parameter sets, algorithm stops. maximize function maximized?  Default minimize. parallel use parallel computations? parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. See start_parallel. num_cores number cores use parallelization.  default  set number  output parallel::detectCores(). See start_parallel. mrgsolve_model computations require mrgsolve model using \"snow\" method need specify name model object created mread mcode. seed random seed use algorithm, allow_replicates algorithm allow parameters value? replicates_index vector, length parameters. two values vector parameters may assume value optimization. generator user-defined function generates new parameter sets try algorithm.  See examples . ... Additional arguments passed fn start_parallel.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optim_ARS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimize a function using adaptive random search. — optim_ARS","text":"M. Foracchia, .C. Hooker, P. Vicini . Ruggeri, \"PopED, software fir optimal experimental design population kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J. Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C. Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models optimal design tool\", Computer Methods Programs Biomedicine, 108, 2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/optim_ARS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize a function using adaptive random search. — optim_ARS","text":"","code":"## \"wild\" function , global minimum at about -15.81515 fw <- function(x) 10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80  # optimization with fewer function evaluations compared to SANN res1 <- optim_ARS(50, fw,lower = -50, upper=100) #> Initial OFV = 159.001 #> It.   5 | OFV = 83.4526 #> It.  10 | OFV = 76.4507 #> It.  15 | OFV = 76.4507 #> It.  20 | OFV = 76.4507 #> It.  25 | OFV = 76.4507 #> It.  30 | OFV = 70.9847 #> It.  35 | OFV = 70.9847 #> It.  40 | OFV = 70.9847 #> It.  45 | OFV = 70.9847 #> It.  50 | OFV = 70.9847 #> It.  55 | OFV = 70.9847 #> It.  60 | OFV = 70.9847 #> It.  65 | OFV = 70.9847 #> It.  70 | OFV = 70.9847 #> It.  75 | OFV = 70.9847 #> It.  80 | OFV = 70.9847 #> It.  85 | OFV = 70.9847 #> It.  90 | OFV = 70.9847 #> It.  95 | OFV = 70.9847 #> It. 100 | OFV = 70.9847 #> It. 105 | OFV = 68.8229 #> It. 110 | OFV = 68.8229 #> It. 115 | OFV = 68.8229 #> It. 120 | OFV = 68.8229 #> It. 125 | OFV = 68.8229 #> It. 130 | OFV = 68.8229 #> It. 135 | OFV = 68.8229 #> It. 140 | OFV = 68.8229 #> It. 145 | OFV = 68.8229 #> It. 150 | OFV = 68.5656 #> It. 155 | OFV = 68.5656 #> It. 160 | OFV = 68.5656 #> It. 165 | OFV = 68.5656 #> It. 170 | OFV = 68.5656 #> It. 175 | OFV = 68.5656 #> It. 180 | OFV = 68.5656 #> It. 185 | OFV = 68.5656 #> It. 190 | OFV = 68.5656 #> It. 195 | OFV = 68.5656 #> It. 200 | OFV = 68.5656 #> It. 205 | OFV = 68.4446 #> It. 210 | OFV = 68.4446 #> It. 215 | OFV = 68.4446 #> It. 220 | OFV = 68.4446 #> It. 225 | OFV = 68.4446 #> It. 230 | OFV = 68.4446 #> It. 235 | OFV = 68.4446 #> It. 240 | OFV = 68.4446 #> It. 245 | OFV = 68.4446 #> It. 250 | OFV = 68.4446 #> It. 255 | OFV = 68.4446 #> It. 260 | OFV = 68.4446 #> It. 265 | OFV = 68.4446 #> It. 270 | OFV = 68.4446 #> It. 275 | OFV = 68.4446 #> It. 280 | OFV = 68.4446 #> It. 285 | OFV = 68.4446 #> It. 290 | OFV = 68.4446 #> It. 295 | OFV = 68.4446 #> It. 300 | OFV = 68.4446 #> It. 305 | OFV = 68.4446 #> It. 310 | OFV = 68.4446 #> It. 315 | OFV = 68.4446 #> It. 320 | OFV = 68.4446 #> It. 325 | OFV = 68.4446 #> It. 330 | OFV = 68.4446 #> It. 335 | OFV = 68.4446 #> It. 340 | OFV = 68.4446 #> It. 345 | OFV = 68.4446 #> It. 350 | OFV = 68.4446 #> It. 355 | OFV = 68.4446 #> It. 360 | OFV = 68.4446 #> It. 365 | OFV = 68.4446 #> It. 370 | OFV = 68.4446 #> It. 375 | OFV = 68.4446 #> It. 380 | OFV = 68.4446 #> It. 385 | OFV = 68.4446 #> It. 390 | OFV = 68.4446 #> It. 395 | OFV = 67.5762 #> It. 400 | OFV = 67.5762 #>  #> Total iterations: 400  #> Elapsed time: 0.176 seconds. #>  #> Final OFV =  67.57618  #> Parameters: -15.35198  #>   # often not as good performance when upper and lower bounds are poor res2 <- optim_ARS(50, fw, lower=-Inf,upper=Inf) #> Initial OFV = 159.001 #> It.   5 | OFV = 82.9206 #> It.  10 | OFV = 81.2685 #> It.  15 | OFV = 70.2732 #> It.  20 | OFV = 70.2732 #> It.  25 | OFV = 70.2732 #> It.  30 | OFV = 70.2732 #> It.  35 | OFV = 70.2732 #> It.  40 | OFV = 70.2732 #> It.  45 | OFV = 70.2732 #> It.  50 | OFV = 70.2732 #> It.  55 | OFV = 70.2732 #> It.  60 | OFV = 70.2732 #> It.  65 | OFV = 70.2641 #> It.  70 | OFV = 70.2641 #> It.  75 | OFV = 70.2641 #> It.  80 | OFV = 70.2641 #> It.  85 | OFV = 70.2641 #> It.  90 | OFV = 70.2641 #> It.  95 | OFV = 70.2641 #> It. 100 | OFV = 70.2641 #> It. 105 | OFV = 70.2641 #> It. 110 | OFV = 70.2641 #> It. 115 | OFV = 70.2641 #> It. 120 | OFV = 70.2641 #> It. 125 | OFV = 70.2641 #> It. 130 | OFV = 70.2641 #> It. 135 | OFV = 70.2641 #> It. 140 | OFV = 68.4052 #> It. 145 | OFV = 68.4052 #> It. 150 | OFV = 68.4052 #> It. 155 | OFV = 68.4052 #> It. 160 | OFV = 68.4052 #> It. 165 | OFV = 68.4052 #> It. 170 | OFV = 68.4052 #> It. 175 | OFV = 68.4052 #> It. 180 | OFV = 68.4052 #> It. 185 | OFV = 68.4052 #> It. 190 | OFV = 68.4052 #> It. 195 | OFV = 67.6696 #> It. 200 | OFV = 67.6696 #> It. 205 | OFV = 67.6696 #> It. 210 | OFV = 67.6696 #> It. 215 | OFV = 67.6696 #> It. 220 | OFV = 67.6696 #> It. 225 | OFV = 67.6696 #> It. 230 | OFV = 67.6696 #> It. 235 | OFV = 67.6696 #> It. 240 | OFV = 67.6696 #> It. 245 | OFV = 67.6696 #> It. 250 | OFV = 67.6696 #> It. 255 | OFV = 67.6696 #> It. 260 | OFV = 67.6696 #> It. 265 | OFV = 67.6696 #> It. 270 | OFV = 67.6696 #> It. 275 | OFV = 67.6696 #> It. 280 | OFV = 67.6696 #> It. 285 | OFV = 67.6696 #> It. 290 | OFV = 67.6696 #> It. 295 | OFV = 67.6696 #> It. 300 | OFV = 67.6696 #> It. 305 | OFV = 67.6696 #> It. 310 | OFV = 67.6696 #> It. 315 | OFV = 67.6696 #> It. 320 | OFV = 67.6696 #> It. 325 | OFV = 67.6696 #> It. 330 | OFV = 67.6696 #> It. 335 | OFV = 67.6696 #> It. 340 | OFV = 67.6696 #> It. 345 | OFV = 67.6696 #> It. 350 | OFV = 67.6696 #> It. 355 | OFV = 67.6696 #> It. 360 | OFV = 67.6696 #> It. 365 | OFV = 67.6696 #> It. 370 | OFV = 67.6696 #> It. 375 | OFV = 67.6696 #> It. 380 | OFV = 67.6696 #> It. 385 | OFV = 67.6696 #> It. 390 | OFV = 67.6696 #> Maximum number of identical optimal values reached (max_run=200), optimization stopped. #>  #> Total iterations: 392  #> Elapsed time: 0.165 seconds. #>  #> Final OFV =  67.6696  #> Parameters: -15.97183  #>   # Only integer values allowed if (FALSE) { # \\dontrun{  res_int <- optim_ARS(50, fw, allowed_values = seq(-50,100,by=1)) } # }  if (FALSE) { # \\dontrun{    #plot of the function and solutions   require(graphics)   plot(fw, -50, 50, n = 1000, main = \"Minimizing 'wild function'\")   points(-15.81515, fw(-15.81515), pch = 16, col = \"red\", cex = 1)   points(res1$par, res1$ofv, pch = 16, col = \"green\", cex = 1)   points(res2$par, res2$ofv, pch = 16, col = \"blue\", cex = 1) } # }   # optim_ARS does not work great for hard to find minima on flat surface: # Rosenbrock Banana function # f(x, y) = (a-x)^2 + b(y-x^2)^2 # global minimum at (x, y)=(a, a^2), where f(x, y)=0.  # Usually a = 1 and b = 100. if (FALSE) { # \\dontrun{    fr <- function(x,a=1,b=100) {        x1 <- x[1]     x2 <- x[2]     b*(x2 - x1*x1)^2 + (a - x1)^2   }      res3 <- optim_ARS(c(-1.2,1), fr,lower = -5, upper = 5)      # plot the surface   x <- seq(-50, 50, length= 30)   y <- x   f <- function(x,y){apply(cbind(x,y),1,fr)}   z <- outer(x, y, f)   persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = \"lightblue\", ticktype=\"detailed\") -> res   points(trans3d(1, 1, 0, pmat = res), col = 2, pch = 16,cex=2)   points(trans3d(res3$par[1], res3$par[1], res3$ofv, pmat = res), col = \"green\", pch = 16,cex=2) } # }  # box constraints flb <- function(x){   p <- length(x)    sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2)  } ## 25-dimensional box constrained #optim(rep(3, 25), flb,lower = rep(2, 25), upper = rep(4, 25),method = \"L-BFGS-B\")  res_box <- optim_ARS(rep(3, 25), flb,lower = rep(2, 25), upper = rep(4, 25))  #> Initial OFV = 3460 #> It.   5 | OFV = 3460 #> It.  10 | OFV = 3460 #> It.  15 | OFV = 3460 #> It.  20 | OFV = 3110.35 #> It.  25 | OFV = 3110.35 #> It.  30 | OFV = 2769.9 #> It.  35 | OFV = 2508.65 #> It.  40 | OFV = 1914.21 #> It.  45 | OFV = 1886.45 #> It.  50 | OFV = 1886.45 #> It.  55 | OFV = 1886.45 #> It.  60 | OFV = 1886.45 #> It.  65 | OFV = 1763.46 #> It.  70 | OFV = 1763.46 #> It.  75 | OFV = 1763.46 #> It.  80 | OFV = 902.615 #> It.  85 | OFV = 902.615 #> It.  90 | OFV = 902.615 #> It.  95 | OFV = 902.615 #> It. 100 | OFV = 902.615 #> It. 105 | OFV = 902.615 #> It. 110 | OFV = 902.615 #> It. 115 | OFV = 902.615 #> It. 120 | OFV = 902.615 #> It. 125 | OFV = 902.615 #> It. 130 | OFV = 902.615 #> It. 135 | OFV = 902.615 #> It. 140 | OFV = 865.598 #> It. 145 | OFV = 865.598 #> It. 150 | OFV = 772.584 #> It. 155 | OFV = 772.584 #> It. 160 | OFV = 772.584 #> It. 165 | OFV = 772.584 #> It. 170 | OFV = 772.584 #> It. 175 | OFV = 715.613 #> It. 180 | OFV = 699.241 #> It. 185 | OFV = 699.241 #> It. 190 | OFV = 699.241 #> It. 195 | OFV = 699.241 #> It. 200 | OFV = 699.241 #> It. 205 | OFV = 621.414 #> It. 210 | OFV = 621.414 #> It. 215 | OFV = 621.414 #> It. 220 | OFV = 621.414 #> It. 225 | OFV = 621.414 #> It. 230 | OFV = 621.414 #> It. 235 | OFV = 621.414 #> It. 240 | OFV = 606.201 #> It. 245 | OFV = 606.201 #> It. 250 | OFV = 606.201 #> It. 255 | OFV = 606.201 #> It. 260 | OFV = 606.201 #> It. 265 | OFV = 606.201 #> It. 270 | OFV = 606.201 #> It. 275 | OFV = 606.201 #> It. 280 | OFV = 606.201 #> It. 285 | OFV = 606.201 #> It. 290 | OFV = 536.585 #> It. 295 | OFV = 536.585 #> It. 300 | OFV = 536.585 #> It. 305 | OFV = 536.585 #> It. 310 | OFV = 536.585 #> It. 315 | OFV = 536.585 #> It. 320 | OFV = 536.585 #> It. 325 | OFV = 536.585 #> It. 330 | OFV = 536.585 #> It. 335 | OFV = 536.585 #> It. 340 | OFV = 536.585 #> It. 345 | OFV = 536.585 #> It. 350 | OFV = 536.585 #> It. 355 | OFV = 536.585 #> It. 360 | OFV = 536.585 #> It. 365 | OFV = 512.881 #> It. 370 | OFV = 512.881 #> It. 375 | OFV = 506.252 #> It. 380 | OFV = 506.252 #> It. 385 | OFV = 506.252 #> It. 390 | OFV = 506.252 #> It. 395 | OFV = 506.252 #> It. 400 | OFV = 503.399 #>  #> Total iterations: 400  #> Elapsed time: 0.189 seconds. #>  #> Final OFV =  503.399  #> Parameters: 2.130566 2 2 2.059427 2 2 2.167358 2 2 2.142739 2 2 2.030765 2.254329 2 2 2.56842 2.045564 2.276299 2 2 2 2 2 3.690364  #>    ## Combinatorial optimization: Traveling salesman problem eurodistmat <- as.matrix(eurodist)  distance <- function(sq) {  # Target function   sq2 <- embed(sq, 2)   sum(eurodistmat[cbind(sq2[,2], sq2[,1])]) }  genseq <- function(sq) {  # Generate new candidate sequence   idx <- seq(2, NROW(eurodistmat)-1)   changepoints <- sample(idx, size = 2, replace = FALSE)   tmp <- sq[changepoints[1]]   sq[changepoints[1]] <- sq[changepoints[2]]   sq[changepoints[2]] <- tmp   sq }  sq <- c(1:nrow(eurodistmat), 1)  # Initial sequence: alphabetic res3 <- optim_ARS(sq,distance,generator=genseq) # Near optimum distance around 12842 #> Initial OFV = 29625 #> It.   5 | OFV = 28885 #> It.  10 | OFV = 28498 #> It.  15 | OFV = 27136 #> It.  20 | OFV = 26242 #> It.  25 | OFV = 25509 #> It.  30 | OFV = 25509 #> It.  35 | OFV = 25509 #> It.  40 | OFV = 25089 #> It.  45 | OFV = 23414 #> It.  50 | OFV = 23414 #> It.  55 | OFV = 23414 #> It.  60 | OFV = 20070 #> It.  65 | OFV = 19725 #> It.  70 | OFV = 19102 #> It.  75 | OFV = 18976 #> It.  80 | OFV = 18976 #> It.  85 | OFV = 18976 #> It.  90 | OFV = 18976 #> It.  95 | OFV = 18410 #> It. 100 | OFV = 18410 #> It. 105 | OFV = 18410 #> It. 110 | OFV = 18410 #> It. 115 | OFV = 18410 #> It. 120 | OFV = 17812 #> It. 125 | OFV = 16702 #> It. 130 | OFV = 16702 #> It. 135 | OFV = 16702 #> It. 140 | OFV = 16665 #> It. 145 | OFV = 16665 #> It. 150 | OFV = 16665 #> It. 155 | OFV = 16665 #> It. 160 | OFV = 16665 #> It. 165 | OFV = 16665 #> It. 170 | OFV = 16665 #> It. 175 | OFV = 16665 #> It. 180 | OFV = 16665 #> It. 185 | OFV = 16665 #> It. 190 | OFV = 16665 #> It. 195 | OFV = 16665 #> It. 200 | OFV = 16665 #> It. 205 | OFV = 16665 #> It. 210 | OFV = 16665 #> It. 215 | OFV = 16665 #> It. 220 | OFV = 16665 #> It. 225 | OFV = 16665 #> It. 230 | OFV = 16665 #> It. 235 | OFV = 16665 #> It. 240 | OFV = 16665 #> It. 245 | OFV = 16665 #> It. 250 | OFV = 16665 #> It. 255 | OFV = 16665 #> It. 260 | OFV = 16665 #> It. 265 | OFV = 16665 #> It. 270 | OFV = 16665 #> It. 275 | OFV = 16665 #> It. 280 | OFV = 16665 #> It. 285 | OFV = 16665 #> It. 290 | OFV = 16665 #> It. 295 | OFV = 16665 #> It. 300 | OFV = 16665 #> It. 305 | OFV = 16665 #> It. 310 | OFV = 16063 #> It. 315 | OFV = 16063 #> It. 320 | OFV = 16063 #> It. 325 | OFV = 16063 #> It. 330 | OFV = 16063 #> It. 335 | OFV = 15999 #> It. 340 | OFV = 15999 #> It. 345 | OFV = 15999 #> It. 350 | OFV = 15999 #> It. 355 | OFV = 15999 #> It. 360 | OFV = 15999 #> It. 365 | OFV = 15999 #> It. 370 | OFV = 15999 #> It. 375 | OFV = 15999 #> It. 380 | OFV = 15999 #> It. 385 | OFV = 15264 #> It. 390 | OFV = 15264 #> It. 395 | OFV = 15264 #> It. 400 | OFV = 15264 #>  #> Total iterations: 400  #> Elapsed time: 0.229 seconds. #>  #> Final OFV =  15264  #> Parameters: 1 19 8 5 4 3 18 2 14 9 12 15 13 16 17 6 11 7 20 10 21 1  #>   if (FALSE) { # \\dontrun{    # plot of initial sequence   # rotate for conventional orientation   loc <- -cmdscale(eurodist, add = TRUE)$points   x <- loc[,1]; y <- loc[,2]   s <- seq_len(nrow(eurodistmat))   tspinit <- loc[sq,]      plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\",        main = paste(\"Initial sequence of traveling salesman problem\\n\",                     \"Distance =\",distance(sq)), axes = FALSE)   arrows(tspinit[s,1], tspinit[s,2], tspinit[s+1,1], tspinit[s+1,2],          angle = 10, col = \"green\")   text(x, y, labels(eurodist), cex = 0.8)      # plot of final sequence from optim_ARS   tspres <- loc[res3$par,]   plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\",        main = paste(\"optim_ARS() 'solving' traveling salesman problem\\n\",                     \"Distance =\",distance(c(1,res3$par,1))),axes = FALSE)   arrows(tspres[s,1], tspres[s,2], tspres[s+1,1], tspres[s+1,2],          angle = 10, col = \"red\")   text(x, y, labels(eurodist), cex = 0.8)      # using optim   set.seed(123) # chosen to get a good soln relatively quickly   (res4 <- optim(sq, distance, genseq, method = \"SANN\",                  control = list(maxit = 30000, temp = 2000, trace = TRUE,                                 REPORT = 500)))       tspres <- loc[res4$par,]   plot(x, y, type = \"n\", asp = 1, xlab = \"\", ylab = \"\",        main = paste(\"optim() 'solving' traveling salesman problem\\n\",                     \"Distance =\",distance(res4$par)),axes = FALSE)   arrows(tspres[s,1], tspres[s,2], tspres[s+1,1], tspres[s+1,2],          angle = 10, col = \"red\")   text(x, y, labels(eurodist), cex = 0.8) } # }    # one-dimensional function if (FALSE) { # \\dontrun{    f <- function(x)  abs(x)+cos(x)   res5 <- optim_ARS(-20,f,lower=-20, upper=20)      curve(f, -20, 20)   abline(v = res5$par, lty = 4,col=\"green\") } # }    # one-dimensional function f <- function(x)  (x^2+x)*cos(x) # -10 < x < 10 res_max <- optim_ARS(0,f,lower=-10, upper=10,maximize=TRUE) # sometimes to local maxima #> Initial OFV = 0 #> It.   5 | OFV = 23.0891 #> It.  10 | OFV = 23.0891 #> It.  15 | OFV = 34.1068 #> It.  20 | OFV = 34.1068 #> It.  25 | OFV = 34.6902 #> It.  30 | OFV = 34.6902 #> It.  35 | OFV = 34.6902 #> It.  40 | OFV = 34.6902 #> It.  45 | OFV = 34.6902 #> It.  50 | OFV = 34.6902 #> It.  55 | OFV = 34.6902 #> It.  60 | OFV = 34.6902 #> It.  65 | OFV = 34.6902 #> It.  70 | OFV = 34.6902 #> It.  75 | OFV = 35.4986 #> It.  80 | OFV = 46.4501 #> It.  85 | OFV = 46.4501 #> It.  90 | OFV = 46.4501 #> It.  95 | OFV = 46.4501 #> It. 100 | OFV = 46.6179 #> It. 105 | OFV = 46.6179 #> It. 110 | OFV = 47.6976 #> It. 115 | OFV = 47.6976 #> It. 120 | OFV = 47.6976 #> It. 125 | OFV = 47.6976 #> It. 130 | OFV = 47.6976 #> It. 135 | OFV = 47.6976 #> It. 140 | OFV = 47.6976 #> It. 145 | OFV = 47.6976 #> It. 150 | OFV = 47.6976 #> It. 155 | OFV = 47.6976 #> It. 160 | OFV = 47.6976 #> It. 165 | OFV = 47.6976 #> It. 170 | OFV = 47.6976 #> It. 175 | OFV = 47.6976 #> It. 180 | OFV = 47.6976 #> It. 185 | OFV = 47.6976 #> It. 190 | OFV = 47.6976 #> It. 195 | OFV = 47.6976 #> It. 200 | OFV = 47.6976 #> It. 205 | OFV = 47.7032 #> It. 210 | OFV = 47.7055 #> It. 215 | OFV = 47.7055 #> It. 220 | OFV = 47.7055 #> It. 225 | OFV = 47.7055 #> It. 230 | OFV = 47.7055 #> It. 235 | OFV = 47.7055 #> It. 240 | OFV = 47.7055 #> It. 245 | OFV = 47.7055 #> It. 250 | OFV = 47.7055 #> It. 255 | OFV = 47.7055 #> It. 260 | OFV = 47.7055 #> It. 265 | OFV = 47.7055 #> It. 270 | OFV = 47.7055 #> It. 275 | OFV = 47.7055 #> It. 280 | OFV = 47.7055 #> It. 285 | OFV = 47.7055 #> It. 290 | OFV = 47.7055 #> It. 295 | OFV = 47.7055 #> It. 300 | OFV = 47.7055 #> It. 305 | OFV = 47.7055 #> It. 310 | OFV = 47.7055 #> It. 315 | OFV = 47.7055 #> It. 320 | OFV = 47.7055 #> It. 325 | OFV = 47.7055 #> It. 330 | OFV = 47.7055 #> It. 335 | OFV = 47.7055 #> It. 340 | OFV = 47.7055 #> It. 345 | OFV = 47.7055 #> It. 350 | OFV = 47.7055 #> It. 355 | OFV = 47.7055 #> It. 360 | OFV = 47.7055 #> It. 365 | OFV = 47.7055 #> It. 370 | OFV = 47.7055 #> It. 375 | OFV = 47.7055 #> It. 380 | OFV = 47.7055 #> It. 385 | OFV = 47.7055 #> It. 390 | OFV = 47.7055 #> It. 395 | OFV = 47.7055 #> It. 400 | OFV = 47.7055 #>  #> Total iterations: 400  #> Elapsed time: 0.185 seconds. #>  #> Final OFV =  47.7055  #> Parameters: 6.562641  #>   if (FALSE) { # \\dontrun{    res_min <- optim_ARS(0,f,lower=-10, upper=10) # sometimes to local minima      curve(f, -10, 10)   abline(v = res_min$par, lty = 4,col=\"green\")   abline(v = res_max$par, lty = 4,col=\"red\") } # }   # two-dimensional Rastrigin function #It has a global minimum at f(x) = f(0) = 0. if (FALSE) { # \\dontrun{    Rastrigin <- function(x1, x2){     20 + x1^2 + x2^2 - 10*(cos(2*pi*x1) + cos(2*pi*x2))   }         x1 <- x2 <- seq(-5.12, 5.12, by = 0.1)   z <- outer(x1, x2, Rastrigin)      res6 <- optim_ARS(c(-4,4),function(x) Rastrigin(x[1], x[2]),lower=-5.12, upper=5.12)      # color scale   nrz <- nrow(z)   ncz <- ncol(z)   jet.colors <-     colorRampPalette(c(\"#00007F\", \"blue\", \"#007FFF\", \"cyan\",                        \"#7FFF7F\", \"yellow\", \"#FF7F00\", \"red\", \"#7F0000\"))   # Generate the desired number of colors from this palette   nbcol <- 100   color <- jet.colors(nbcol)   # Compute the z-value at the facet centres   zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]   # Recode facet z-values into color indices   facetcol <- cut(zfacet, nbcol)   persp(x1, x2, z, col = color[facetcol], phi = 30, theta = 30)   filled.contour(x1, x2, z, color.palette = jet.colors) } # }   ## Parallel computation   ## works better when each evaluation takes longer ## here we have added extra time to the computations ## just to show that it works if (FALSE) { # \\dontrun{    res7 <- optim_ARS(c(-4,4),function(x){Sys.sleep(0.01); Rastrigin(x[1], x[2])},                     lower=-5.12, upper=5.12)   res8 <- optim_ARS(c(-4,4),function(x){Sys.sleep(0.01); Rastrigin(x[1], x[2])},                     lower=-5.12, upper=5.12,parallel = T)   res9 <- optim_ARS(c(-4,4),function(x){Sys.sleep(0.01); Rastrigin(x[1], x[2])},                     lower=-5.12, upper=5.12,parallel = T,parallel_type = \"snow\") } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/optim_LS.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a function using a line search algorithm. — optim_LS","title":"Optimize a function using a line search algorithm. — optim_LS","text":"optim_LS performs sequential grid search optimization arbitrary function respect parameters optimized . function works discrete continuous optimization parameters allows box-constraints (using upper lower function arguments) sets allowed values (using allowed_values function argument) parameters, parameter per parameter basis.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optim_LS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a function using a line search algorithm. — optim_LS","text":"","code":"optim_LS(   par,   fn,   lower = NULL,   upper = NULL,   allowed_values = NULL,   line_length = 50,   trace = TRUE,   maximize = F,   parallel = F,   parallel_type = NULL,   num_cores = NULL,   mrgsolve_model = NULL,   seed = round(runif(1, 0, 1e+07)),   allow_replicates = TRUE,   replicates_index = seq(1, length(par)),   ofv_initial = NULL,   closed_bounds = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/optim_LS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a function using a line search algorithm. — optim_LS","text":"par vector initial values parameters optimized . fn function minimized (maximized), first argument vector parameters minimization take place. return scalar result. lower Lower bounds parameters. vector. upper Upper bounds parameters. vector. allowed_values list containing allowed values parameter list(par1=c(2,3,4,5,6),par2=c(5,6,7,8)). vector containing allowed values parameters also allowed c(2,3,4,5,6). line_length number different parameter values per parameter evaluate.  values selected evenly spaced grid upper lower bounds. trace algorithm output results intermittently. maximize function maximized?  Default minimize. parallel use parallel computations? parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. See start_parallel. num_cores number cores use parallelization.  default  set number  output parallel::detectCores(). See start_parallel. mrgsolve_model computations require mrgsolve model using \"snow\" method need specify name model object created mread mcode. seed random seed use algorithm, allow_replicates algorithm allow parameters value? replicates_index vector, length parameters. two values vector parameters may assume value optimization. ofv_initial initial objective function value (OFV).  NULL initial design evaluated OFV value assumed number. closed_bounds upper lower limits open (boundaries allowed) closed (boundaries allowed) bounds? ... Additional arguments passed fn start_parallel.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optim_LS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimize a function using a line search algorithm. — optim_LS","text":"M. Foracchia, .C. Hooker, P. Vicini . Ruggeri, \"PopED, software fir optimal experimental design population kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J. Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C. Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models optimal design tool\", Computer Methods Programs Biomedicine, 108, 2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/optim_LS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize a function using a line search algorithm. — optim_LS","text":"","code":"# \"wild\" function  fw <- function(x) 10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80  # Global minimum of 67.47 at about -15.81515 (fw_min <- fw(-15.81515)) #> [1] 67.46773  if (interactive()){     #plot of the function   require(graphics)   plot(fw, -50, 50, n = 10000, main = \"Minimizing 'wild function'\")      # Known minimum   points(-15.81515, fw_min, pch = 21, col = \"red\", cex = 1.5) }   # optimization with fewer function evaluations  # compared to SANN: see examples in '?optim' res1 <- optim_LS(50, fw,lower = -50, upper=50, line_length = 10000) #>  #>    Initial parameters: 50  #>    Initial OFV: 159.0012  #>  #>    Searching parameter 1  #>      Changed from 50 to -15.8166 ; OFV = 67.485  #>  #>    Elapsed time: 0.033 seconds. #>  #>    Final OFV =  67.48502  #>    Parameters: -15.81658  #>   if (interactive()){    require(graphics)   plot(fw, -20, 0, n = 10000, main = \"Minimizing 'wild function'\")      # Known minimum   points(-15.81515, fw_min, pch = 21, col = \"red\", cex = 1.5)      #plot of the optimization   points(res1$par, res1$ofv, pch = 16, col = \"green\", cex = 1) }   # Upper and lower bounds and line_length should be considered carefully res2 <- optim_LS(50, fw, lower=-Inf,upper=Inf,line_length = 10000) #>  #>    Initial parameters: 50  #>    Initial OFV: 159.0012  #>  #>    Searching parameter 1  #>      Changed from 50 to -5.0055 ; OFV = 69.8766  #>  #>    Elapsed time: 0.038 seconds. #>  #>    Final OFV =  69.87659  #>    Parameters: -5.005501  #>   # Only integer values allowed res_int <- optim_LS(50, fw, allowed_values = seq(-50,50,by=1)) #>  #>    Initial parameters: 50  #>    Initial OFV: 159.0012  #>  #>    Searching parameter 1  #>      Changed from 50 to -17 ; OFV = 68.5368  #>  #>    Elapsed time: 0.001 seconds. #>  #>    Final OFV =  68.53679  #>    Parameters: -17  #>    # Rosenbrock Banana function # f(x, y) = (a-x)^2 + b*(y-x^2)^2 # global minimum at (x, y)=(a, a^2), where f(x, y)=0.  # Usually a = 1 and b = 100 so x=1 and y=1 if (interactive()){    fr <- function(x,a=1,b=100) {        x1 <- x[1]     x2 <- x[2]     b*(x2 - x1*x1)^2 + (a - x1)^2   }      res3 <- optim_LS(c(-1.2,1), fr,lower = -5, upper = 5, line_length = 1000)    # plot the surface   x <- seq(-50, 50, length= 30)   y <- x   f <- function(x,y){apply(cbind(x,y),1,fr)}   z <- outer(x, y, f)   persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = \"lightblue\", ticktype=\"detailed\") -> res   points(trans3d(1, 1, 0, pmat = res), col = 2, pch = 16,cex=2)   points(trans3d(res3$par[1], res3$par[1], res3$ofv, pmat = res), col = \"green\", pch = 16,cex=1.5) }  # box constraints flb <- function(x){   p <- length(x)    sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2)  }  ## 25-dimensional box constrained if (interactive()){    optim(rep(3, 25), flb,lower = rep(2, 25), upper = rep(4, 25),method = \"L-BFGS-B\")  } res_box <- optim_LS(rep(3, 25), flb,                     lower = rep(2, 25),                      upper = rep(4, 25),                     line_length = 1000)  #>  #>    Initial parameters: 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  #>    Initial OFV: 3460  #>  #>    Searching parameter 7  #>      Changed from 3 to 2.14414 ; OFV = 3370.22  #>    Searching parameter 16  #>      Changed from 3 to 2.14414 ; OFV = 3280.43  #>    Searching parameter 2  #>      Changed from 3 to 2.14414 ; OFV = 3190.65  #>    Searching parameter 25  #>      Changed from 3 to 4 ; OFV = 3146.65  #>    Searching parameter 20  #>      Changed from 3 to 2.14414 ; OFV = 3056.87  #>    Searching parameter 11  #>      Changed from 3 to 2.14414 ; OFV = 2967.09  #>    Searching parameter 1  #>      Changed from 3 to 2 ; OFV = 2789.85  #>    Searching parameter 13  #>      Changed from 3 to 2.14414 ; OFV = 2700.07  #>    Searching parameter 18  #>      Changed from 3 to 2.14414 ; OFV = 2610.29  #>    Searching parameter 9  #>      Changed from 3 to 2.14414 ; OFV = 2520.5  #>    Searching parameter 21  #>      Changed from 3 to 2 ; OFV = 2397.28  #>    Searching parameter 4  #>      Changed from 3 to 2.14414 ; OFV = 2307.5  #>    Searching parameter 5  #>      Changed from 3 to 2 ; OFV = 2184.28  #>    Searching parameter 8  #>      Changed from 3 to 2 ; OFV = 2026.82  #>    Searching parameter 12  #>      Changed from 3 to 2 ; OFV = 1869.37  #>    Searching parameter 19  #>      Changed from 3 to 2 ; OFV = 1711.91  #>    Searching parameter 15  #>      Changed from 3 to 2 ; OFV = 1589.68  #>    Searching parameter 10  #>      Changed from 3 to 2 ; OFV = 1432.22  #>    Searching parameter 22  #>      Changed from 3 to 2 ; OFV = 1304.22  #>    Searching parameter 3  #>      Changed from 3 to 2 ; OFV = 1146.77  #>    Searching parameter 6  #>      Changed from 3 to 2 ; OFV = 984.533  #>    Searching parameter 17  #>      Changed from 3 to 2 ; OFV = 827.077  #>    Searching parameter 23  #>      Changed from 3 to 2 ; OFV = 699.077  #>    Searching parameter 24  #>      Changed from 3 to 2.10811 ; OFV = 610.183  #>    Searching parameter 14  #>      Changed from 3 to 2 ; OFV = 446.962  #>  #>    Elapsed time: 0.146 seconds. #>  #>    Final OFV =  446.9622  #>    Parameters: 2 2.144144 2 2.144144 2 2 2.144144 2 2.144144 2 2.144144 2 2.144144 2 2 2.144144 2 2.144144 2 2.144144 2 2 2 2.108108 4  #>   # one-dimensional function if (interactive()){    f <- function(x)  abs(x)+cos(x)   res5 <- optim_LS(-20,f,lower=-20, upper=20, line_length = 500)      curve(f, -20, 20)   abline(v = res5$par, lty = 4,col=\"green\") }    # one-dimensional function f <- function(x)  (x^2+x)*cos(x) # -10 < x < 10 res_max <- optim_LS(0,f,lower=-10, upper=10,maximize=TRUE,line_length = 1000)  #>  #>    Initial parameters: 0  #>    Initial OFV: 0  #>  #>    Searching parameter 1  #>      Changed from 0 to 6.55656 ; OFV = 47.7052  #>  #>    Elapsed time: 0.003 seconds. #>  #>    Final OFV =  47.7052  #>    Parameters: 6.556557  #>   if (interactive()){    res_min <- optim_LS(0,f,lower=-10, upper=10, line_length = 1000)       curve(f, -10, 10)   abline(v = res_min$par, lty = 4,col=\"green\")   abline(v = res_max$par, lty = 4,col=\"red\") }   # two-dimensional Rastrigin function #It has a global minimum at f(x) = f(0) = 0. if (interactive()){    Rastrigin <- function(x1, x2){     20 + x1^2 + x2^2 - 10*(cos(2*pi*x1) + cos(2*pi*x2))   }         x1 <- x2 <- seq(-5.12, 5.12, by = 0.1)   z <- outer(x1, x2, Rastrigin)      res6 <- optim_LS(c(-4,4),function(x) Rastrigin(x[1], x[2]),                    lower=-5.12, upper=5.12, line_length = 1000)      # color scale   nrz <- nrow(z)   ncz <- ncol(z)   jet.colors <-     colorRampPalette(c(\"#00007F\", \"blue\", \"#007FFF\", \"cyan\",                        \"#7FFF7F\", \"yellow\", \"#FF7F00\", \"red\", \"#7F0000\"))   # Generate the desired number of colors from this palette   nbcol <- 100   color <- jet.colors(nbcol)   # Compute the z-value at the facet centres   zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]   # Recode facet z-values into color indices   facetcol <- cut(zfacet, nbcol)   persp(x1, x2, z, col = color[facetcol], phi = 30, theta = 30)   filled.contour(x1, x2, z, color.palette = jet.colors) }   ## Parallel computation   ## works better when each evaluation takes longer ## here we have added extra time to the computations ## just to show that it works if (interactive()){    res7 <- optim_LS(c(-4,4),function(x){Sys.sleep(0.01); Rastrigin(x[1], x[2])},                    lower=-5.12, upper=5.12, line_length = 200)   res8 <- optim_LS(c(-4,4),function(x){Sys.sleep(0.01); Rastrigin(x[1], x[2])},                    lower=-5.12, upper=5.12, line_length = 200, parallel = TRUE)   res9 <- optim_LS(c(-4,4),function(x){Sys.sleep(0.01); Rastrigin(x[1], x[2])},                    lower=-5.12, upper=5.12, line_length = 200, parallel = TRUE,                     parallel_type = \"snow\") }"},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_groupsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Optimize the proportion of individuals in the design groups — optimize_groupsize","title":"Title Optimize the proportion of individuals in the design groups — optimize_groupsize","text":"Title Optimize proportion individuals design groups","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_groupsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Optimize the proportion of individuals in the design groups — optimize_groupsize","text":"","code":"optimize_groupsize(   poped.db,   props = c(poped.db$design$groupsize/sum(poped.db$design$groupsize)),   trace = 1,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_groupsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Optimize the proportion of individuals in the design groups — optimize_groupsize","text":"poped.db PopED database. props proportions individuals group (relative total number individuals) start optimization . trace tracing optimization? Value can integer values. Larger numbers give information. ... Arguments passed ofv_fim optim","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_groupsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Optimize the proportion of individuals in the design groups — optimize_groupsize","text":"list  initial objective function value, optimal proportions, objective function value proportions, optimal number individuals group (integer number individuals), objective function value number individuals.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_groupsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Optimize the proportion of individuals in the design groups — optimize_groupsize","text":"","code":"# 2 design groups with either early or late samples poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=function(x,a,bpop,b,bocc){                                     parameters=c(CL=bpop[1]*exp(b[1]),                                                  V=bpop[2]*exp(b[2]),                                                  KA=bpop[3]*exp(b[3]),                                                  Favail=bpop[4],                                                  DOSE=a[1])                                     return(parameters)                                    },                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   xt=list(c(1,2,3),c(4,5,20,120)),                                   groupsize=50,                                   minxt=0.01,                                   maxxt=120,                                   a=70,                                   mina=0.01,                                   maxa=100)   plot_model_prediction(poped.db)   evaluate_design(poped.db) #> $ofv #> [1] 57.34239 #>  #> $fim #>                     CL         V        KA         d_CL        d_V        d_KA #> CL         20100.83363 100.60318  57.19595    0.0000000     0.0000   0.0000000 #> V            100.60318  47.77375 -18.43690    0.0000000     0.0000   0.0000000 #> KA            57.19595 -18.43690  80.55401    0.0000000     0.0000   0.0000000 #> d_CL           0.00000   0.00000   0.00000 2019.7601648    73.4525   0.6961553 #> d_V            0.00000   0.00000   0.00000   73.4524996 48705.8108 117.2176533 #> d_KA           0.00000   0.00000   0.00000    0.6961553   117.2177  51.8762750 #> SIGMA[1,1]     0.00000   0.00000   0.00000 1428.9648684 31892.5113 417.9515723 #> SIGMA[2,2]     0.00000   0.00000   0.00000  274.2990996   640.9862  10.3145690 #>             SIGMA[1,1] SIGMA[2,2] #> CL              0.0000    0.00000 #> V               0.0000    0.00000 #> KA              0.0000    0.00000 #> d_CL         1428.9649  274.29910 #> d_V         31892.5113  640.98623 #> d_KA          417.9516   10.31457 #> SIGMA[1,1] 353788.5599 6967.23365 #> SIGMA[2,2]   6967.2337  236.40519 #>  #> $rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.742175   1.908239  11.706099  38.149149  23.388391  23.297863  28.859652  #> SIGMA[2,2]  #>  48.150485  #>    # what are the optimal proportions of  # individuals in the two groups in the study? (n_opt <- optimize_groupsize(poped.db)) #> Initial proportions: #>  0.5 0.5  #>  #> initial  value -57.342391  #> final  value -57.747204  #> converged #>  #> Optimized proportions: #>  0.2984998 0.7015002  #>  #> Optimized number of individuals per group #>  OFV:  57.74718  #>  30 70  #>  #> $initial_props #> [1] 0.5 0.5 #>  #> $initial_ofv #> [1] 57.34239 #>  #> $opt_props #> [1] 0.2984998 0.7015002 #>  #> $opt_ofv_with_props #> [1] 57.7472 #>  #> $opt_n_per_group #> [1] 30 70 #>  #> $opt_ofv_with_n #> [1] 57.74718 #>   # How many individuals in the original design are needed to achieve an # efficiency of 1 compared to the optimized design with n=100? optimize_n_eff(poped.db,                ofv_ref=n_opt$opt_ofv_with_n) #> [1] 105.19"},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate efficiency to number of subjects — optimize_n_eff","title":"Translate efficiency to number of subjects — optimize_n_eff","text":"optimize MANY n achieve efficiency=1 compared reference OFV","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate efficiency to number of subjects — optimize_n_eff","text":"","code":"optimize_n_eff(poped.db, ofv_ref, norm_group_fim = NULL, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate efficiency to number of subjects — optimize_n_eff","text":"poped.db PopED database. ofv_ref reference OFV value compare . norm_group_fim FIM per individual design group. NULL, computed. ... Arguments passed evaluate.fim efficiency.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate efficiency to number of subjects — optimize_n_eff","text":"number individuals needed.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate efficiency to number of subjects — optimize_n_eff","text":"","code":"# 2 design groups with either early or late samples poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=function(x,a,bpop,b,bocc){                                     parameters=c(CL=bpop[1]*exp(b[1]),                                                  V=bpop[2]*exp(b[2]),                                                  KA=bpop[3]*exp(b[3]),                                                  Favail=bpop[4],                                                  DOSE=a[1])                                     return(parameters)                                    },                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   xt=list(c(1,2,3),c(4,5,20,120)),                                   groupsize=50,                                   minxt=0.01,                                   maxxt=120,                                   a=70,                                   mina=0.01,                                   maxa=100)   plot_model_prediction(poped.db)   evaluate_design(poped.db) #> $ofv #> [1] 57.34239 #>  #> $fim #>                     CL         V        KA         d_CL        d_V        d_KA #> CL         20100.83363 100.60318  57.19595    0.0000000     0.0000   0.0000000 #> V            100.60318  47.77375 -18.43690    0.0000000     0.0000   0.0000000 #> KA            57.19595 -18.43690  80.55401    0.0000000     0.0000   0.0000000 #> d_CL           0.00000   0.00000   0.00000 2019.7601648    73.4525   0.6961553 #> d_V            0.00000   0.00000   0.00000   73.4524996 48705.8108 117.2176533 #> d_KA           0.00000   0.00000   0.00000    0.6961553   117.2177  51.8762750 #> SIGMA[1,1]     0.00000   0.00000   0.00000 1428.9648684 31892.5113 417.9515723 #> SIGMA[2,2]     0.00000   0.00000   0.00000  274.2990996   640.9862  10.3145690 #>             SIGMA[1,1] SIGMA[2,2] #> CL              0.0000    0.00000 #> V               0.0000    0.00000 #> KA              0.0000    0.00000 #> d_CL         1428.9649  274.29910 #> d_V         31892.5113  640.98623 #> d_KA          417.9516   10.31457 #> SIGMA[1,1] 353788.5599 6967.23365 #> SIGMA[2,2]   6967.2337  236.40519 #>  #> $rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.742175   1.908239  11.706099  38.149149  23.388391  23.297863  28.859652  #> SIGMA[2,2]  #>  48.150485  #>    # what are the optimal proportions of  # individuals in the two groups in the study? (n_opt <- optimize_groupsize(poped.db)) #> Initial proportions: #>  0.5 0.5  #>  #> initial  value -57.342391  #> final  value -57.747204  #> converged #>  #> Optimized proportions: #>  0.2984998 0.7015002  #>  #> Optimized number of individuals per group #>  OFV:  57.74718  #>  30 70  #>  #> $initial_props #> [1] 0.5 0.5 #>  #> $initial_ofv #> [1] 57.34239 #>  #> $opt_props #> [1] 0.2984998 0.7015002 #>  #> $opt_ofv_with_props #> [1] 57.7472 #>  #> $opt_n_per_group #> [1] 30 70 #>  #> $opt_ofv_with_n #> [1] 57.74718 #>   # How many individuals in the original design are needed to achieve an # efficiency of 1 compared to the optimized design with n=100? optimize_n_eff(poped.db,                ofv_ref=n_opt$opt_ofv_with_n) #> [1] 105.19"},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_rse.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the number of subjects based on desired uncertainty of a parameter. — optimize_n_rse","title":"Optimize the number of subjects based on desired uncertainty of a parameter. — optimize_n_rse","text":"Optimize number subjects, based current design desired uncertainty single parameter","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_rse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the number of subjects based on desired uncertainty of a parameter. — optimize_n_rse","text":"","code":"optimize_n_rse(   poped.db,   bpop_idx,   need_rse,   use_percent = TRUE,   allowed_values = seq(poped.db$design$m, sum(poped.db$design$groupsize) * 5, by =     poped.db$design$m) )"},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_rse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the number of subjects based on desired uncertainty of a parameter. — optimize_n_rse","text":"poped.db PopED database. bpop_idx index number parameter, currently bpop parameters allowed. need_rse relative standard error (RSE) one like achieve (percent, default). use_percent RSE represented percentage (T/F)? allowed_values vector allowed total number subjects study.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_rse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize the number of subjects based on desired uncertainty of a parameter. — optimize_n_rse","text":"total number subjects needed RSE parameter.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/optimize_n_rse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize the number of subjects based on desired uncertainty of a parameter. — optimize_n_rse","text":"","code":"# 2 design groups with either early or late samples poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=function(x,a,bpop,b,bocc){                                     parameters=c(CL=bpop[1]*exp(b[1]),                                                  V=bpop[2]*exp(b[2]),                                                  KA=bpop[3]*exp(b[3]),                                                  Favail=bpop[4],                                                  DOSE=a[1])                                     return(parameters)                                    },                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(0.01,0.25),                                   xt=list(c(1,2,3),c(4,5,20,120)),                                   groupsize=50,                                   minxt=0.01,                                   maxxt=120,                                   a=70,                                   mina=0.01,                                   maxa=100)  # plot of the design plot_model_prediction(poped.db)   # the current RSE values evaluate_design(poped.db)$rse #>         CL          V         KA       d_CL        d_V       d_KA SIGMA[1,1]  #>   4.742175   1.908239  11.706099  38.149149  23.388391  23.297863  28.859652  #> SIGMA[2,2]  #>  48.150485   # number of individuals if CL should have 10% RSE optimize_n_rse(poped.db,                 bpop_idx=1, # for CL                 need_rse=10) # the RSE you want #> $n #> [1] 24 #>  #> $par_rse #>       CL  #> 9.679923  #>"},{"path":"https://andrewhooker.github.io/PopED/reference/pargen.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter simulation — pargen","title":"Parameter simulation — pargen","text":"Function generates random samples list parameters","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/pargen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter simulation — pargen","text":"","code":"pargen(par, user_dist_pointer, sample_size, bLHS, sample_number, poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/pargen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter simulation — pargen","text":"par matrix describing parameters. row parameter matrix three columns: First column - Type distribution (0-fixed, 1-normal, 2-uniform, 3-user specified, 4-lognormal, 5-Truncated normal). Second column - Mean distribution. Third column - Variance range distribution. user_dist_pointer text string name function generates random samples user defined distribution. sample_size number random samples per parameter generate bLHS Logical, indicating Latin Hypercube Sampling used. sample_number sample number extract user distribution. poped.db PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/pargen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter simulation — pargen","text":"matrix random samples size (sample_size x   number_of_parameters)","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/pargen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter simulation — pargen","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################   # Adding 40% Uncertainty to fixed effects log-normal (not Favail) bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1) bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                       bpop_vals,                       ones(length(bpop_vals),1)*(bpop_vals*0.4)^2) # 40% of bpop value bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0)  pars.ln <- pargen(par=bpop_vals_ed_ln,                user_dist_pointer=NULL,                sample_size=1000,                bLHS=1,                sample_number=NULL,                poped.db)   # Adding 10% Uncertainty to fixed effects normal-distribution (not Favail) bpop_vals_ed_n <- cbind(ones(length(bpop_vals),1)*1, # log-normal distribution                       bpop_vals,                       ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value bpop_vals_ed_n[\"Favail\",]  <- c(0,1,0)  pars.n <- pargen(par=bpop_vals_ed_n,                user_dist_pointer=NULL,                sample_size=1000,                bLHS=1,                sample_number=NULL,                poped.db)   # Adding 10% Uncertainty to fixed effects uniform-distribution (not Favail) bpop_vals_ed_u <- cbind(ones(length(bpop_vals),1)*2, # uniform distribution                         bpop_vals,                         ones(length(bpop_vals),1)*(bpop_vals*0.1)) # 10% of bpop value bpop_vals_ed_u[\"Favail\",]  <- c(0,1,0)  pars.u <- pargen(par=bpop_vals_ed_u,                  user_dist_pointer=NULL,                  sample_size=1000,                  bLHS=1,                  sample_number=NULL,                  poped.db)   # Adding user defined distributions bpop_vals_ed_ud <- cbind(ones(length(bpop_vals),1)*3, # user dfined distribution                          bpop_vals,                          bpop_vals*0.1) # 10% of bpop value bpop_vals_ed_ud[\"Favail\",]  <- c(0,1,0)  # A normal distribution my_dist <- function(...){   par_vec <- rnorm(c(1,1,1,1),mean=bpop_vals_ed_ud[,2],sd=bpop_vals_ed_ud[,3]) }  pars.ud <- pargen(par=bpop_vals_ed_ud,                   user_dist_pointer=my_dist,                   sample_size=1000,                   bLHS=1,                   sample_number=NULL,                   poped.db)"},{"path":"https://andrewhooker.github.io/PopED/reference/plot_efficiency_of_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the efficiency of windows — plot_efficiency_of_windows","title":"Plot the efficiency of windows — plot_efficiency_of_windows","text":"Function plots efficiency windows around sample time points. function samples uniform distribution around sample time points group (individual deviate_by_id=TRUE, slower calculation times) compares results design defined poped.db. maximal minimal allowed values design variables defined poped.db respected (e.g. poped.db$design_space$minxt poped.db$design_space$maxxt).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/plot_efficiency_of_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the efficiency of windows — plot_efficiency_of_windows","text":"","code":"plot_efficiency_of_windows(   poped.db,   xt_windows = NULL,   xt_plus = xt_windows,   xt_minus = xt_windows,   iNumSimulations = 100,   y_eff = TRUE,   y_rse = TRUE,   ofv_calc_type = poped.db$settings$ofv_calc_type,   mean_line = TRUE,   mean_color = \"red\",   deviate_by_id = FALSE,   parallel = F,   seed = round(runif(1, 0, 1e+07)),   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/plot_efficiency_of_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the efficiency of windows — plot_efficiency_of_windows","text":"poped.db poped database xt_windows distance one direction optimal sample times.  Can number matrix size xt matrix found poped.db$design$xt. xt_plus upper distance optimal sample times (xt + xt_plus). Can number matrix size xt matrix found poped.db$design$xt. xt_minus lower distance optimal sample times (xt - xt_minus). Can number matrix size xt matrix found poped.db$design$xt. iNumSimulations number design simulations make within specified windows. y_eff one plots created efficiency y-axis? y_rse created plots include relative standard error parameter value y-axis? ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) mean_line mean value line created? mean_color color mean value line. deviate_by_id computations look deviations per individual instead per group? parallel use parallel computations (T/F)? options can defined function passed start_parallel.  See especially options dlls mrgsolve_model function model defined compiled code using mrgsolve. seed random seed use. ... Extra arguments passed evaluate.fim","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/plot_efficiency_of_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the efficiency of windows — plot_efficiency_of_windows","text":"ggplot object.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/plot_efficiency_of_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the efficiency of windows — plot_efficiency_of_windows","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################     # Examine efficiency of sampling windows at plus/minus 0.5 hours from  # sample points in the design plot_efficiency_of_windows(poped.db,xt_windows=0.5)    if(interactive()){      plot_efficiency_of_windows(poped.db,                              xt_plus=c( 0.5,1,2,1,2,3,7,1),                              xt_minus=c( 0.1,2,5,4,2,3,6,2))      plot_efficiency_of_windows(poped.db,xt_windows=c( 0.5,1,2,1,2,3,7,1))         plot_efficiency_of_windows(poped.db,                              xt_plus=c( 0.5,1,2,1,2,3,7,1),                              xt_minus=c( 0.1,2,5,4,2,3,6,2),                              y_rse=FALSE)      plot_efficiency_of_windows(poped.db,                              xt_plus=c( 0.5,1,2,1,2,3,7,1),                              xt_minus=c( 0.1,2,5,4,2,3,6,2),                              y_eff=FALSE) }"},{"path":"https://andrewhooker.github.io/PopED/reference/plot_model_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model predictions — plot_model_prediction","title":"Plot model predictions — plot_model_prediction","text":"Function plots model predictions typical value population, individual predictions data predictions.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/plot_model_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model predictions — plot_model_prediction","text":"","code":"plot_model_prediction(   poped.db,   model_num_points = 100,   groupsize_sim = 100,   separate.groups = F,   sample.times = T,   sample.times.IPRED = F,   sample.times.DV = F,   PRED = T,   IPRED = F,   IPRED.lines = F,   IPRED.lines.pctls = F,   alpha.IPRED.lines = 0.1,   alpha.IPRED = 0.3,   sample.times.size = 4,   DV = F,   alpha.DV = 0.3,   DV.lines = F,   DV.points = F,   alpha.DV.lines = 0.3,   alpha.DV.points = 0.3,   sample.times.DV.points = F,   sample.times.DV.lines = F,   alpha.sample.times.DV.points = 0.3,   alpha.sample.times.DV.lines = 0.3,   y_lab = \"Model Predictions\",   facet_scales = \"fixed\",   facet_label_names = T,   model.names = NULL,   DV.mean.sd = FALSE,   PI = FALSE,   PI_alpha = 0.3,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/plot_model_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model predictions — plot_model_prediction","text":"poped.db PopED database. model_num_points many extra observation rows created data frame group individual per model.  used points placed evenly model_minxt model_maxxt. option used plot_model_prediction simulate response model finer grid defined design. NULL input design used.  Can single value vector length number models. groupsize_sim many individuals per group  simulated DV=TRUE IPRED=TRUE create prediction intervals? separate.groups separate plots group. sample.times sample times shown plots. sample.times.IPRED sample times shown based IPRED y-values. sample.times.DV sample times shown based DV y-values. PRED PRED line drawn. IPRED simulate individual predictions? IPRED.lines IPRED lines drawn? IPRED.lines.pctls lines drawn chosen percentiles IPRED values? alpha.IPRED.lines transparency IPRED.lines ? alpha.IPRED transparency IPRED CI? sample.times.size size sample.times ? DV simulate observations? alpha.DV transparency DV CI? DV.lines DV lines drawn? DV.points DV points drawn? alpha.DV.lines transparency DV.lines ? alpha.DV.points transparency DV.points ? sample.times.DV.points TRUE FALSE. sample.times.DV.lines TRUE FALSE. alpha.sample.times.DV.points transparency sample.times.DV.points ? alpha.sample.times.DV.lines transparency sample.times.DV.lines ? y_lab label y-axis. facet_scales Can \"free\", \"fixed\", \"free_x\" \"free_y\" facet_label_names TRUE FALSE model.names vector names response model/s (length vector equal number response models). Null default. DV.mean.sd Plot mean standard deviation simulated observations. PI Plot prediction intervals expected data given model. Predictions based first-order approximations model variance normality assumption variance.  computations approximate using DV=T groupsize_sim = large number. PI_alpha transparency PI. ... Additional arguments passed model_prediction function.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/plot_model_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot model predictions — plot_model_prediction","text":"ggplot object.  like edit plot forget load ggplot2 library using library(ggplot2).","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/plot_model_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model predictions — plot_model_prediction","text":"","code":"## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   library(PopED)  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.md.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         N = floor(xt/TAU) + 1 #>         y = (DOSE * Favail/V) * (KA/(KA - CL/V)) * (exp(-CL/V *  #>             (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 -  #>             exp(-CL/V * TAU)) - exp(-KA * (xt - (N - 1) * TAU)) *  #>             (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU))) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c059240ae0> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])     return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(   ff_fun=ff.PK.1.comp.oral.sd.CL,   fg_fun=sfg,   fError_fun=feps.prop,   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),    notfixed_bpop=c(1,1,1,0),   d=c(CL=0.07, V=0.02, KA=0.6),    sigma=0.01,   groupsize=32,   xt=c( 0.5,1,2,6,24,36,72,120),   minxt=0,   maxxt=120,   a=70)  ##  create plot of model without variability  plot_model_prediction(poped.db)   ##  create plot of model with variability by simulating from OMEGA and SIGMA plot_model_prediction(poped.db,IPRED=TRUE,DV=TRUE)   ##  create plot of model with variability by  ##  computing the expected variance (using an FO approximation)  ##  and then computing a prediction interval  ##  based on an assumption of normality ##  computation is faster but less accurate  ##  compared to using DV=TRUE (and groupsize_sim = 500) plot_model_prediction(poped.db,PI=TRUE)   ##-- Model: One comp first order absorption + inhibitory imax ## -- works for both mutiple and single dosing   ff <- function(model_switch,xt,parameters,poped.db){   with(as.list(parameters),{          y=xt     MS <- model_switch          # PK model     N = floor(xt/TAU)+1     CONC=(DOSE*Favail/V)*(KA/(KA - CL/V)) *        (exp(-CL/V * (xt - (N - 1) * TAU)) * (1 - exp(-N * CL/V * TAU))/(1 - exp(-CL/V * TAU)) -           exp(-KA * (xt - (N - 1) * TAU)) * (1 - exp(-N * KA * TAU))/(1 - exp(-KA * TAU)))            # PD model     EFF = E0*(1 - CONC*IMAX/(IC50 + CONC))          y[MS==1] = CONC[MS==1]     y[MS==2] = EFF[MS==2]          return(list( y= y,poped.db=poped.db))   }) }  ## -- parameter definition function  sfg <- function(x,a,bpop,b,bocc){   parameters=c( V=bpop[1]*exp(b[1]),                 KA=bpop[2]*exp(b[2]),                 CL=bpop[3]*exp(b[3]),                 Favail=bpop[4],                 DOSE=a[1],                 TAU = a[2],                 E0=bpop[5]*exp(b[4]),                 IMAX=bpop[6],                 IC50=bpop[7])   return( parameters )  }   ## -- Residual Error function feps <- function(model_switch,xt,parameters,epsi,poped.db){   returnArgs <- ff(model_switch,xt,parameters,poped.db)    y <- returnArgs[[1]]   poped.db <- returnArgs[[2]]      MS <- model_switch      pk.dv <- y*(1+epsi[,1])+epsi[,2]   pd.dv <-  y*(1+epsi[,3])+epsi[,4]      y[MS==1] = pk.dv[MS==1]   y[MS==2] = pd.dv[MS==2]      return(list( y= y,poped.db =poped.db ))  }  poped.db <-    create.poped.database(     ff_fun=ff,     fError_fun=feps,     fg_fun=sfg,     groupsize=20,     m=3,     bpop=c(V=72.8,KA=0.25,CL=3.75,Favail=0.9,            E0=1120,IMAX=0.807,IC50=0.0993),       notfixed_bpop=c(1,1,1,0,1,1,1),     d=c(V=0.09,KA=0.09,CL=0.25^2,E0=0.09),      sigma=c(0.04,5e-6,0.09,100),     notfixed_sigma=c(0,0,0,0),     xt=c( 1,2,8,240,240,1,2,8,240,240),     minxt=c(0,0,0,240,240,0,0,0,240,240),     maxxt=c(10,10,10,248,248,10,10,10,248,248),     discrete_xt = list(0:248),     G_xt=c(1,2,3,4,5,1,2,3,4,5),     bUseGrouped_xt=1,     model_switch=c(1,1,1,1,1,2,2,2,2,2),     a=list(c(DOSE=20,TAU=24),c(DOSE=40, TAU=24),c(DOSE=0, TAU=24)),     maxa=c(DOSE=200,TAU=40),     mina=c(DOSE=0,TAU=2),     ourzero=0)  ##  create plot of model and design  plot_model_prediction(poped.db,facet_scales=\"free\",                       model.names = c(\"PK\",\"PD\"))   ##  create plot of model with variability by   ##  computing the expected variance (using an FO approximation)  ##  and then computing a prediction interval  ##  based on an assumption of normality ##  computation is faster but less accurate  ##  compared to using DV=TRUE (and groupsize_sim = 500) plot_model_prediction(poped.db,facet_scales=\"free\",                       model.names = c(\"PK\",\"PD\"),                       PI=TRUE,                       separate.groups = TRUE)"},{"path":"https://andrewhooker.github.io/PopED/reference/poped.choose.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose between arg1 and arg2 — poped.choose","title":"Choose between arg1 and arg2 — poped.choose","text":"Function chooses arg1 unless NULL case arg2 chosen.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped.choose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose between arg1 and arg2 — poped.choose","text":"","code":"poped.choose(arg1, arg2)"},{"path":"https://andrewhooker.github.io/PopED/reference/poped.choose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose between arg1 and arg2 — poped.choose","text":"arg1 first argument arg2 second argument","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/poped.choose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose between arg1 and arg2 — poped.choose","text":"","code":"poped.choose(2,5) #> [1] 2  poped.choose(\"foo\",66) #> [1] \"foo\"  poped.choose(NULL,\"hello\") #> [1] \"hello\""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_gui.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the graphical interface for PopED — poped_gui","title":"Run the graphical interface for PopED — poped_gui","text":"Run graphical interface PopED","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the graphical interface for PopED — poped_gui","text":"","code":"poped_gui()"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a design defined in a PopED database — poped_optim","title":"Optimize a design defined in a PopED database — poped_optim","text":"Optimize design defined PopED database using objective function described database (arguments function). function works discrete continuous optimization variables.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a design defined in a PopED database — poped_optim","text":"","code":"poped_optim(   poped.db,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   method = c(\"ARS\", \"BFGS\", \"LS\"),   control = list(),   trace = TRUE,   fim.calc.type = poped.db$settings$iFIMCalculationType,   ofv_calc_type = poped.db$settings$ofv_calc_type,   ds_index = poped.db$parameters$ds_index,   approx_type = poped.db$settings$iApproximationMethod,   d_switch = poped.db$settings$d_switch,   ED_samp_size = poped.db$settings$ED_samp_size,   bLHS = poped.db$settings$bLHS,   use_laplace = poped.db$settings$iEDCalculationType,   out_file = \"\",   parallel = F,   parallel_type = NULL,   num_cores = NULL,   mrgsolve_model = NULL,   loop_methods = ifelse(length(method) > 1, TRUE, FALSE),   iter_max = 10,   stop_crit_eff = 1.001,   stop_crit_diff = NULL,   stop_crit_rel = NULL,   ofv_fun = poped.db$settings$ofv_fun,   maximize = T,   allow_replicates = TRUE,   allow_replicates_xt = TRUE,   allow_replicates_a = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a design defined in a PopED database — poped_optim","text":"poped.db PopED database. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? method vector optimization methods use sequential fashion.  Options c(\"ARS\",\"BFGS\",\"LS\",\"GA\"). c(\"ARS\") Adaptive Random Search optim_ARS.  c(\"LS\") Line Search optim_LS. c(\"BFGS\") Method \"L-BFGS-B\" optim. c(\"GA\") genetic algorithm ga. control Contains control arguments method specified. trace algorithm output results intermittently. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) ds_index Ds_index vector set 1 parameter uninteresting, otherwise 0. size=(1,num unfixed parameters). First unfixed bpop, unfixed d, unfixed docc last unfixed sigma. Default fixed effects important, everything else important.  Used conjunction ofv_calc_type=6. approx_type Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – use_laplace Laplace method used calculating expectation OFV? out_file Save output optimization file. parallel use parallel computations? parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. See start_parallel. num_cores number cores use parallelization.  default  set number  output parallel::detectCores(). See start_parallel. mrgsolve_model computations require mrgsolve model using \"snow\" method need specify name model object created mread mcode. loop_methods optimization methods looped iter_max iterations, efficiency design current series (compared start series) less , equal , stop_crit_eff? iter_max line search used algorithm tests line search (always run end optimization iteration) changes design way.  , algorithm stops.  yes, new iteration run unless iter_max iterations already run. stop_crit_eff loop_methods==TRUE, looping stop efficiency design current series (compared start series) less , equal , stop_crit_eff (maximize==FALSE 1/stop_crit_eff cut efficiency must greater equal value stop looping). stop_crit_diff loop_methods==TRUE, looping stop difference criterion value design current series (compared start series) less , equal , stop_crit_diff (maximize==FALSE -stop_crit_diff cut difference criterion value must greater equal value stop looping). stop_crit_rel loop_methods==TRUE, looping stop relative difference criterion value design current series (compared start series) less , equal , stop_crit_rel (maximize==FALSE -stop_crit_rel cut relative difference criterion value must greater equal value stop looping). ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . maximize objective function maximized minimized? allow_replicates algorithm allow optimized design components value? FALSE discrete optimizations allow replicates within variable types (equivalent allow_replicates_xt=FALSE allow_replicates_a=FALSE). allow_replicates_xt algorithm allow optimized xt design components value? FALSE discrete optimizations allow replicates. allow_replicates_a algorithm allow optimized design components value? FALSE discrete optimizations allow replicates. ... arguments passed functions.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize a design defined in a PopED database — poped_optim","text":"function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database. one optimization method specified methods run series.  loop_methods=TRUE series optimization methods run iter_max iterations, efficiency design current series (compared start series) less stop_crit_eff.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimize a design defined in a PopED database — poped_optim","text":"M. Foracchia, .C. Hooker, P. Vicini .   Ruggeri, \"PopED, software fir optimal experimental design population   kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J.   Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C.   Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models   optimal design tool\", Computer Methods Programs Biomedicine, 108,   2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize a design defined in a PopED database — poped_optim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################  ############## # D-family Optimization ##############  # below are a number of ways to optimize the problem   # ARS+BFGS+LS optimization of dose # optimization with just a few iterations # only to check that things are working out_1 <- poped_optim(poped.db,opt_a =TRUE,                       control = list(ARS=list(iter=2),                                      BFGS=list(maxit=2),                                      LS=list(line_length=2)),                       iter_max = 1) #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 55.3964 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Covariates #>  #> ************* Iteration 1  for all optimization methods*********************** #>  #> ******************************************* #> Running Adaptive Random Search Optimization #> ******************************************* #> Initial OFV = 55.3964 #>  #> Total iterations: 2  #> Elapsed time: 0.02 seconds. #>  #> Final OFV =  55.39645  #> Parameters: 70  #>  #> ******************************************* #> Running BFGS Optimization #> ******************************************* #> initial  value -55.396450  #> final  value -55.766379  #> stopped after 2 iterations #>  #> ******************************************* #> Running Line Search Optimization #> ******************************************* #>  #>    Initial parameters: 83.20112  #>    Initial OFV: 55.76638  #>  #>    Searching parameter 1  #>      Changed from 83.2011 to 100 ; OFV = 56.032  #>  #>    Elapsed time: 0.02 seconds. #>  #>    Final OFV =  56.03204  #>    Parameters: 100  #>  #> ******************************************* #> Stopping criteria testing #> (Compare between start of iteration and end of iteration) #> ******************************************* #> Difference in OFV:  0.636 #> Relative difference in OFV:  1.15% #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.0827 #>  #>  Efficiency stopping criteria:  #>   Is (1.0827 <= 1.001)?   No. #>   Stopping criteria NOT achieved. #>  #> Stopping criteria NOT achieved. #>  #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 100 #>  #> OFV = 56.032 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.0827 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07      30    28 #>          d_V     0.02      37    34 #>         d_KA      0.6      27    26 #>     sig_prop     0.01      32    23 #>      sig_add     0.25      26    30 #>  #> Total running time: 0.232 seconds   # cost function # PRED at 120 hours crit_fcn <- function(poped.db,...){   pred_df <- model_prediction(poped.db)   return(pred_df[pred_df$Time==120,\"PRED\"]) }  # maximize cost function out_2 <- poped_optim(poped.db,opt_a =TRUE,                      ofv_fun=crit_fcn,                      control = list(ARS=list(iter=2),                                     BFGS=list(maxit=2),                                     LS=list(line_length=2)),                      iter_max = 2) #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 0.939866 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Covariates #>  #> ************* Iteration 1  for all optimization methods*********************** #>  #> ******************************************* #> Running Adaptive Random Search Optimization #> ******************************************* #> Initial OFV = 0.939866 #>  #> Total iterations: 2  #> Elapsed time: 0.006 seconds. #>  #> Final OFV =  0.9398657  #> Parameters: 70  #>  #> ******************************************* #> Running BFGS Optimization #> ******************************************* #> initial  value -0.939866  #> final  value -1.014649  #> stopped after 2 iterations #>  #> ******************************************* #> Running Line Search Optimization #> ******************************************* #>  #>    Initial parameters: 75.56977  #>    Initial OFV: 1.014649  #>  #>    Searching parameter 1  #>      Changed from 75.5698 to 100 ; OFV = 1.34267  #>  #>    Elapsed time: 0.008 seconds. #>  #>    Final OFV =  1.342665  #>    Parameters: 100  #>  #> ******************************************* #> Stopping criteria testing #> (Compare between start of iteration and end of iteration) #> ******************************************* #> Difference in OFV:  0.403 #> Relative difference in OFV:  42.9% #> Efficiency:  #>   (ofv_final / ofv_init) = 1.4286 #>  #>  Efficiency stopping criteria:  #>   Is (1.4286 <= 1.001)?   No. #>   Stopping criteria NOT achieved. #>  #> Stopping criteria NOT achieved. #>  #> ************* Iteration 2  for all optimization methods*********************** #>  #> ******************************************* #> Running Adaptive Random Search Optimization #> ******************************************* #> Initial OFV = 1.34267 #>  #> Total iterations: 2  #> Elapsed time: 0.006 seconds. #>  #> Final OFV =  1.342665  #> Parameters: 100  #>  #> ******************************************* #> Running BFGS Optimization #> ******************************************* #> initial  value -1.342665  #> final  value -1.342665  #> converged #>  #> ******************************************* #> Running Line Search Optimization #> ******************************************* #>  #>    Initial parameters: 100  #>    Initial OFV: 1.342665  #>  #>    Searching parameter 1  #>      Changed from 100 to 100 ; OFV = 1.34267  #>  #>    Elapsed time: 0.009 seconds. #>  #>    Final OFV =  1.342665  #>    Parameters: 100  #>  #> ******************************************* #> Stopping criteria testing #> (Compare between start of iteration and end of iteration) #> ******************************************* #> Difference in OFV:  0 #> Relative difference in OFV:  0% #> Efficiency:  #>   (ofv_final / ofv_init) = 1 #>  #>  Efficiency stopping criteria:  #>   Is (1 <= 1.001)?   Yes. #>   Stopping criteria achieved. #>  #> Stopping criteria achieved. #>  #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 100 #>  #> OFV = 1.34267 #>  #> Efficiency:  #>   (ofv_final / ofv_init) = 1.4286 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07      30    28 #>          d_V     0.02      37    34 #>         d_KA      0.6      27    26 #>     sig_prop     0.01      32    23 #>      sig_add     0.25      26    30 #>  #> Total running time: 0.343 seconds  # minimize the cost function out_3 <- poped_optim(poped.db,opt_a =TRUE,                      ofv_fun=crit_fcn,                      control = list(ARS=list(iter=2),                                     BFGS=list(maxit=2),                                     LS=list(line_length=2)),                      iter_max = 2,                      maximize = FALSE,                      evaluate_fim = FALSE) #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 0.939866 #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Covariates #>  #> ************* Iteration 1  for all optimization methods*********************** #>  #> ******************************************* #> Running Adaptive Random Search Optimization #> ******************************************* #> Initial OFV = 0.939866 #>  #> Total iterations: 2  #> Elapsed time: 0.011 seconds. #>  #> Final OFV =  0.9398657  #> Parameters: 70  #>  #> ******************************************* #> Running BFGS Optimization #> ******************************************* #> initial  value 0.939866  #> final  value 0.856208  #> stopped after 2 iterations #>  #> ******************************************* #> Running Line Search Optimization #> ******************************************* #>  #>    Initial parameters: 63.76928  #>    Initial OFV: 0.856208  #>  #>    Searching parameter 1  #>      Changed from 63.7693 to 0.01 ; OFV = 0.000134267  #>  #>    Elapsed time: 0.008 seconds. #>  #>    Final OFV =  0.0001342665  #>    Parameters: 0.01  #>  #> ******************************************* #> Stopping criteria testing #> (Compare between start of iteration and end of iteration) #> ******************************************* #> Difference in OFV:  -0.94 #> Relative difference in OFV:  -100% #> Efficiency:  #>   (ofv_final / ofv_init) = 0.00014286 #>  #>  Efficiency stopping criteria:  #>   Is (0.00014286 >= 0.999)?   No. #>   Stopping criteria NOT achieved. #>  #> Stopping criteria NOT achieved. #>  #> ************* Iteration 2  for all optimization methods*********************** #>  #> ******************************************* #> Running Adaptive Random Search Optimization #> ******************************************* #> Initial OFV = 0.000134267 #>  #> Total iterations: 2  #> Elapsed time: 0.007 seconds. #>  #> Final OFV =  0.0001342665  #> Parameters: 0.01  #>  #> ******************************************* #> Running BFGS Optimization #> ******************************************* #> initial  value 0.000134  #> final  value 0.000134  #> converged #>  #> ******************************************* #> Running Line Search Optimization #> ******************************************* #>  #>    Initial parameters: 0.01000001  #>    Initial OFV: 0.0001342667  #>  #>    Searching parameter 1  #>      Changed from 0.01 to 0.01 ; OFV = 0.000134267  #>  #>    Elapsed time: 0.008 seconds. #>  #>    Final OFV =  0.0001342665  #>    Parameters: 0.01  #>  #> ******************************************* #> Stopping criteria testing #> (Compare between start of iteration and end of iteration) #> ******************************************* #> Difference in OFV:  0 #> Relative difference in OFV:  0% #> Efficiency:  #>   (ofv_final / ofv_init) = 1 #>  #>  Efficiency stopping criteria:  #>   Is (1 >= 0.999)?   Yes. #>   Stopping criteria achieved. #>  #> Stopping criteria achieved. #>  #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 0.01 #>  #> OFV = 0.000134267 #>  #> Efficiency:  #>   (ofv_final / ofv_init) = 0.00014286 #>  #> Total running time: 0.336 seconds   if (FALSE) { # \\dontrun{      # RS+BFGS+LS optimization of sample times    # (longer run time than above but more likely to reach a maximum)   output <- poped_optim(poped.db,opt_xt=T,parallel = TRUE)      get_rse(output$FIM,output$poped.db)   plot_model_prediction(output$poped.db)      # optimization with only integer times allowed   poped.db.2 <- poped.db   poped.db.2$design_space$xt_space <- matrix(list(seq(1,120)),1,8)   output_2 <- poped_optim(poped.db.2,opt_xt=T,parallel = TRUE)    get_rse(output_2$FIM,output_2$poped.db)   plot_model_prediction(output_2$poped.db)      # Examine efficiency of sampling windows   plot_efficiency_of_windows(output_2$poped.db,xt_windows=0.5)   plot_efficiency_of_windows(output_2$poped.db,xt_windows=1)      # Adaptive Random Search (ARS, just a few samples here)   rs.output <- poped_optim(poped.db,opt_xt=T,method = \"ARS\",                            control = list(ARS=list(iter=5)))      get_rse(rs.output$FIM,rs.output$poped.db)      # line search, DOSE and sample time optimization   ls.output <- poped_optim(poped.db,opt_xt=T,opt_a=T,method = \"LS\",                            control = list(LS=list(line_length=5)))      # Adaptive random search,    # DOSE and sample time optimization   ars.output <- poped_optim(poped.db,opt_xt=T,opt_a=T,method = \"ARS\",                            control = list(ARS=list(iter=5)))      # BFGS gradient search from the stats::optim() function,    # DOSE and sample time optimization   bfgs.output <- poped_optim(poped.db,opt_xt=T,opt_a=T,method = \"BFGS\",                             control = list(BFGS=list(maxit=5)))         # genetic algorithm from the GA::ga() function,    # DOSE and sample time optimization   ga.output <- poped_optim(poped.db,opt_xt=T,opt_a=F,method = \"GA\",parallel=T)      # cost function with GA   # maximize   out_2 <- poped_optim(poped.db,opt_a =TRUE,                        ofv_fun=crit_fcn,                        parallel = T,                        method=c(\"GA\"))      # cost function with GA   # minimize   out_2 <- poped_optim(poped.db,opt_a =TRUE,                        ofv_fun=crit_fcn,                        parallel = T,                        method=c(\"GA\"),                        iter_max = 1,                        maximize = F,                        evaluate_fim = F)      # optimize distribution of individuals in 3 groups   poped_db_2 <- create.poped.database(     ff_fun=ff.PK.1.comp.oral.sd.CL,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),      notfixed_bpop=c(1,1,1,0),     d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(prop=0.01,add=0.25),     groupsize=32,     m=3,     xt=list(c( 0.5,1,2,6,8),c(36,72,120),             c(10,12,14,16,18,20,22,24)),     minxt=0.01,     maxxt=120,     a=c(DOSE=70),     mina=c(DOSE=0.01),     maxa=c(DOSE=100))      opt_xt_inds <-      poped_optim(poped_db_2,                 opt_a =TRUE,                 opt_inds = TRUE,                 control = list(ARS=list(iter=2),                                BFGS=list(maxit=2),                                LS=list(line_length=2)),                 iter_max = 1)            ##############   # E-family Optimization   ##############      # Adding 10% log-normal Uncertainty to fixed effects (not Favail)   bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1)   bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                            bpop_vals,                            ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value   bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0)   bpop_vals_ed_ln      ## -- Define initial design  and design space   poped.db <- create.poped.database(     ff_fun=ff.PK.1.comp.oral.sd.CL,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=bpop_vals_ed_ln,      notfixed_bpop=c(1,1,1,0),     d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(0.01,0.25),     groupsize=32,     xt=c( 0.5,1,2,6,24,36,72,120),     minxt=0,     maxxt=120,     a=70,     mina=0,     maxa=100)         # E_ln(D) optimization using Random search (just a few samples here)   output <- poped_optim(poped.db,opt_xt=TRUE,opt_a=TRUE,d_switch=0,                         method = c(\"ARS\",\"LS\"),                         control = list(ARS=list(iter=2),                                        LS=list(line_length=2)),                         iter_max = 1)   get_rse(output$FIM,output$poped.db)      # ED with laplace approximation,    # optimization using Random search (just a few iterations here)   ars.output <- poped_optim(poped.db,opt_xt=T,opt_a=T,method = \"ARS\",                             d_switch=0,use_laplace=TRUE,#laplace.fim=TRUE,                             parallel=T,                             control = list(ARS=list(iter=5)))    } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization main module for PopED Optimize the objective function. The function works for both discrete and continuous optimization variables. If more than one optimization method is specified then the methods are run in series. If loop_methods=TRUE then the series of optimization methods will be run for iter_max iterations, or until the efficiency of the design after the current series (compared to the start of the series) is less than stop_crit_eff. — poped_optim_1","title":"Optimization main module for PopED Optimize the objective function. The function works for both discrete and continuous optimization variables. If more than one optimization method is specified then the methods are run in series. If loop_methods=TRUE then the series of optimization methods will be run for iter_max iterations, or until the efficiency of the design after the current series (compared to the start of the series) is less than stop_crit_eff. — poped_optim_1","text":"function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization main module for PopED Optimize the objective function. The function works for both discrete and continuous optimization variables. If more than one optimization method is specified then the methods are run in series. If loop_methods=TRUE then the series of optimization methods will be run for iter_max iterations, or until the efficiency of the design after the current series (compared to the start of the series) is less than stop_crit_eff. — poped_optim_1","text":"","code":"poped_optim_1(   poped.db,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   method = c(\"ARS\", \"BFGS\", \"LS\"),   control = list(),   trace = TRUE,   fim.calc.type = poped.db$settings$iFIMCalculationType,   ofv_calc_type = poped.db$settings$ofv_calc_type,   approx_type = poped.db$settings$iApproximationMethod,   d_switch = poped.db$settings$d_switch,   ED_samp_size = poped.db$settings$ED_samp_size,   bLHS = poped.db$settings$bLHS,   use_laplace = poped.db$settings$iEDCalculationType,   out_file = \"\",   parallel = F,   parallel_type = NULL,   num_cores = NULL,   loop_methods = ifelse(length(method) > 1, TRUE, FALSE),   iter_max = 10,   stop_crit_eff = 1.001,   stop_crit_diff = NULL,   stop_crit_rel = NULL,   ofv_fun = poped.db$settings$ofv_fun,   maximize = T,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization main module for PopED Optimize the objective function. The function works for both discrete and continuous optimization variables. If more than one optimization method is specified then the methods are run in series. If loop_methods=TRUE then the series of optimization methods will be run for iter_max iterations, or until the efficiency of the design after the current series (compared to the start of the series) is less than stop_crit_eff. — poped_optim_1","text":"poped.db PopED database. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? method vector optimization methods use sequential fashion.  Options c(\"ARS\",\"BFGS\",\"LS\",\"GA\"). c(\"ARS\") Adaptive Random Search optim_ARS.  c(\"LS\") Line Search optim_LS. c(\"BFGS\") Method \"L-BFGS-B\" optim. c(\"GA\") genetic algorithm ga. control Contains control arguments method specified. trace algorithm output results intermittently. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) approx_type Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – use_laplace Laplace method used calculating expectation OFV? out_file Save output optimization file. parallel use parallel computations? parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. See start_parallel. num_cores number cores use parallelization.  default  set number  output parallel::detectCores(). See start_parallel. loop_methods optimization methods looped iter_max iterations, efficiency design current series (compared start series) less , equal , stop_crit_eff? iter_max line search used algorithm tests line search (always run end optimization iteration) changes design way.  , algorithm stops.  yes, new iteration run unless iter_max iterations already run. stop_crit_eff loop_methods==TRUE, looping stop efficiency design current series (compared start series) less , equal , stop_crit_eff (maximize==FALSE 1/stop_crit_eff cut efficiency must greater equal value stop looping). stop_crit_diff loop_methods==TRUE, looping stop difference criterion value design current series (compared start series) less , equal , stop_crit_diff (maximize==FALSE -stop_crit_diff cut difference criterion value must greater equal value stop looping). stop_crit_rel loop_methods==TRUE, looping stop relative difference criterion value design current series (compared start series) less , equal , stop_crit_rel (maximize==FALSE -stop_crit_rel cut relative difference criterion value must greater equal value stop looping). ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . maximize objective function maximized minimized? ... arguments passed functions.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimization main module for PopED Optimize the objective function. The function works for both discrete and continuous optimization variables. If more than one optimization method is specified then the methods are run in series. If loop_methods=TRUE then the series of optimization methods will be run for iter_max iterations, or until the efficiency of the design after the current series (compared to the start of the series) is less than stop_crit_eff. — poped_optim_1","text":"M. Foracchia, .C. Hooker, P. Vicini .   Ruggeri, \"PopED, software fir optimal experimental design population   kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J.   Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C.   Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models   optimal design tool\", Computer Methods Programs Biomedicine, 108,   2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization main module for PopED — poped_optim_2","title":"Optimization main module for PopED — poped_optim_2","text":"Optimize objective function. function works discrete continuous optimization variables. one optimization method specified methods run series.  loop_methods=TRUE series optimization methods run iter_max iterations, efficiency design current series (compared start series) less stop_crit_eff.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization main module for PopED — poped_optim_2","text":"","code":"poped_optim_2(   poped.db,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   method = c(\"ARS\", \"BFGS\", \"LS\"),   control = list(),   trace = TRUE,   fim.calc.type = poped.db$settings$iFIMCalculationType,   ofv_calc_type = poped.db$settings$ofv_calc_type,   approx_type = poped.db$settings$iApproximationMethod,   d_switch = poped.db$settings$d_switch,   ED_samp_size = poped.db$settings$ED_samp_size,   bLHS = poped.db$settings$bLHS,   use_laplace = poped.db$settings$iEDCalculationType,   out_file = \"\",   parallel = F,   parallel_type = NULL,   num_cores = NULL,   loop_methods = ifelse(length(method) > 1, TRUE, FALSE),   iter_max = 10,   stop_crit_eff = 1.001,   stop_crit_diff = NULL,   stop_crit_rel = NULL,   ofv_fun = poped.db$settings$ofv_fun,   maximize = T,   transform_parameters = F,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization main module for PopED — poped_optim_2","text":"poped.db PopED database. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? method vector optimization methods use sequential fashion.  Options c(\"ARS\",\"BFGS\",\"LS\",\"GA\"). c(\"ARS\") Adaptive Random Search optim_ARS.  c(\"LS\") Line Search optim_LS. c(\"BFGS\") Method \"L-BFGS-B\" optim. c(\"GA\") genetic algorithm ga. control Contains control arguments method specified. trace algorithm output results intermittently. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) approx_type Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – use_laplace Laplace method used calculating expectation OFV? out_file Save output optimization file. parallel use parallel computations? parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. See start_parallel. num_cores number cores use parallelization.  default  set number  output parallel::detectCores(). See start_parallel. loop_methods optimization methods looped iter_max iterations, efficiency design current series (compared start series) less , equal , stop_crit_eff? iter_max line search used algorithm tests line search (always run end optimization iteration) changes design way.  , algorithm stops.  yes, new iteration run unless iter_max iterations already run. stop_crit_eff loop_methods==TRUE, looping stop efficiency design current series (compared start series) less , equal , stop_crit_eff (maximize==FALSE 1/stop_crit_eff cut efficiency must greater equal value stop looping). stop_crit_diff loop_methods==TRUE, looping stop difference criterion value design current series (compared start series) less , equal , stop_crit_diff (maximize==FALSE -stop_crit_diff cut difference criterion value must greater equal value stop looping). stop_crit_rel loop_methods==TRUE, looping stop relative difference criterion value design current series (compared start series) less , equal , stop_crit_rel (maximize==FALSE -stop_crit_rel cut relative difference criterion value must greater equal value stop looping). ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . maximize objective function maximized minimized? transform_parameters transform parameters optimization? ... arguments passed functions.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimization main module for PopED — poped_optim_2","text":"function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimization main module for PopED — poped_optim_2","text":"M. Foracchia, .C. Hooker, P. Vicini .   Ruggeri, \"PopED, software fir optimal experimental design population   kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J.   Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C.   Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models   optimal design tool\", Computer Methods Programs Biomedicine, 108,   2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization main module for PopED — poped_optim_3","title":"Optimization main module for PopED — poped_optim_3","text":"Optimize objective function. function works discrete continuous optimization variables. one optimization method specified methods run series.  loop_methods=TRUE series optimization methods run iter_max iterations, efficiency design current series (compared start series) less stop_crit_eff.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization main module for PopED — poped_optim_3","text":"","code":"poped_optim_3(   poped.db,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   method = c(\"ARS\", \"BFGS\", \"LS\"),   control = list(),   trace = TRUE,   fim.calc.type = poped.db$settings$iFIMCalculationType,   ofv_calc_type = poped.db$settings$ofv_calc_type,   ds_index = poped.db$parameters$ds_index,   approx_type = poped.db$settings$iApproximationMethod,   d_switch = poped.db$settings$d_switch,   ED_samp_size = poped.db$settings$ED_samp_size,   bLHS = poped.db$settings$bLHS,   use_laplace = poped.db$settings$iEDCalculationType,   out_file = \"\",   parallel = F,   parallel_type = NULL,   num_cores = NULL,   loop_methods = ifelse(length(method) > 1, TRUE, FALSE),   iter_max = 10,   stop_crit_eff = 1.001,   stop_crit_diff = NULL,   stop_crit_rel = NULL,   ofv_fun = poped.db$settings$ofv_fun,   maximize = T,   allow_replicates = TRUE,   allow_replicates_xt = TRUE,   allow_replicates_a = TRUE,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization main module for PopED — poped_optim_3","text":"poped.db PopED database. opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? method vector optimization methods use sequential fashion.  Options c(\"ARS\",\"BFGS\",\"LS\",\"GA\"). c(\"ARS\") Adaptive Random Search optim_ARS.  c(\"LS\") Line Search optim_LS. c(\"BFGS\") Method \"L-BFGS-B\" optim. c(\"GA\") genetic algorithm ga. opt_inds=TRUE optimization always added end sequential optimization. control Contains control arguments specified method separately. trace algorithm output results intermittently. fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) ds_index Ds_index vector set 1 parameter uninteresting, otherwise 0. size=(1,num unfixed parameters). First unfixed bpop, unfixed d, unfixed docc last unfixed sigma. Default fixed effects important, everything else important.  Used conjunction ofv_calc_type=6. approx_type Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – use_laplace Laplace method used calculating expectation OFV? out_file Save output optimization file. parallel use parallel computations? parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. See start_parallel. num_cores number cores use parallelization.  default  set number  output parallel::detectCores(). See start_parallel. loop_methods optimization methods looped iter_max iterations, efficiency design current series (compared start series) less , equal , stop_crit_eff? iter_max line search used algorithm tests line search (always run end optimization iteration) changes design way.  , algorithm stops.  yes, new iteration run unless iter_max iterations already run. stop_crit_eff loop_methods==TRUE, looping stop efficiency design current series (compared start series) less , equal , stop_crit_eff (maximize==FALSE 1/stop_crit_eff cut efficiency must greater equal value stop looping). stop_crit_diff loop_methods==TRUE, looping stop difference criterion value design current series (compared start series) less , equal , stop_crit_diff (maximize==FALSE -stop_crit_diff cut difference criterion value must greater equal value stop looping). stop_crit_rel loop_methods==TRUE, looping stop relative difference criterion value design current series (compared start series) less , equal , stop_crit_rel (maximize==FALSE -stop_crit_rel cut relative difference criterion value must greater equal value stop looping). ofv_fun User defined function used compute objective function. function must poped database object first argument \"...\" argument list.  Can referenced function file name function defined file name file. e.g. \"cost.txt\" function named \"cost\" . maximize objective function maximized minimized? allow_replicates algorithm allow parameters value? ... arguments passed functions.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimization main module for PopED — poped_optim_3","text":"function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optim_3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimization main module for PopED — poped_optim_3","text":"M. Foracchia, .C. Hooker, P. Vicini .   Ruggeri, \"PopED, software fir optimal experimental design population   kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J.   Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C.   Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models   optimal design tool\", Computer Methods Programs Biomedicine, 108,   2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Retired optimization module for PopED — poped_optimize","title":"Retired optimization module for PopED — poped_optimize","text":"function older version poped_optim.  Please use poped_optim unless specific reason use function instead.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retired optimization module for PopED — poped_optimize","text":"","code":"poped_optimize(   poped.db,   ni = NULL,   xt = NULL,   model_switch = NULL,   x = NULL,   a = NULL,   bpop = NULL,   d = NULL,   maxxt = NULL,   minxt = NULL,   maxa = NULL,   mina = NULL,   fmf = 0,   dmf = 0,   trflag = TRUE,   opt_xt = poped.db$settings$optsw[2],   opt_a = poped.db$settings$optsw[4],   opt_x = poped.db$settings$optsw[3],   opt_samps = poped.db$settings$optsw[1],   opt_inds = poped.db$settings$optsw[5],   cfaxt = poped.db$settings$cfaxt,   cfaa = poped.db$settings$cfaa,   rsit = poped.db$settings$rsit,   rsit_output = poped.db$settings$rsit_output,   fim.calc.type = poped.db$settings$iFIMCalculationType,   ofv_calc_type = poped.db$settings$ofv_calc_type,   approx_type = poped.db$settings$iApproximationMethod,   bUseExchangeAlgorithm = poped.db$settings$bUseExchangeAlgorithm,   iter = 1,   d_switch = poped.db$settings$d_switch,   ED_samp_size = poped.db$settings$ED_samp_size,   bLHS = poped.db$settings$bLHS,   use_laplace = poped.db$settings$iEDCalculationType,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retired optimization module for PopED — poped_optimize","text":"poped.db PopED database. ni vector number samples group. xt matrix sample times.  row vector sample times group. model_switch matrix size xt, specifying model sample belongs . x matrix discrete design variables.  row group. matrix covariates.  row group. bpop Matrix defining fixed effects, per row (row number = parameter_number) : column 1 type distribution E-family designs (0 = Fixed, 1 = Normal, 2 = Uniform,  3 = User Defined Distribution, 4 = lognormal 5 = truncated normal) column 2  defines mean. column 3 defines variance distribution (length uniform distribution). Can also just supply parameter values vector c() uncertainty around parameter value used. parameter order  'bpop' defined 'fg_fun' 'fg_file'. use named arguments 'bpop' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. d Matrix defining diagonals IIV (logic fixed effects matrix bpop define uncertainty). One can also just supply parameter values c(). parameter order 'd' defined 'fg_fun' 'fg_file'. use named arguments 'd' order vector can rearranged match 'fg_fun' 'fg_file'. See `reorder_parameter_vectors`. maxxt Matrix single value defining maximum value xt sample.  single value supplied xt values given maximum value. minxt Matrix single value defining minimum value xt sample.  single value supplied xt values given minimum value maxa Vector defining max value covariate. single value supplied values given max value mina Vector defining min value covariate. single value supplied values given max value fmf initial value FIM. set zero computed. dmf initial OFV. set zero computed. trflag optimization output screen file? opt_xt sample times optimized? opt_a continuous design variables optimized? opt_x discrete design variables optimized? opt_samps number sample times per group optimized? opt_inds number individuals per group optimized? cfaxt First step factor sample times cfaa Stochastic Gradient search first step factor covariates rsit Number Random search iterations rsit_output Number iterations random search screen output fim.calc.type method used calculating FIM. Potential values: 0 = Full FIM.  assumption fixed random effects uncorrelated. 1 = Reduced FIM. Assume correlation FIM fixed random effects, set elements FIM zero. 2 = weighted models (placeholder). 3 = currently used. 4 = Reduced FIM computing derivatives respect standard deviation residual unexplained variation (sqrt(SIGMA) NONMEM). matches done PFIM, assumes standard deviation residual unexplained variation estimated parameter (NOTE: NONMEM estimates variance residual unexplained variation default). 5 = Full FIM parameterized ,B,C matrices & derivative variance. 6 = Calculate one model switch time, good large matrices. 7 = Reduced FIM parameterized ,B,C matrices & derivative variance. ofv_calc_type OFV calculation type FIM 1 = \"D-optimality\". Determinant FIM: det(FIM) 2 = \"-optimality\".  Inverse sum expected parameter variances: 1/trace_matrix(inv(FIM)) 4 = \"lnD-optimality\".  Natural logarithm determinant FIM: log(det(FIM)) 6 = \"Ds-optimality\". Ratio Determinant FIM Determinant uninteresting rows columns FIM: det(FIM)/det(FIM_u) 7 = Inverse sum expected parameter RSE: 1/sum(get_rse(FIM,poped.db,use_percent=FALSE)) approx_type Approximation method model, 0=FO, 1=FOCE, 2=FOCEI, 3=FOI. bUseExchangeAlgorithm Use Exchange algorithm (1=TRUE, 0=FALSE) iter number iterations entered blockheader_2 function. d_switch ******START CRITERION SPECIFICATION OPTIONS********** D-family design (1) ED-family design (0) (without parameter uncertainty) ED_samp_size Sample size E-family sampling bLHS sample distributions E-family calculations. 0=Random Sampling, 1=LatinHyperCube – use_laplace Laplace method used calculating expectation OFV? ... arguments passed functions. See Doptim.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optimize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retired optimization module for PopED — poped_optimize","text":"function optimized objective function. function works discrete continuous optimization variables. function takes information PopED database supplied argument. PopED database supplies information model, parameters, design methods use. arguments coming PopED database can overwritten; supplied used instead arguments PopED database.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optimize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retired optimization module for PopED — poped_optimize","text":"M. Foracchia, .C. Hooker, P. Vicini . Ruggeri, \"PopED, software fir optimal experimental design population kinetics\", Computer Methods Programs Biomedicine, 74, 2004. J. Nyberg, S. Ueckert, E.. Stroemberg, S. Hennig, M.O. Karlsson .C. Hooker, \"PopED: extended, parallelized, nonlinear mixed effects models optimal design tool\", Computer Methods Programs Biomedicine, 108, 2012.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/poped_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retired optimization module for PopED — poped_optimize","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################   ############## # D-family Optimization ##############  # below are a number of ways to optimize the problem  # RS+SG+LS optimization of DOSE and sample times # optimization with just a few iterations # only to check that things are working out_1 <- poped_optimize(poped.db,opt_a=TRUE,opt_xt=TRUE,                          rsit=2,sgit=2,ls_step_size=2,                           iter_max=1,out_file = \"\") #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 55.3964 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Sampling Schedule #> * Optimize Covariates #>  #> ******************************* #> Initial Value #>  OFV(mf) = 55.3964 #> ******************************* #>  #> RS - It. : 2   OFV : 55.3964 #>  #> ******************************* #> RS Results #>  OFV(mf) = 55.3964 #>  #> Optimized Sampling Schedule #> Group 1:    0.5      1      2      6     24     36     72    120 #>  #> Optimized Covariates: #> Group 1: 70 #>  #> ********************************* #>  #> Run time for random search: 0.013 seconds #>  #> SG - It. : 1  OFV : 55.45   Diff. :     1 #> SG - It. : 2  OFV : 55.61   Diff. : 0.002799 #>  #> SG - Iteration 2 --------- FINAL ------------------------- #> Normalized gradient: Grad_xt(OFV)/OFV #> -0.00262405729196299 #>  -0.000132025609212243 #>  0.0049562882696737 #>  -0.000109893316026729 #>  -0.000341253164434824 #>  2.72645074812749e-05 #>  0.000160461661950708 #>  3.06020481312946e-05 #> xt opt: #> 0.210318514650852 #>  0.950298514650852 #>  2.28968148534915 #>  5.71031851465085 #>  23.7103185146509 #>  36.2896814853491 #>  72.2896814853491 #>  120 #> Normalized gradient: Grad_a(OFV)/OFV #> 6.312896e-04 #> aopt: #> 7.024140e+01 #> OFV(mf)    : 55.6095 #> diff       : 0.00279928 #> ************************************************************* #> Stochastic gradient run time: 0.339 seconds #>  #> ***************************** #>             Line Search #>  #> Searching xt2 on group 1 #> Searching xt4 on group 1 #> Searching xt1 on group 1 #> group 1 -- xt[1] changed from  0.210319 to  0.01 #>      OFV(MF) changed from 55.6095 to 55.8352  #> group 1 -- xt[1] changed from  0.01 to  120 #>      OFV(MF) changed from 55.8352 to 55.8915  #> Searching xt6 on group 1 #> group 1 -- xt[6] changed from  36.2897 to  0.01 #>      OFV(MF) changed from 55.8915 to 55.9642  #> group 1 -- xt[6] changed from  0.01 to  120 #>      OFV(MF) changed from 55.9642 to 56.0271  #> Searching xt3 on group 1 #> Searching xt7 on group 1 #> group 1 -- xt[7] changed from  72.2897 to  120 #>      OFV(MF) changed from 56.0271 to 56.0561  #> Searching xt5 on group 1 #> Searching xt8 on group 1 #>     OFV(MF): 56.0561 #>  #> Best value for OFV(MF) = 56.0561 #>  #> Best value for xt: #> Group 1: 0.9503   2.29   5.71  23.71    120    120    120    120 #>  #> Searching a1 on individual/group 1 #> group 1 -- a[1] changed from  70.2414 to  100 #>      OFV(MF) changed from 56.0561 to 56.8149  #>     OFV(MF): 56.8149 #> Best value for OFV(MF) = 56.8149 #>  #> Best value for a:  #> Group 1: 100 [0.01,100] #>  #>  #> Line search run time: 0.187 seconds #> *************************** #>  #> =============================================================================== #> FINAL RESULTS #> Optimized Sampling Schedule #> Group 1: 0.9503   2.29   5.71  23.71    120    120    120    120 #>  #> Optimized Covariates: #> Group 1: 100 #>  #> OFV = 56.8149 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.194 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07       0     0 #>          d_V     0.02      37    34 #>         d_KA      0.6       0     0 #>     sig_prop     0.01      32    24 #>      sig_add     0.25      26    16 #>  #> Total running time: 0.541 seconds  if (FALSE) { # \\dontrun{      # RS+SG+LS optimization of sample times    # (longer run time than above but more likely to reach a maximum)   output <- poped_optimize(poped.db,opt_xt=T)   get_rse(output$fmf,output$poped.db)   plot_model_prediction(output$poped.db)      # MFEA optimization with only integer times allowed   mfea.output <- poped_optimize(poped.db,opt_xt=1,                                 bUseExchangeAlgorithm=1,                                 EAStepSize=1)   get_rse(mfea.output$fmf,mfea.output$poped.db)   plot_model_prediction(mfea.output$poped.db)      # Examine efficiency of sampling windows   plot_efficiency_of_windows(mfea.output$poped.db,xt_windows=0.5)   plot_efficiency_of_windows(mfea.output$poped.db,xt_windows=1)      # Random search (just a few samples here)   rs.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,rsit=20,                               bUseRandomSearch= 1,                               bUseStochasticGradient = 0,                               bUseBFGSMinimizer = 0,                               bUseLineSearch = 0)   get_rse(rs.output$fmf,rs.output$poped.db)      # line search, DOSE and sample time optimization   ls.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                               bUseRandomSearch= 0,                               bUseStochasticGradient = 0,                               bUseBFGSMinimizer = 0,                               bUseLineSearch = 1,                               ls_step_size=10)      # Stochastic gradient search, DOSE and sample time optimization   sg.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                                bUseRandomSearch= 0,                               bUseStochasticGradient = 1,                               bUseBFGSMinimizer = 0,                               bUseLineSearch = 0,                               sgit=20)      # BFGS search, DOSE and sample time optimization   bfgs.output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,                                 bUseRandomSearch= 0,                                 bUseStochasticGradient = 0,                                 bUseBFGSMinimizer = 1,                                 bUseLineSearch = 0)      ##############   # E-family Optimization   ##############      # Adding 10% log-normal Uncertainty to fixed effects (not Favail)   bpop_vals <- c(CL=0.15, V=8, KA=1.0, Favail=1)   bpop_vals_ed_ln <- cbind(ones(length(bpop_vals),1)*4, # log-normal distribution                            bpop_vals,                            ones(length(bpop_vals),1)*(bpop_vals*0.1)^2) # 10% of bpop value   bpop_vals_ed_ln[\"Favail\",]  <- c(0,1,0)   bpop_vals_ed_ln      ## -- Define initial design  and design space   poped.db <- create.poped.database(     ff_fun=ff.PK.1.comp.oral.sd.CL,     fg_fun=sfg,     fError_fun=feps.add.prop,     bpop=bpop_vals_ed_ln,      notfixed_bpop=c(1,1,1,0),     d=c(CL=0.07, V=0.02, KA=0.6),      sigma=c(0.01,0.25),     groupsize=32,     xt=c( 0.5,1,2,6,24,36,72,120),     minxt=0,     maxxt=120,     a=70,     mina=0,     maxa=100)      # ED optimization using Random search (just a few samples here)   output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,rsit=10,d_switch=0)   get_rse(output$fmf,output$poped.db)      # ED with laplace approximation,    # optimization using Random search (just a few samples here)   output <- poped_optimize(poped.db,opt_xt=1,opt_a=1,rsit=10,                            d_switch=0,use_laplace=TRUE,laplace.fim=TRUE)   get_rse(output$fmf,output$poped.db)       } # }"},{"path":"https://andrewhooker.github.io/PopED/reference/rand.html","id":null,"dir":"Reference","previous_headings":"","what":"Function written to match MATLAB's rand function — rand","title":"Function written to match MATLAB's rand function — rand","text":"Generate random samples uniform distribution [0,1] return matrix form","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/rand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function written to match MATLAB's rand function — rand","text":"","code":"rand(dim1, dim2 = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/rand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function written to match MATLAB's rand function — rand","text":"dim1 dimension matrix (square), otherwise number rows. dim2 number columns, different number rows.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/rand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function written to match MATLAB's rand function — rand","text":"Matrix random generated samples.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/rand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function written to match MATLAB's rand function — rand","text":"","code":"rand(2,3) #>            [,1]      [,2]      [,3] #> [1,] 0.78562035 0.3140058 0.8876423 #> [2,] 0.01472684 0.9888032 0.8638064  rand(5) #>            [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.69633302 0.6753241 0.6039208 0.57017268 0.9722578 #> [2,] 0.55576633 0.6834282 0.6109661 0.71155293 0.8258911 #> [3,] 0.50001558 0.9068502 0.4766922 0.06932691 0.5327581 #> [4,] 0.02953794 0.1530525 0.9027106 0.10538600 0.9491165 #> [5,] 0.17232315 0.6742126 0.6682546 0.28168070 0.9006530"},{"path":"https://andrewhooker.github.io/PopED/reference/randn.html","id":null,"dir":"Reference","previous_headings":"","what":"Function written to match MATLAB's randn function — randn","title":"Function written to match MATLAB's randn function — randn","text":"Generate random samples standardized normal distribution return matrix form.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/randn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function written to match MATLAB's randn function — randn","text":"","code":"randn(dim1, dim2 = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/randn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function written to match MATLAB's randn function — randn","text":"dim1 dimension matrix (square), otherwise number rows. dim2 number columns, different number rows.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/randn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function written to match MATLAB's randn function — randn","text":"Matrix random generated samples.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/randn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function written to match MATLAB's randn function — randn","text":"","code":"randn(2,3) #>            [,1]      [,2]       [,3] #> [1,] -0.1056558  1.613284  0.6253141 #> [2,]  1.4898955 -1.623811 -0.7983959  randn(5) #>             [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] -2.00454302 -0.8669026  2.2927026 -0.2468592 -0.8973077 #> [2,]  1.41783276  1.8538769 -1.9795730 -1.0357461 -0.4940153 #> [3,]  1.21293195  0.9119217  0.9319057 -1.1906234  1.3887291 #> [4,]  0.99323055 -0.7318803  0.3306204 -1.3221883  1.7442997 #> [5,] -0.04224099 -0.2358161  0.9562781  0.3576470  0.2759333"},{"path":"https://andrewhooker.github.io/PopED/reference/shrinkage.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","title":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","text":"Predict shrinkage empirical Bayes estimates (EBEs) population model","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/shrinkage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","text":"","code":"shrinkage(poped.db, use_mc = FALSE, num_sim_ids = 1000, use_purrr = FALSE)"},{"path":"https://andrewhooker.github.io/PopED/reference/shrinkage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","text":"poped.db PopED database use_mc calculation based monte-carlo simulations. first order approximation used num_sim_ids use_mc=TRUE, many individuals simulated make computations. use_purrr use_mc=TRUE method use package purrr calculations?  may speed computations (potentially).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/shrinkage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","text":"shrinkage computed variance units, standard deviation units   relative standard errors EBEs.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/shrinkage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","text":"Combes, F. P., Retout, S.,   Frey, N., & Mentre, F. (2013). Prediction shrinkage individual   parameters using Bayesian information matrix non-linear mixed effect   models evaluation pharmacokinetics. Pharmaceutical Research, 30(9),   2355-67. doi:10.1007/s11095-013-1079-3 . Hennig, S., Nyberg, J., Fanta, S., Backman, J.   T., Hoppu, K., Hooker, . C., & Karlsson, M. O. (2012). Application   optimal design approach improve pretransplant drug dose finding design   ciclosporin. Journal Clinical Pharmacology, 52(3), 347-360.   doi:10.1177/0091270010397731 .","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/shrinkage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict shrinkage of empirical Bayes estimates (EBEs) in a population model — shrinkage","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin example) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define model, parameters, initial design poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   a=c(DOSE=70))  ############# END ################### ## Create PopED database ## (warfarin example) #####################################  shrinkage(poped.db) #> # A tibble: 3 × 5 #>     d_CL    d_V   d_KA type       group #>    <dbl>  <dbl>  <dbl> <chr>      <chr> #> 1 0.0244 0.174  0.0301 shrink_var grp_1 #> 2 0.0123 0.0910 0.0152 shrink_sd  grp_1 #> 3 0.0413 0.0590 0.134  se         grp_1"},{"path":"https://andrewhooker.github.io/PopED/reference/size.html","id":null,"dir":"Reference","previous_headings":"","what":"Function written to match MATLAB's size function — size","title":"Function written to match MATLAB's size function — size","text":"Function written match MATLAB's size function","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function written to match MATLAB's size function — size","text":"","code":"size(obj, dimension.index = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function written to match MATLAB's size function — size","text":"obj object want know various dimensions .  Typically matrix. dimension.index dimension interested .","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function written to match MATLAB's size function — size","text":"dimensions object specific dimension interested .","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function written to match MATLAB's size function — size","text":"","code":"size(c(2,3,4,5,6)) #> [1] 1 5  size(10) #> [1] 1 1  size(zeros(4,7)) #> [1] 4 7"},{"path":"https://andrewhooker.github.io/PopED/reference/start_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Start parallel computational processes — start_parallel","title":"Start parallel computational processes — start_parallel","text":"tool chooses type parallelization process use based computer OS used.  windows default \"snow\" Linux-like systems default \"multicore\"","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/start_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start parallel computational processes — start_parallel","text":"","code":"start_parallel(   parallel = TRUE,   num_cores = NULL,   parallel_type = NULL,   seed = NULL,   dlls = NULL,   mrgsolve_model = NULL,   ... )"},{"path":"https://andrewhooker.github.io/PopED/reference/start_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start parallel computational processes — start_parallel","text":"parallel parallel functionality start ? num_cores many cores use.  Default parallel::detectCores()-1 . See detectCores information. parallel_type type parallelization used? Can \"snow\" \"multicore\".  \"snow\"  works Linux-like systems & Windows. \"multicore\" works Linux-like systems.  default chosen depending operating system. seed random seed use. dlls computations require compiled code (DLL's) using \"snow\" method need specify name DLL's without extension text vector c(\"this_file\",\"that_file\"). mrgsolve_model computations require mrgsolve model using \"snow\" method\" need specify name model object created mread mcode ... Arguments passed makeCluster","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/start_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start parallel computational processes — start_parallel","text":"atomic vector (TRUE FALSE) two attributes: \"type\" \"cores\".","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/summary.poped_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a summary of output from poped_optim — summary.poped_optim","title":"Display a summary of output from poped_optim — summary.poped_optim","text":"Display summary output poped_optim","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/summary.poped_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a summary of output from poped_optim — summary.poped_optim","text":"","code":"# S3 method for class 'poped_optim' summary(object, ...)"},{"path":"https://andrewhooker.github.io/PopED/reference/summary.poped_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a summary of output from poped_optim — summary.poped_optim","text":"object object returned poped_optim summarize. ... Additional arguments. Passed blockfinal.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/summary.poped_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a summary of output from poped_optim — summary.poped_optim","text":"","code":"library(PopED)  ############# START ################# ## Create PopED database ## (warfarin model for optimization) #####################################  ## Warfarin example from software comparison in: ## Nyberg et al., \"Methods and software tools for design evaluation  ##   for population pharmacokinetics-pharmacodynamics studies\",  ##   Br. J. Clin. Pharm., 2014.   ## Optimization using an additive + proportional reidual error   ## to avoid sample times at very low concentrations (time 0 or very late samples).  ## find the parameters that are needed to define from the structural model ff.PK.1.comp.oral.sd.CL #> function (model_switch, xt, parameters, poped.db)  #> { #>     with(as.list(parameters), { #>         y = xt #>         y = (DOSE * Favail * KA/(V * (KA - CL/V))) * (exp(-CL/V *  #>             xt) - exp(-KA * xt)) #>         return(list(y = y, poped.db = poped.db)) #>     }) #> } #> <bytecode: 0x55c05a078048> #> <environment: namespace:PopED>  ## -- parameter definition function  ## -- names match parameters in function ff sfg <- function(x,a,bpop,b,bocc){   parameters=c(CL=bpop[1]*exp(b[1]),                V=bpop[2]*exp(b[2]),                KA=bpop[3]*exp(b[3]),                Favail=bpop[4],                DOSE=a[1])   return(parameters)  }  ## -- Define initial design  and design space poped.db <- create.poped.database(ff_fun=ff.PK.1.comp.oral.sd.CL,                                   fg_fun=sfg,                                   fError_fun=feps.add.prop,                                   bpop=c(CL=0.15, V=8, KA=1.0, Favail=1),                                    notfixed_bpop=c(1,1,1,0),                                   d=c(CL=0.07, V=0.02, KA=0.6),                                    sigma=c(prop=0.01,add=0.25),                                   groupsize=32,                                   xt=c( 0.5,1,2,6,24,36,72,120),                                   minxt=0.01,                                   maxxt=120,                                   a=c(DOSE=70),                                   mina=c(DOSE=0.01),                                   maxa=c(DOSE=100))  ############# END ################### ## Create PopED database ## (warfarin model for optimization) #####################################  ############## # D-family Optimization ##############   # ARS+BFGS+LS optimization of dose # optimization with just a few iterations # only to check that things are working out_1 <- poped_optim(poped.db,opt_a =TRUE,                       control = list(ARS=list(iter=2),                                      BFGS=list(maxit=2),                                      LS=list(line_length=2)),                       iter_max = 1) #> =============================================================================== #> Initial design evaluation #>  #> Initial OFV = 55.3964 #>  #> Initial design #> expected relative standard error #> (%RSE, rounded to nearest integer) #>    Parameter   Values   RSE_0 #>           CL     0.15       5 #>            V        8       3 #>           KA        1      14 #>         d_CL     0.07      30 #>          d_V     0.02      37 #>         d_KA      0.6      27 #>     sig_prop     0.01      32 #>      sig_add     0.25      26 #>  #> ============================================================================== #> Optimization of design parameters #>  #> * Optimize Covariates #>  #> ************* Iteration 1  for all optimization methods*********************** #>  #> ******************************************* #> Running Adaptive Random Search Optimization #> ******************************************* #> Initial OFV = 55.3964 #>  #> Total iterations: 2  #> Elapsed time: 0.019 seconds. #>  #> Final OFV =  56.01888  #> Parameters: 98.84467  #>  #> ******************************************* #> Running BFGS Optimization #> ******************************************* #> initial  value -56.018883  #> final  value -56.019059  #> stopped after 2 iterations #>  #> ******************************************* #> Running Line Search Optimization #> ******************************************* #>  #>    Initial parameters: 98.85978  #>    Initial OFV: 56.01906  #>  #>    Searching parameter 1  #>      Changed from 98.8598 to 100 ; OFV = 56.032  #>  #>    Elapsed time: 0.02 seconds. #>  #>    Final OFV =  56.03204  #>    Parameters: 100  #>  #> ******************************************* #> Stopping criteria testing #> (Compare between start of iteration and end of iteration) #> ******************************************* #> Difference in OFV:  0.636 #> Relative difference in OFV:  1.15% #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.0827 #>  #>  Efficiency stopping criteria:  #>   Is (1.0827 <= 1.001)?   No. #>   Stopping criteria NOT achieved. #>  #> Stopping criteria NOT achieved. #>  #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 100 #>  #> OFV = 56.032 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.0827 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07      30    28 #>          d_V     0.02      37    34 #>         d_KA      0.6      27    26 #>     sig_prop     0.01      32    23 #>      sig_add     0.25      26    30 #>  #> Total running time: 0.232 seconds   summary(out_1) #> =============================================================================== #> FINAL RESULTS #>  #> Optimized Covariates: #> Group 1: 100 #>  #> OFV = 56.032 #>  #> Efficiency:  #>   ((exp(ofv_final) / exp(ofv_init))^(1/n_parameters)) = 1.0827 #>  #> Expected relative standard error #> (%RSE, rounded to nearest integer): #>    Parameter   Values   RSE_0   RSE #>           CL     0.15       5     5 #>            V        8       3     3 #>           KA        1      14    14 #>         d_CL     0.07      30    28 #>          d_V     0.02      37    34 #>         d_KA      0.6      27    26 #>     sig_prop     0.01      32    23 #>      sig_add     0.25      26    30 #>  #> Total running time: 0.232 seconds"},{"path":"https://andrewhooker.github.io/PopED/reference/test_mat_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Test to make sure that matricies are the right size — test_mat_size","title":"Test to make sure that matricies are the right size — test_mat_size","text":"Test make sure matricies right size","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/test_mat_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test to make sure that matricies are the right size — test_mat_size","text":"","code":"test_mat_size(correct_size, mat, name)"},{"path":"https://andrewhooker.github.io/PopED/reference/test_mat_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test to make sure that matricies are the right size — test_mat_size","text":"correct_size correct size matrix mat matrix test. name name matrix string.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/test_mat_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test to make sure that matricies are the right size — test_mat_size","text":"","code":"test_mat_size(c(2,3),zeros(2,3),\"foo\") #> [1] 1  if (FALSE) { # \\dontrun{   test_mat_size(c(2,3),zeros(2,6),\"foo\") } # }  test_mat_size(c(1,3),c(2,6,7),\"foo\") #> [1] 1"},{"path":"https://andrewhooker.github.io/PopED/reference/tic.html","id":null,"dir":"Reference","previous_headings":"","what":"Timer function (as in MATLAB) — tic","title":"Timer function (as in MATLAB) — tic","text":"Function start timer.  Stop toc().","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/tic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timer function (as in MATLAB) — tic","text":"","code":"tic(gcFirst = FALSE, name = \".poped_savedTime\")"},{"path":"https://andrewhooker.github.io/PopED/reference/tic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timer function (as in MATLAB) — tic","text":"gcFirst Perform garbage collection? name saved name time object.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/tic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Timer function (as in MATLAB) — tic","text":"modified version function matlab R-package.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/tic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Timer function (as in MATLAB) — tic","text":"","code":"tic() toc() #> Elapsed time: 0.001 seconds.  tic(name=\"foo\") toc() #> Elapsed time: 0.002 seconds. tic() toc() #> Elapsed time: 0.001 seconds. toc() #> Elapsed time: 0.001 seconds. tic() toc(name=\"foo\") #> Elapsed time: 0.008 seconds."},{"path":"https://andrewhooker.github.io/PopED/reference/toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Timer function (as in MATLAB) — toc","title":"Timer function (as in MATLAB) — toc","text":"Function stop timer.  Start tic().","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timer function (as in MATLAB) — toc","text":"","code":"toc(echo = TRUE, name = \".poped_savedTime\")"},{"path":"https://andrewhooker.github.io/PopED/reference/toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timer function (as in MATLAB) — toc","text":"echo Print time screen? name saved name time object.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/toc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Timer function (as in MATLAB) — toc","text":"modified version function matlab R-package.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Timer function (as in MATLAB) — toc","text":"","code":"tic() toc() #> Elapsed time: 0 seconds.  tic(name=\"foo\") toc() #> Elapsed time: 0.001 seconds. tic() toc() #> Elapsed time: 0 seconds. toc() #> Elapsed time: 0 seconds. tic() toc(name=\"foo\") #> Elapsed time: 0.002 seconds."},{"path":"https://andrewhooker.github.io/PopED/reference/tryCatch.W.E.html","id":null,"dir":"Reference","previous_headings":"","what":"tryCatch both warnings (with value) and errors — tryCatch.W.E","title":"tryCatch both warnings (with value) and errors — tryCatch.W.E","text":"Catch ** save errors warnings, case warning, also keep computed result.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/tryCatch.W.E.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tryCatch both warnings (with value) and errors — tryCatch.W.E","text":"","code":"tryCatch.W.E(expr)"},{"path":"https://andrewhooker.github.io/PopED/reference/tryCatch.W.E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tryCatch both warnings (with value) and errors — tryCatch.W.E","text":"expr R expression evaluate","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/tryCatch.W.E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tryCatch both warnings (with value) and errors — tryCatch.W.E","text":"list 'value' 'warning',   'value' may error caught.","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/tryCatch.W.E.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tryCatch both warnings (with value) and errors — tryCatch.W.E","text":"Martin Maechler, R Core Team","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of zeros. — zeros","title":"Create a matrix of zeros. — zeros","text":"Create matrix zeros size (dim1 x dim2).","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of zeros. — zeros","text":"","code":"zeros(dim1, dim2 = NULL)"},{"path":"https://andrewhooker.github.io/PopED/reference/zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of zeros. — zeros","text":"dim1 dimension matrix (square) number rows. dim2 number columns","code":""},{"path":"https://andrewhooker.github.io/PopED/reference/zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix of zeros. — zeros","text":"matrix zeros.","code":""},{"path":[]},{"path":"https://andrewhooker.github.io/PopED/reference/zeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of zeros. — zeros","text":"","code":"zeros(3) #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    0    0    0 #> [3,]    0    0    0 zeros(0,3) #>      [,1] [,2] [,3] zeros(4,7) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    0    0    0    0    0    0    0 #> [2,]    0    0    0    0    0    0    0 #> [3,]    0    0    0    0    0    0    0 #> [4,]    0    0    0    0    0    0    0 zeros(1,4) #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    0"},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-070","dir":"Changelog","previous_headings":"","what":"PopED 0.7.0","title":"PopED 0.7.0","text":"create.poped.database() now uses better method identifying total number parameters type (bpop, d, sigma, etc.) user defined model parameter function (ff_fun argument create.poped.database()) (#73). create.poped.database() new option reorder_parameter_vectors, turned default. turned , use named arguments bpop d PopED try figure order parameters based found fg_fun. See resulting poped_db$parameters make sure order matches fg_fun. start_parallel() new default fornum_cores, now one less number cores available parallel::detectCores(). model_prediction() therefore plot_model_prediction() allow log-normal distributions using PI option. makes sense expect prediction interval model approximately log-normally distributed, might often case pop PK models. new default now PI_ln_dist = TRUE. poped_optim() now explicit argument allowing specification Ds-optimal parameters interest. option ds_index. Minor bug fixes","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-060","dir":"Changelog","previous_headings":"","what":"PopED 0.6.0","title":"PopED 0.6.0","text":"CRAN release: 2021-05-21 Added options allow_replicates=TRUE/FALSE, allow_replicates_xt=TRUE/FALSE allow_replicates_a=TRUE/FALSE poped_optim. allows optimization algorithm avoid replicates () design components. Currently works discrete variable optimization. Future versions also handle continuous optimization. Exported function computation Bayesian Fisher information matrix individual parameters population model based Maximum Posteriori (MAP) estimation empirical Bayes estimates (EBEs) population model. See ?evaluate_fim_map details. Allowing covariates function automatically builds PopED parameter function model function (?build_sfg). Updates documentation package testing. Minor bug fixes.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-050","dir":"Changelog","previous_headings":"","what":"PopED 0.5.0","title":"PopED 0.5.0","text":"CRAN release: 2020-06-13 Added ability incorporate limit quantification information FIM calculations (upper lower limits). See new vignette webpage https://andrewhooker.github.io/PopED/articles/handling_loq.html Adding functionality optimize groupsize total size study. See ?optimize_groupsize, `?optimize_n_eff ?optimize_n_rse. also implemented poped_optim opt_inds=T argument. Updating Vignettes, including new one using tools use simulators design computations. See https://andrewhooker.github.io/PopED/articles/model_def_other_pkgs.html Simplify RxODE syntax vingette (#47, @mattfidler). Added ability predict plot model prediction intervals computing expected variance (using FO approximation) computing prediction interval based assumption normality. See ?model_prediciton ?plot_model_prediction. computation faster less accurate compared using DV=TRUE (groupsize_sim = 500) two functions. Named parameters now passed calculations FIM RSE output readable parameter names instead default names. Allow parallel computation plot_efficiency_of_windows (#50). Make parallelization work mrgsolve windows (#37, #45, #46, #51, @Vincent-AC). Updated function automatic building parameter model function (see build_sfg). Simplify derivative calculations (#34, @martin-gmx). Allow simulating model_switch > 1 models. Change defult Ds calculation log scale. Updated website https://andrewhooker.github.io/PopED Remove options discontinued dplyr commands rbind_all rbind_list. Minor bug fixes shrinkage calculations (#44, #39, @martin-gmx).","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-040","dir":"Changelog","previous_headings":"","what":"PopED 0.4.0","title":"PopED 0.4.0","text":"CRAN release: 2018-09-10 New improved vignettes (#30, @giulialestini)! Added power evaluation script test power design identify parameter different assumed value. function also calculates number individuals needed design specific power. See ?evaluate_power information (#26, @martin-gmx). Added function compute expected shrinkage design. See ?shrinkage information. Updated added new example scripts system.file(\"examples\", package=\"PopED\") (). includes example describing handle covariate distributions optimal design, example incorporate IOV, example handle shrinkage, example full covariance matrix example prior FIM (#30, @giulialestini @martin-gmx). Major overhaul optimization methods used poped_optim() generic optimization routines like optim() can easily used optimizing PopED designs. Update speed FIM calculations (#20, @martin-gmx). Update RSE calculations prior FIM handled correctly (#22, @martin-gmx). Simplified code removed duplicated code (#21, #24 #32, @martin-gmx). New ways handling inverting matricies, faster work better matricies ill-conditioned. See ?inv information (#19, @martin-gmx). Updated functionality IOV calculations. Updates optim_ARS() stop search. Extended functionality plot_model_prediction() (#23, @martin-gmx). Bug fixing. See https://github.com/andrewhooker/PopED/commits/master information.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-032","dir":"Changelog","previous_headings":"","what":"PopED 0.3.2","title":"PopED 0.3.2","text":"CRAN release: 2016-12-12 Exported summary method results poped_optim PopED NAMESPACE, method can actually used! Just use summary(output). Fixed old bugs used return varible functions, la MATLAB.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-031","dir":"Changelog","previous_headings":"","what":"PopED 0.3.1","title":"PopED 0.3.1","text":"CRAN release: 2016-10-19 Added vignette introduce PopED! Improved optimization poped_optim, plus example scripts now running poped_optim. Update easily allow discrete optimization xt variables. See example scripts. Added summary method results poped_optim. Just use summary(output). changed handling seed numbers optimizations. robust handling non-population models natural handling NA values design vectors NAMESPACE: removed ggplot2 “Depends” added “Imports” Added mean line efficiency plots. Update computation error handling Laplace approximation ED objective function. Added intuitive cost function input. See examples ?poped_optim Various small changes bug fixes.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-030","dir":"Changelog","previous_headings":"","what":"PopED 0.3.0","title":"PopED 0.3.0","text":"CRAN release: 2015-12-29 Added new optimization methods tools, see ?poped_optim(). function incorporates new optimization routines optim_ARS() optim_LS optimized versions previous optimization algorithms used PopED. can run parallelization. poped_optim() also incorporates genetic algorithm GA::ga(), can also run parallelization, “L-BFGS-B” method stats::optim(). poped_optim() efficient faster poped_optimize(). Changed default objective function log determinant FIM. create.poped.database(ofv_calc_type=4) Various small changes bug fixes.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-020","dir":"Changelog","previous_headings":"","what":"PopED 0.2.0","title":"PopED 0.2.0","text":"CRAN release: 2015-03-20 Fixed plot_efficiency_of_windows() bug wrong headers subplot. Fixed bug plot_model_prediction() plot optimized design, instead initial design Reorganized database created create.poped.database(). output function now list 5 sub-lists: design, design_space, model, parameters settings. Also removed duplicate entries database easier manipulation. cause back compatibility issues referring elements database. Added example 10 describing PKPD design hepatitis C virus (HCV) kinetics system.file(\"examples\",package=\"PopED\") directory PopED installation.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-012","dir":"Changelog","previous_headings":"","what":"PopED 0.1.2","title":"PopED 0.1.2","text":"CRAN release: 2014-11-19 Updated model_prediction() allow creation NONMEM datasets. Useful testing optimized designs via PsN’s (http://psn.sf.net) SSE tool, example. Two new functions create_design() create_design_space() allow design design space creation without need model parameter values. Updated create.poped.database() function use create_design() create_design_space() Added examples evaluation optimization one-target quasi-steady-state target mediated drug disposition model (TMDD) system.file(“examples”,package=“PopED”) directory PopED installation. Added 2-compartment, oral absorption, multiple dose example system.file(“examples”, package=“PopED”) directory PopED installation. Updated plot_efficiency_of_windows() allow plotting RSE parameter y-axis. Updated error handing Laplace approximation ED OFV. Fixed bug computing FIM one BSV term present model (calculation gave error). Fixed bug plot_model_predictions error returned time values xt matrix used design calculation (ni different size(xt,2), see ?create_poped_database). Various small bug fixes.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-011","dir":"Changelog","previous_headings":"","what":"PopED 0.1.1","title":"PopED 0.1.1","text":"CRAN release: 2014-05-27 Updated package author list New functionality compute ED OFV using Laplace approximation. can orders magnitude faster standard MC integration approach. See ‘?ed_laplace_ofv’ ‘?evaluate.e.ofv.fim’ Added general function compute FIM OFV(FIM) available methods PopED. See ‘?calc_ofv_and_fim’. Added general optimization algorithm ‘RS_opt_gen()’ works D-family E-family optimization. Added optimization E-family designs ‘poped_optimize()’. Changed distribution tests package building Fixed bug correlations BSV (subject variability) terms model gave error creating PopED database Fixed bug get_rse failed parameter value 3.","code":""},{"path":"https://andrewhooker.github.io/PopED/news/index.html","id":"poped-010","dir":"Changelog","previous_headings":"","what":"PopED 0.1.0","title":"PopED 0.1.0","text":"CRAN release: 2014-04-28 PopED translated R MATLAB initial release.","code":""}]
